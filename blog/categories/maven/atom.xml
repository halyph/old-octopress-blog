<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-09-28T03:13:38+03:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Download Jars From Maven Central]]></title>
    <link href="http://halyph.com/blog/2015/03/17/how-to-download-jars-from-maven-central/"/>
    <updated>2015-03-17T18:00:00+02:00</updated>
    <id>http://halyph.com/blog/2015/03/17/how-to-download-jars-from-maven-central</id>
    <content type="html"><![CDATA[<center>
<img src="/images/blog/java.png">
<img src="/images/blog/ivy.png">
<img src="/images/blog/maven.png">
</center>


<p>We know how to download Java libraries with it&rsquo;s dependencies (transitive included) via Maven <em>pom.xml</em>, Ant/Ivy <em>build.xml</em> script, Gradle <em>build.gradle</em> script etc.
But what if we need to download them without these scripts.</p>

<p>There are several ways to do this.
Assume that we&rsquo;d like to download <code>spark-core</code> library (<code>groupId=com.sparkjava, artifactId=spark-core, version=2.1</code>) with all dependencies from <a href="http://search.maven.org/#artifactdetails%7Ccom.sparkjava%7Cspark-core%7C2.1%7Cjar">Maven Central</a> into <code>lib</code> folder.</p>

<a name="Use.Maven3.dependency.plugin"></a>
<h2>Use Maven3 dependency plugin</h2>

<p>Here is there variants for lib download:
&#8220;` bash Download library with all dependencies</p>

<a name="Specify.repoUrl..it.s.optional."></a>
<h1>Specify repoUrl (it&rsquo;s optional)</h1>

<p>mvn dependency:get -DrepoUrl=<a href="http://download.java.net/maven/2/">http://download.java.net/maven/2/</a> -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1</p>

<a name="OR.use.default.repoUrl"></a>
<h1>OR use default repoUrl</h1>

<p>mvn dependency:get -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1</p>

<a name="OR.use.parameter.artifact.as.groupId:artifactId:version"></a>
<h1>OR use parameter artifact as groupId:artifactId:version</h1>

<p>mvn dependency:get -Dartifact=com.sparkjava:spark-core:2.1
&#8220;`</p>

<p>Now we need to copy just downloaded artifacts in our working directory:
&#8220;` bash Copy jars from local maven repo
mvn dependency:copy-dependencies -f $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.pom -DoutputDirectory=$(pwd)/lib</p>

<a name="the.previous.command.doesn.t.copy.spark-core-x.x.jar..that.s.why.we.should.copy.it.manually"></a>
<h1>the previous command doesn&rsquo;t copy spark-core-x.x.jar, that&rsquo;s why we should copy it manually</h1>

<p>cp $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.jar $(pwd)/lib
&#8220;`</p>

<a name="Use.standalone.Ivy"></a>
<h2>Use standalone Ivy</h2>

<p>We can use Ivy as standalone jar to download Maven dependencies without creating Ant build file:</p>

<pre><code class="bash"># 1. Download the latest ivy jar (currently it's v.2.4.0)
curl -L -O http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar

# 2. Run ivy.jar to retrieve all dependencies
java -jar ivy-2.4.0.jar -dependency com.sparkjava spark-core 2.1 -retrieve "lib/[artifact]-[revision](-[classifier]).[ext]"
</code></pre>

<p>As you can see Ivy downloads approach is much simpler. The only cons (or pros, it depends) that <strong>ivy.jar</strong> should be additionally downloaded.</p>

<a name="Calling.Ivy.from.Groovy.or.Java"></a>
<h2>Calling Ivy from Groovy or Java</h2>

<p>Here I&rsquo;ve decided to store <a href="http://makandracards.com/evgeny-goldin/5817-calling-ivy-from-groovy-or-java">Evgeny&rsquo;s Goldin</a> code snippet as a reference for myself. Programmatic artifacts downloads is not a common operation. It&rsquo;s alway nice to know the general concept how it can be done. Especially when Ivy documentation is not very informative.</p>

<pre><code class="java Groovy snippet of calling Ivy">import org.apache.ivy.Ivy
import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor
import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor
import org.apache.ivy.core.module.id.ModuleRevisionId
import org.apache.ivy.core.resolve.ResolveOptions
import org.apache.ivy.core.settings.IvySettings
import org.apache.ivy.plugins.resolver.URLResolver
import org.apache.ivy.core.report.ResolveReport
import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter


public File resolveArtifact(String groupId, String artifactId, String version) {
        //creates clear ivy settings
        IvySettings ivySettings = new IvySettings();
        //url resolver for configuration of maven repo
        URLResolver resolver = new URLResolver();
        resolver.setM2compatible(true);
        resolver.setName('central');
        //you can specify the url resolution pattern strategy
        resolver.addArtifactPattern(
            'http://repo1.maven.org/maven2/[organisation]/[module]/[revision]/[artifact](-[revision]).[ext]');
        //adding maven repo resolver
        ivySettings.addResolver(resolver);
        //set to the default resolver
        ivySettings.setDefaultResolver(resolver.getName());
        //creates an Ivy instance with settings
        Ivy ivy = Ivy.newInstance(ivySettings);

        File ivyfile = File.createTempFile('ivy', '.xml');
        ivyfile.deleteOnExit();

        String[] dep = [groupId, artifactId, version]

        DefaultModuleDescriptor md =
                DefaultModuleDescriptor.newDefaultInstance(ModuleRevisionId.newInstance(dep[0],
                dep[1] + '-caller', 'working'));

        DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(md,
                ModuleRevisionId.newInstance(dep[0], dep[1], dep[2]), false, false, true);
        md.addDependency(dd);

        //creates an ivy configuration file
        XmlModuleDescriptorWriter.write(md, ivyfile);

        String[] confs = ['default'];
        ResolveOptions resolveOptions = new ResolveOptions().setConfs(confs);

        //init resolve report
        ResolveReport report = ivy.resolve(ivyfile.toURL(), resolveOptions);

        //so you can get the jar library
        File jarArtifactFile = report.getAllArtifactsReports()[0].getLocalFile();

        return jarArtifactFile;
}

resolveArtifact( 'log4j', 'log4j', '1.2.16' )
</code></pre>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/15450383/using-maven-to-download-dependencies-to-a-directory-on-the-command-line/15456621">Using Maven to download dependencies to a directory on the command line - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/15598612/simplest-ivy-code-to-programmatically-retrieve-dependency-from-maven-central">Simplest Ivy code to programmatically retrieve dependency from Maven Central - Stack Overflow</a></li>
<li><a href="http://makandracards.com/evgeny-goldin/5817-calling-ivy-from-groovy-or-java">Calling Ivy from Groovy or Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Flow for Simple App Creation]]></title>
    <link href="http://halyph.com/blog/2015/02/13/maven-flow-for-simple-app-creation/"/>
    <updated>2015-02-13T00:18:30+02:00</updated>
    <id>http://halyph.com/blog/2015/02/13/maven-flow-for-simple-app-creation</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/java.png"></p>

<p>I provided my reflections about <em>&ldquo;Java for Everything&rdquo;</em> in the previous <a href="/blog/2015/02/13/do-we-need-java-for-everything">post</a>.
Here we will review other implementation of this concept.</p>

<p>I have the next concerns about any Java application (big or small):</p>

<ul>
<li>library dependency management must be simple</li>
<li>it&rsquo;s very bad practice to distribute sources along with libraries (dependency management tools must be used instead: Ivy, Maven, Gradle, etc.)</li>
<li>small application might have a little bit different project layout (not equals to traditional Maven layout)</li>
<li>we should be able to setup IDE (in my case <a href="https://www.jetbrains.com/idea/">Intellij IDEA</a>) as quick a possible. I hate editing Java programs in plain text editor</li>
<li>it must be a convenient way to run Java application with different arguments in <em>production</em> and <em>development</em> modes</li>
</ul>


<a name="Use.Case"></a>
<h2>Use Case</h2>

<p>We have to create simple and small REST application based on <a href="https://github.com/perwendel/spark">Spark Java framework</a> (A Sinatra inspired framework for Java).</p>

<p>Here is the source:
&#8220;` java
import static spark.Spark.get;
import static spark.SparkBase.port;</p>

<p>public class App {
    public static void main( String[] args ) throws NumberFormatException {</p>

<pre><code>    for(String arg: args) System.out.printf("&gt; %s", arg);

    get("/hello", (request, response) -&gt; {
        return "Hello World!";
    });
}
</code></pre>

<p>} <br/>
&#8220;`</p>

<p>So, here is the list of issues:</p>

<ul>
<li>get Spark dependency with all transitive dependencies</li>
<li>pass command-line arguments into the app</li>
<li>use this application in development mode and in &ldquo;production&rdquo; (packed in jar)</li>
</ul>


<a name="Traditional.Maven.Way"></a>
<h2>Traditional Maven Way</h2>

<ul>
<li><p>Generate empty project via Maven archetype
<code>bash
mvn archetype:generate \
-DgroupId=com.halyph \
-DartifactId=sparkblog \
-Dpackage=com.halyph.blog \
-Dversion=1.0-SNAPSHOT \
-DarchetypeGroupId=org.apache.maven.archetypes \
-DarchetypeArtifactId=maven-archetype-quickstart \
-DinteractiveMode=false
</code></p></li>
<li><p>Open this in IDEA (I don&rsquo;t use other IDEs) via &ldquo;Open File or Project&rdquo; and select folder with generated <strong>pom.xml</strong> file. We don&rsquo;t need tests, so we can delete <em>src->test</em> folder and remove junit dependency from <strong>pom.xml</strong> file. Now, we can easily run our application via IDE.</p></li>
<li><p>Add Spark framework dependency to <strong>pom.xml</strong> and update our <strong>App</strong> class
&#8220;` xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion></p>

<p><groupId>com.halyph</groupId>
<artifactId>sparkblog</artifactId>
<version>1.0-SNAPSHOT</version>
<packaging>jar</packaging></p>

<p><name>sparkblog</name>
<url><a href="http://maven.apache.org">http://maven.apache.org</a></url></p>

<p><properties>
  &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding>
</properties></p>

<p><dependencies>
  <dependency>
    <groupId>com.sparkjava</groupId>
    <artifactId>spark-core</artifactId>
    <version>2.1</version>
  </dependency>
</dependencies></p>

<p><build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>3.1</version>
      <configuration>
        <target>1.8</target>
        <source>1.8</source>
      </configuration>
    </plugin>
  </plugins>
</build>
</project>
&#8220;`</p></li>
</ul>


<pre><code class="java">package com.halyph.blog;

import static spark.Spark.get;

public class App {
    public static void main(String[] args) throws NumberFormatException {

        String myArgs = "";
        for (String arg : args) {
            System.out.printf("&gt; %s", arg);
            myArgs += arg + " : ";
        }
        System.out.println();
        final String finalMyArgs = myArgs;
        get("/hello", (request, response) -&gt; {
            return "Hello World!\n args = " + finalMyArgs;
        });
    }
}
</code></pre>

<p>This application can be easily run via IDE, but lets run it via Maven</p>

<ul>
<li>We should use <a href="http://mojo.codehaus.org/exec-maven-plugin/usage.html">Exec Maven Plugin</a> to run the app with all dependencies
&#8220;` bash
$ mvn clean compile exec:java -Dexec.mainClass=&ldquo;com.halyph.blog.App&rdquo;  -Dexec.args=&ldquo;9090 one 1 2&rdquo;
[INFO] Scanning for projects&hellip;
[INFO]
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Building sparkblog 1.0-SNAPSHOT
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO]
[INFO] &mdash; maven-clean-plugin:2.4.1:clean (default-clean) @ sparkblog &mdash;
[INFO] Deleting d:\MyProjects\jwrapper\bloggg\sparkblog\target
[INFO]
[INFO] &mdash; maven-resources-plugin:2.5:resources (default-resources) @ sparkblog &mdash;
[debug] execute contextualize
[INFO] Using &lsquo;UTF-8&rsquo; encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory d:\MyProjects\sparkblog\src\main\resources
[INFO]
[INFO] &mdash; maven-compiler-plugin:3.1:compile (default-compile) @ sparkblog &mdash;
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to d:\MyProjects\jwrapper\bloggg\sparkblog\target\classes
[INFO]
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) @ sparkblog >>>
[INFO]
[INFO] &lt;&lt;&lt; exec-maven-plugin:1.2.1:java (default-cli) @ sparkblog &lt;&lt;&lt;
[INFO]
[INFO] &mdash; exec-maven-plugin:1.2.1:java (default-cli) @ sparkblog &mdash;

<blockquote><p>9090> one> 1> 2
[Thread-1] INFO spark.webserver.SparkServer - == Spark has ignited &hellip;
[Thread-1] INFO spark.webserver.SparkServer - >> Listening on 0.0.0.0:4567
[Thread-1] INFO org.eclipse.jetty.server.Server - jetty-9.0.2.v20130417
[Thread-1] INFO org.eclipse.jetty.server.ServerConnector - Started ServerConnector@4afe75c9{HTTP/1.1}{0.0.0.0:4567}
&#8220;`</p></blockquote></li>
</ul>


<p>In case the application run configurations is persistent (&ldquo;main&rdquo; class and CLI arguments are changing rarely) we can configure it in <strong>pom.xml</strong>:
<code>xml
 &lt;build&gt;
    &lt;plugins&gt;
      ...
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.3.2&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;goals&gt;
              &lt;goal&gt;java&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;
          &lt;mainClass&gt;com.halyph.blog.App&lt;/mainClass&gt;
          &lt;arguments&gt;
            &lt;argument&gt;9090&lt;/argument&gt;
            &lt;argument&gt;one&lt;/argument&gt;
            &lt;argument&gt;1&lt;/argument&gt;
            &lt;argument&gt;2&lt;/argument&gt;
          &lt;/arguments&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
</code></p>

<ul>
<li>It&rsquo;s nice idea to use <code>mvn exec:java</code>, but it might be a little bit slow. So, we might decide to use some shell script which increase compiled application ramp up time. The problem is that the application have dependencies (which have transitive dependencies). I.e. <code>java</code> classpath have to be configured somehow.</li>
</ul>


<p>Well, I borrowed the ideas from &ldquo;<a href="http://saltnlight5.blogspot.com/2012/08/a-better-java-shell-script-wrapper.html">A better java shell script wrapper</a>&rdquo; script. Here it is:
&#8220;` bash</p>

<a name="L..usr.bin.env.bash"></a>
<h1>!/usr/bin/env bash</h1>

<p>#</p>

<a name="Copyright.2012.Zemian.Deng"></a>
<h1>Copyright 2012 Zemian Deng</h1>

<p>#</p>

<a name="A.wrapper.script.that.run.any.Java.application.in.unix.cygwin.bash.env."></a>
<h1>A wrapper script that run any Java application in unix/cygwin bash env.</h1>

<p>#</p>

<a name="This.script.is.assumed.to.be.located.in.an.application.s..bin..directory..It.will"></a>
<h1>This script is assumed to be located in an application&rsquo;s &ldquo;bin&rdquo; directory. It will</h1>

<a name="auto.resolve.its.directory.location.relative.to.the.application.path..which.is.one"></a>
<h1>auto resolve its directory location relative to the application path (which is one</h1>

<a name="parent.up.from.the.script...Therefore..this.script.can.be.run.any.where.in.the.file"></a>
<h1>parent up from the script.) Therefore, this script can be run any where in the file</h1>

<a name="system.and.it.will.still.reference.the.same.application.directory."></a>
<h1>system and it will still reference the same application directory.</h1>

<p>#</p>

<a name="This.script.will.by.default.auto.setup.a.Java.classpath.that.picks.up.any..config."></a>
<h1>This script will by default auto setup a Java classpath that picks up any &ldquo;config&rdquo;</h1>

<a name="and..lib..directories.under.the.application.directory..It.also.will.also.add.a"></a>
<h1>and &ldquo;lib&rdquo; directories under the application directory. It also will also add a</h1>

<a name="any.typical.Maven.project.output.directories.such.as..target.test-classes.."></a>
<h1>any typical Maven project output directories such as &ldquo;target/test-classes&rdquo;,</h1>

<a name="L.target.classes...and..target.dependency..into.classpath..This.can.be.disable.by"></a>
<h1>&ldquo;target/classes&rdquo;, and &ldquo;target/dependency&rdquo; into classpath. This can be disable by</h1>

<a name="setting.RUN_JAVA_NO_AUTOCP.1."></a>
<h1>setting RUN_JAVA_NO_AUTOCP=1.</h1>

<p>#</p>

<a name="If.the..Default.parameters..section.bellow.doesn.t.match.to.user.s.env..then.user"></a>
<h1>If the &ldquo;Default parameters&rdquo; section bellow doesn&rsquo;t match to user&rsquo;s env, then user</h1>

<a name="may.override.these.variables.in.their.terminal.session.or.preset.them.in.shell.s"></a>
<h1>may override these variables in their terminal session or preset them in shell&rsquo;s</h1>

<a name="profile.startup.script..The.values.of.all.path.should.be.in.cygwin.unix.path."></a>
<h1>profile startup script. The values of all path should be in cygwin/unix path,</h1>

<a name="and.this.script.will.auto.convert.them.into.Windows.path.where.is.needed."></a>
<h1>and this script will auto convert them into Windows path where is needed.</h1>

<p>#</p>

<a name="User.may.customize.the.Java.classpath.by.setting.RUN_JAVA_CP..which.will.prefix.to.existing"></a>
<h1>User may customize the Java classpath by setting RUN_JAVA_CP, which will prefix to existing</h1>

<a name="classpath..or.use.the..-cp..option..which.will.postfix.to.existing.classpath."></a>
<h1>classpath, or use the &ldquo;-cp&rdquo; option, which will postfix to existing classpath.</h1>

<p>#</p>

<a name="Usage:"></a>
<h1>Usage:</h1>

<a name="run-java..java_opts...java_main_class...-cp..more.classpath...-Dsysprop.value."></a>
<h1>run-java [java_opts] <java_main_class> [-cp /more/classpath] [-Dsysprop=value]</h1>

<p>#</p>

<a name="Example:"></a>
<h1>Example:</h1>

<a name="run-java.example.Hello"></a>
<h1>run-java example.Hello</h1>

<a name="run-java.example.Hello.-Dname.World"></a>
<h1>run-java example.Hello -Dname=World</h1>

<a name="run-java.org.junit.runner.JUnitCore.example.HelloTest.-cp...HOME.apps.junit.lib..."></a>
<h1>run-java org.junit.runner.JUnitCore example.HelloTest -cp &ldquo;$HOME/apps/junit/lib/*&rdquo;</h1>

<p>#</p>

<a name="Created.by:.Zemian.Deng.03.09.2012"></a>
<h1>Created by: Zemian Deng 03/09/2012</h1>

<a name="This.run.script.dir..resolve.to.absolute.path."></a>
<h1>This run script dir (resolve to absolute path)</h1>

<p>SCRIPT_DIR=$(cd $(dirname $0) &amp;&amp; pwd)    # This dir is where this script live.
APP_DIR=$(cd $SCRIPT_DIR/.. &amp;&amp; pwd)      # Assume the application dir is one level up from script dir.</p>

<a name="Default.parameters"></a>
<h1>Default parameters</h1>

<p>JAVA_HOME=${JAVA_HOME:=$HOME/apps/jdk}     # This is the home directory of Java development kit.
RUN_JAVA_CP=${RUN_JAVA_CP:=$CLASSPATH}     # A classpath prefix before -classpath option, default to $CLASSPATH
RUN_JAVA_OPTS=${RUN_JAVA_OPTS:=}           # Java options (-Xmx512m -XX:MaxPermSize=128m etc)
RUN_JAVA_DEBUG=${RUN_JAVA_DEBUG:=}         # If not empty, print the full java command line before executing it.
RUN_JAVA_NO_PARSE=${RUN_JAVA_NO_PARSE:=}   # If not empty, skip the auto parsing of -D and -cp options from script arguments.
RUN_JAVA_NO_AUTOCP=${RUN_JAVA_NO_AUTOCP:=} # If not empty, do not auto setup Java classpath
RUN_JAVA_DRY=${RUN_JAVA_DRY:=}             # If not empty, do not exec Java command, but just print</p>

<a name="OS.specific.support....var..em.must..em..be.set.to.either.true.or.false."></a>
<h1>OS specific support.  $var <em>must</em> be set to either true or false.</h1>

<p>CYGWIN=false;
case &ldquo;<code>uname</code>&rdquo; in
  CYGWIN*) CYGWIN=true ;;
esac</p>

<a name="Define.where.is.the.java.executable.is"></a>
<h1>Define where is the java executable is</h1>

<p>JAVA_CMD=java
if [ -d &ldquo;$JAVA_HOME&rdquo; ]; then
    JAVA_CMD=&ldquo;$JAVA_HOME/bin/java&rdquo;
fi</p>

<a name="Auto.setup.applciation.s.Java.Classpath..only.if.they.exists."></a>
<h1>Auto setup applciation&rsquo;s Java Classpath (only if they exists)</h1>

<p>if [ -z &ldquo;$RUN_JAVA_NO_AUTOCP&rdquo; ]; then
    if [ -d &ldquo;$APP_DIR/config&rdquo; ]; then RUN_JAVA_CP=&ldquo;$RUN_JAVA_CP:$APP_DIR/config&rdquo; ; fi
    if [ -d &ldquo;$APP_DIR/target/test-classes&rdquo; ]; then RUN_JAVA_CP=&ldquo;$RUN_JAVA_CP:$APP_DIR/target/test-classes&rdquo; ; fi
    if [ -d &ldquo;$APP_DIR/target/classes&rdquo; ]; then RUN_JAVA_CP=&ldquo;$RUN_JAVA_CP:$APP_DIR/target/classes&rdquo; ; fi
    if [ -d &ldquo;$APP_DIR/target/dependency&rdquo; ]; then RUN_JAVA_CP=&ldquo;$RUN_JAVA_CP:$APP_DIR/target/dependency/<em>&rdquo; ; fi
    if [ -d &ldquo;$APP_DIR/lib&rdquo; ]; then RUN_JAVA_CP=&ldquo;$RUN_JAVA_CP:$APP_DIR/lib/</em>&rdquo; ; fi
fi</p>

<p>ARGS=&ldquo;$@&rdquo;</p>

<a name="Parse.addition..-cp..and..-D..after.the.Java.main.class.from.script.arguments"></a>
<h1>Parse addition &ldquo;-cp&rdquo; and &ldquo;-D&rdquo; after the Java main class from script arguments</h1>

<a name="This.is.done.for.convenient.sake.so.users.do.not.have.to.export.RUN_JAVA_CP.and.RUN_JAVA_OPTS"></a>
<h1>This is done for convenient sake so users do not have to export RUN_JAVA_CP and RUN_JAVA_OPTS</h1>

<a name="saparately..but.now.they.can.pass.into.end.of.this.run-java.script.instead."></a>
<h1>saparately, but now they can pass into end of this run-java script instead.</h1>

<a name="This.can.be.disable.by.setting.RUN_JAVA_NO_PARSE.1."></a>
<h1>This can be disable by setting RUN_JAVA_NO_PARSE=1.</h1>

<p>if [ -z &ldquo;$RUN_JAVA_NO_PARSE&rdquo; ]; then
    # Prepare variables for parsing
    FOUND_CP=
    NEW_ARGS[0]=&lsquo;&rsquo;
    IDX=0</p>

<pre><code># Parse all arguments and look for "-cp" and "-D"
for ARG in "$@"; do
    if [[ -n $FOUND_CP ]]; then
        RUN_JAVA_CP="$RUN_JAVA_CP:$ARG"
        FOUND_CP=
    else
        case $ARG in
        '-cp')
            FOUND_CP=1
            ;;
        '-D'*)
            RUN_JAVA_OPTS="$RUN_JAVA_OPTS $ARG"
            ;;
        *)
            NEW_ARGS[$IDX]="$ARG"
            let IDX=$IDX+1
            ;;
        esac
    fi
done
ARGS="${NEW_ARGS[@]}"
</code></pre>

<p>fi</p>

<a name="Convert.Windows.Java.Classpath"></a>
<h1>Convert Windows Java Classpath</h1>

<p>if $CYGWIN; then
    RUN_JAVA_CP=$(cygpath -mp $RUN_JAVA_CP)
fi</p>

<a name="Display.full.Java.command."></a>
<h1>Display full Java command.</h1>

<p>if [ -n &ldquo;$RUN_JAVA_DEBUG&rdquo; ] || [ -n &ldquo;$RUN_JAVA_DRY&rdquo; ]; then
    echo &ldquo;$JAVA_CMD&rdquo; $RUN_JAVA_OPTS -cp &ldquo;$RUN_JAVA_CP&rdquo; $ARGS
fi</p>

<a name="Run.Java.Main.class"></a>
<h1>Run Java Main class</h1>

<p>if [ -z &ldquo;$RUN_JAVA_DRY&rdquo; ]; then
    &ldquo;$JAVA_CMD&rdquo; $RUN_JAVA_OPTS -cp &ldquo;$RUN_JAVA_CP&rdquo; $ARGS
fi
&#8220;`</p>

<p>The main idea is to run <code>mvn dependency:copy-dependencies</code>, this will generate all the jar files into <code>target/dependency</code> folder</p>

<pre><code class="bash">$ mvn dependency:copy-dependencies
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building sparkblog 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.1:copy-dependencies (default-cli) @ sparkblog ---
[INFO] Copying spark-core-2.1.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\spark-core-2.1.jar
[INFO] Copying jetty-http-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-http-9.0.2.v20130417.jar
[INFO] Copying jetty-io-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-io-9.0.2.v20130417.jar
[INFO] Copying jetty-security-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-security-9.0.2.v20130417.jar
[INFO] Copying jetty-server-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-server-9.0.2.v20130417.jar
[INFO] Copying jetty-servlet-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-servlet-9.0.2.v20130417.jar
[INFO] Copying jetty-util-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-util-9.0.2.v20130417.jar
[INFO] Copying jetty-webapp-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-webapp-9.0.2.v20130417.jar
[INFO] Copying jetty-xml-9.0.2.v20130417.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\jetty-xml-9.0.2.v20130417.jar
[INFO] Copying javax.servlet-3.0.0.v201112011016.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\javax.servlet-3.0.0.v201112011016.jar
[INFO] Copying slf4j-api-1.7.7.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\slf4j-api-1.7.7.jar
[INFO] Copying slf4j-simple-1.7.7.jar to d:\MyProjects\jwrapper\bloggg\sparkblog\target\dependency\slf4j-simple-1.7.7.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.978s
[INFO] Finished at: Thu Feb 12 18:22:54 EET 2015
[INFO] Final Memory: 9M/243M
[INFO] ------------------------------------------------------------------------
</code></pre>

<p>Now, we can reuse the provided <em>above</em> script <strong>or</strong> use the provided <em>below</em> one-liner:
<code>bash
java -cp target\classes;target\dependency\* com.halyph.blog.App 9090 one 1 2
</code>
This one-liner is very simple and can be transformed to shell/batch scripts depending on the level of re-use you&rsquo;d like to implement.</p>

<ul>
<li>Now, it&rsquo;s time to created pre-packed application bundle which can be easily distributed. We will use <a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a>:
<code>xml
&lt;build&gt;
  &lt;plugins&gt;
   ...
    &lt;plugin&gt;
      &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
      &lt;artifactId&gt;appassembler-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.9&lt;/version&gt;
      &lt;!--
      This (executions) section can be omitted.
      In case it's omitted we should call the next command to generate wrapper:
      mvn package appassembler:assemble
      --&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;phase&gt;package&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;assemble&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
      &lt;configuration&gt;
        &lt;programs&gt;
          &lt;program&gt;
            &lt;mainClass&gt;com.halyph.blog.App&lt;/mainClass&gt;
            &lt;id&gt;app&lt;/id&gt;
          &lt;/program&gt;
        &lt;/programs&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code>

<blockquote><p>The Application Assembler Plugin is a Maven plugin for generating scripts for starting java applications. All dependencies and the artifact of the project itself are placed in a generated Maven repository in a defined assemble directory. All artifacts (dependencies + the artifact from the project) are added to the classpath in the generated bin scripts.</p></blockquote></li>
</ul>


<p><a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a> usage:
<code>bash  
$ mvn package
$ target/appassembler/bin/app
</code></p>

<blockquote><ul>
<li><p>All dependencies and the artifact itself are placed in the defined assemble directory (defaults to <code>$project.build.directory/appassembler</code>).</p></li>
<li><p>A <code>bin/</code> directory is created in the assemble directory and the generated bin scripts are placed in that directory (defaults to both unix shell scripts and Windows bat files).</p></li>
</ul>
</blockquote>

<p>Note: <a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a> have a lot of customization options, just check the documentation.</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>Here was shown that using such tool as Maven you can be productive and &ldquo;agile&rdquo; (use <a href="http://gradle.org">Gradle</a> if you&rsquo;d like to be in trend):</p>

<ul>
<li>generate project skeleton from scratch</li>
<li>open it in IDE without ceremony</li>
<li>call the app via Maven plugin</li>
<li>call it as plain CLI application, but with small ceremony (need to run <em>dependency:copy-dependencies</em>)</li>
<li>package the app for further distribution</li>
</ul>


<p>Yes, it&rsquo;s not a simple <em>write-one</em> Java &ldquo;script&rdquo;, but it&rsquo;s flexible enough to feel like it is.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="/blog/2015/02/13/do-we-need-java-for-everything">Do We Need Java for Everything?</a></li>
<li><a href="http://saltnlight5.blogspot.com/2012/08/a-better-java-shell-script-wrapper.html">A better java shell script wrapper</a></li>
<li><a href="http://mojo.codehaus.org/exec-maven-plugin/usage.html">Exec Maven Plugin</a></li>
<li><a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a></li>
<li><a href="http://blog.plesslweb.ch/post/6628462331/wrapper-script-for-java-command-line-applications">Wrapper Script for Java Command-Line Applications</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Build Number Plugin - Sample Usage]]></title>
    <link href="http://halyph.com/blog/2012/06/27/maven-build-number-plugin-sample-usage/"/>
    <updated>2012-06-27T23:29:00+03:00</updated>
    <id>http://halyph.com/blog/2012/06/27/maven-build-number-plugin-sample-usage</id>
    <content type="html"><![CDATA[<p><a href="http://mojo.codehaus.org/buildnumber-maven-plugin" target="_blank">buildnumber-maven-plugin</a>.
<br />
<br />This post is based on:
<br /></p>

<ul>
    <li><a href="http://mojo.codehaus.org/buildnumber-maven-plugin/usage.html">http://mojo.codehaus.org/buildnumber-maven-plugin/usage.html</a></li>
    <li><a href="http://www.site.lalitbhatt.com/maven-build-number-plugin">http://www.site.lalitbhatt.com/maven-build-number-plugin</a></li>
    <li><a href="http://blog.peterlynch.ca/2009/11/buildnumber-maven-plugin-helpful.html">http://blog.peterlynch.ca/2009/11/buildnumber-maven-plugin-helpful.html</a></li>
    <li><a href="http://apollo.ucalgary.ca/tlcprojectswiki/index.php/Public/Project_Versioning_-_Best_Practices#Build_Versioning">http://apollo.ucalgary.ca/tlcprojectswiki/index.php/Public/Project_Versioning_-_Best_Practices#Build_Versioning</a> </li>
</ul>


<p><br />We have some project and need to include into jar manifest file sequential build number which isn&rsquo;t based on VCS (SVN, Git, Mercurial, etc.) revision number. Let&rsquo;s create appropriate <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">pom.xml</span> file and implement small demo to verify the result.
<br />
<br /><span style="font-size: large;">Generate maven project</span>
<br /><pre class="brush: bash;">$ mvn archetype:generate -DgroupId=org.halyph -DartifactId=buildNoTest\<br />-DarchetypeArtifactId=maven-archetype-quickstart \<br />-DinteractiveMode=false<br /></pre>
<br /><span style="font-size: large;">Create the pom.xml</span>
<br /></p>

<pre class="brush: xml;">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemalocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
 &lt;modelversion&gt;4.0.0&lt;/modelversion&gt;
 &lt;groupid&gt;org.halyph&lt;/groupid&gt;
 &lt;artifactid&gt;buildNoTest&lt;/artifactid&gt;
 &lt;packaging&gt;jar&lt;/packaging&gt;
 &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
 &lt;name&gt;buildNoTest&lt;/name&gt;
 &lt;url&gt;http://maven.apache.org&lt;/url&gt;
 
 &lt;dependencies&gt;
  &lt;dependency&gt;
   &lt;groupid&gt;junit&lt;/groupid&gt;
   &lt;artifactid&gt;junit&lt;/artifactid&gt;
   &lt;version&gt;3.8.1&lt;/version&gt;
   &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
 &lt;/dependencies&gt;
 
 &lt;properties&gt;
  &lt;project .build.sourceencoding=&quot;&quot;&gt;UTF-8&lt;/project&gt;
 &lt;/properties&gt;
 
 &lt;!-- 
 If you have access to scm then you can place actual url's. 
 Otherwise with &lt;revisionOnScmFailure /&gt; you can give some fake URLs as follows. 
 --&gt;
 &lt;scm&gt;
  &lt;connection&gt;scm:svn:http://none&lt;/connection&gt;
  &lt;developerconnection&gt;scm:svn:https://none&lt;/developerconnection&gt;
  &lt;url&gt;scm:svn:https://none&lt;/url&gt;
 &lt;/scm&gt;
 
 &lt;build&gt;
  &lt;resources&gt;
   &lt;resource&gt;
    &lt;directory&gt;src/main/resources&lt;/directory&gt;
   &lt;/resource&gt;
   &lt;resource&gt;
    &lt;directory&gt;src/main/filtered-resources&lt;/directory&gt;
    &lt;filtering&gt;true&lt;/filtering&gt;
   &lt;/resource&gt;
  &lt;/resources&gt;
  &lt;plugins&gt;
   &lt;plugin&gt;
    &lt;groupid&gt;org.codehaus.mojo&lt;/groupid&gt;
    &lt;artifactid&gt;buildnumber-maven-plugin&lt;/artifactid&gt;
    &lt;version&gt;1.1&lt;/version&gt;
    &lt;executions&gt;
     &lt;execution&gt;
      &lt;phase&gt;generate-resources&lt;/phase&gt;
      &lt;goals&gt;
       &lt;goal&gt;create&lt;/goal&gt;
      &lt;/goals&gt;
     &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
     &lt;!-- 
      doCheck and doUpdate actually talk to repository if it's true,
      Check would check that there are no local changes. 
      Update would update it 
     --&gt;
     &lt;docheck&gt;false&lt;/docheck&gt;
     &lt;doupdate&gt;false&lt;/doupdate&gt;
     &lt;!-- 
      This ensures that even if we are not connected to scm than also
      take the version from local .svn file 
     --&gt;
     &lt;revisiononscmfailure&gt;
      
     &lt;!--
      Generate sequence build number based on:
      build number and timestamp      
     --&gt;
     &lt;format&gt;Build: #{0} ({1,date})&lt;/format&gt;
     &lt;items&gt;
      &lt;item&gt;buildNumber\d*&lt;/item&gt;
      &lt;item&gt;timestamp&lt;/item&gt;
     &lt;/items&gt;
    &lt;/revisiononscmfailure&gt;&lt;/configuration&gt;
   &lt;/plugin&gt;
   &lt;plugin&gt;
    &lt;groupid&gt;org.apache.maven.plugins&lt;/groupid&gt;
    &lt;artifactid&gt;maven-jar-plugin&lt;/artifactid&gt;
    &lt;version&gt;2.1&lt;/version&gt;
    &lt;configuration&gt;
     &lt;archive&gt;
      &lt;!-- will put the entries into META-INF/MANIFEST.MF file --&gt;
      &lt;manifestentries&gt;
       &lt;implementation-version&gt;${project.version}&lt;/implementation-version&gt;
       &lt;implementation-build&gt;${buildNumber}&lt;/implementation-build&gt;
      &lt;/manifestentries&gt;
     &lt;/archive&gt;
    &lt;/configuration&gt;
   &lt;/plugin&gt;
  &lt;/plugins&gt;
 &lt;/build&gt;
&lt;/project&gt;
</pre>


<p><br /><span style="font-size: large;">Create demo application to verify the results</span>
<br /><pre class="brush: java;">package org.halyph;<br /><br />import java.io.IOException;<br />import java.util.ResourceBundle;<br />import java.util.jar.Attributes;<br />import java.util.jar.Manifest;<br /><br />public class App<br />{<br />    public static void main( String[] args ) throws IOException<br />    {<br />        System.out.println(&ldquo;Verify Resource bundle&rdquo; );<br />  <br /> // Check filtered resources based on generated build number<br />        ResourceBundle bundle = ResourceBundle.getBundle( &ldquo;build&rdquo; );<br />        String msg = bundle.getString( &ldquo;build.message&rdquo; );<br />        System.out.println(msg);<br /><br />        System.out.println(&ldquo;\nVerify Generated MANIFEST.MF Properties&rdquo; );<br /><br /> // Check Manifest file based on generated build number<br />        Manifest mf = new Manifest();<br />        mf.read(Thread.currentThread().getContextClassLoader().getResourceAsStream(&ldquo;META-INF/MANIFEST.MF&rdquo;));<br /><br />        Attributes atts = mf.getMainAttributes();<br /><br />        System.out.println(&ldquo;Implementation-Versio: &rdquo; + atts.getValue(&ldquo;Implementation-Version&rdquo;));<br />        System.out.println(&ldquo;Implementation-Build: &rdquo; + atts.getValue(&ldquo;Implementation-Build&rdquo;));<br />    }<br />}<br /></pre>
<br /><span style="font-size: large;">Build </span><span style="font-size: large;">application several time </span><span style="font-size: large;">and Run </span>
<br /><pre class="brush: bash;">$ mvn install </pre><pre class="brush: bash;">$ mvn install&nbsp;</pre><pre class="brush: bash;">$ mvn install &nbsp;</pre><pre class="brush: bash;">$ java -cp target\buildNoTest-1.0-SNAPSHOT.jar org.halyph.App<br />Verify Resource bundle<br />Build: #3 (Jun 27, 2012)<br /><br />Verify Generated MANIFEST.MF Properties<br />Implementation-Versio: 1.0-SNAPSHOT<br />Implementation-Build: Build: #3 (Jun 27, 2012)<br /></pre>
<br /><span style="font-size: large;">Summary</span>
<br /></p>

<ol>
    <li>We should inform <a href="http://mojo.codehaus.org/buildnumber-maven-plugin" target="_blank">buildnumber-maven-plugin</a> that we won&#8217;t use version control revision as build number via adding fake <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&lt;scm&gt;</span> section into <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">pom.xml</span> and <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&lt;revisionOnScmFailure /&gt;</span> into <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">buildnumber-maven-plugin</span> <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&lt;configuration&gt;</span></li>
    <li>Implemented custom build number format, see <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">buildnumber-maven-plugin &lt;configuration&gt;/&lt;format&gt; </span>and <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&lt;configuration&gt;/&lt;items&gt;</span>.</li>
    <li>Added build number into jar manifest, see <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">maven-jar-plugin</span> <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">pom.xml</span> section </li>
    <li>Tested if generated build number can be properly added in filtered resources</li>
    <ul>
        <li>created <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">src\main\filtered-resources\build.properties</span> file</li><pre class="brush: bash;">build.message=${buildNumber}<br /></pre>
        <li>added resource filtering, see section <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&lt;resource&gt;</span> flag <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&lt;filtering&gt;true&lt;/filtering&gt;</span></li>
    </ul>
    <li>Demo application verifying the filtered resources and build number in jar manifest file</li>
</ol>


<p>&nbsp;You can git clone this project <a href="https://github.com/halyph/blog-sandbox/tree/master/Maven/blogpost_062712">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Resource Filtering]]></title>
    <link href="http://halyph.com/blog/2012/06/11/maven-resource-filtering/"/>
    <updated>2012-06-11T16:08:00+03:00</updated>
    <id>http://halyph.com/blog/2012/06/11/maven-resource-filtering</id>
    <content type="html"><![CDATA[<p><br /></p>

<ul>
    <li> <a href="http://www.manydesigns.com/en/portofino/documentation/tutorials/using-maven-profiles-and-resource-filtering">Using Maven profiles and resource filtering</a></li>
    <li><a href="http://maven.apache.org/guides/getting-started/index.html#How_do_I_add_resources_to_my_JAR">How do I add resources to my JAR?</a></li>
</ul>


<p>I assume that reader has a basic understanding of Maven resources.
<br />
<br /></p>

<h3>                Simple resource filtering </h3>


<p>Let&rsquo;s generate the project:
<br /><pre class="brush: bash;">$ mvn archetype:generate -DgroupId=org.halyph -DartifactId=proptest -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false<br /></pre>
<br /></p>

<pre class="brush: xml;">
&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemalocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelversion&gt;4.0.0&lt;/modelversion&gt;
    &lt;groupid&gt;org.halyph&lt;/groupid&gt;
    &lt;artifactid&gt;proptest&lt;/artifactid&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;proptest&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;junit&lt;/groupid&gt;
            &lt;artifactid&gt;junit&lt;/artifactid&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;
</pre>


<p>Now, we have an application property file with bunch of properties which must be filtered <i>\proptest\src\main\resources\application.properties</i>:
<br /><pre class="brush: bash;">application.username=${jdbc.username}<br />application.password=${jdbc.password}<br />application.databaseName=${jdbc.databaseName}<br /></pre>We have to add <i>build/resources</i> and <i>properties</i> section into pom.xml:
<br /></p>

<pre class="brush: xml;">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemalocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelversion&gt;4.0.0&lt;/modelversion&gt;
    &lt;groupid&gt;org.halyph&lt;/groupid&gt;
    &lt;artifactid&gt;proptest&lt;/artifactid&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;proptest&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;junit&lt;/groupid&gt;
            &lt;artifactid&gt;junit&lt;/artifactid&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;
    &lt;properties&gt;
        &lt;jdbc .username=&quot;&quot;&gt;default_username&lt;/jdbc&gt;
        &lt;jdbc .password=&quot;&quot;&gt;default_password&lt;/jdbc&gt;
        &lt;jdbc .databasename=&quot;&quot;&gt;default_databaseName&lt;/jdbc&gt;
    &lt;/properties&gt;
&lt;/project&gt;</pre>


<p>Lets run maven resource filtering and check the resulted <i>\proptest\target/classes/application.properties</i> file:
<br />
<br /><pre class="brush: bash;">$ mvn process-resources<br />$ cat target/classes/application.properties<br /><br />application.username=default_username<br />application.password=default_password<br />application.databaseName=default_databaseName<br /></pre>As you can see property values were successfully substituted.
<br /></p>

<h3>      &nbsp;</h3>


<h3>      Resource filtering with external properties file</h3>


<p>We can extract Maven properties in external property file <i>\proptest_extfile\src\main\filters\mysql_filters.properties:</i>
<br /><pre class="brush: bash;">jdbc.username=mysql_username<br />jdbc.password=mysql_password<br />jdbc.databaseName=mysql_databaseName<br /></pre>also, we have to adjust pom.xml to work properly with external filters (added <i>build/filters</i> and removed <i>properties</i>):
<br /></p>

<pre class="brush: bash;">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemalocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelversion&gt;4.0.0&lt;/modelversion&gt;
    &lt;groupid&gt;org.halyph&lt;/groupid&gt;
    &lt;artifactid&gt;proptest&lt;/artifactid&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;proptest&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;junit&lt;/groupid&gt;
            &lt;artifactid&gt;junit&lt;/artifactid&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;filters&gt;
            &lt;filter&gt;src/main/filters/mysql_filters.properties&lt;/filter&gt;
        &lt;/filters&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;
&lt;/project&gt;</pre>


<p>Let&rsquo;s check the resulted <i>\proptest\target\classes\application.properties</i> file:
<br /><pre class="brush: bash;">$ mvn process-resources<br />$ cat target/classes/application.properties<br /><br />application.username=mysql_username<br />application.password=mysql_password<br />application.databaseName=mysql_databaseName<br /></pre></p>

<h3>      &nbsp;</h3>


<h3>      Mixed resource filtering with external/internal properties&nbsp;</h3>


<p>What happen if we have overlapped properties in pom.xml with external property file.
<br />Modified pom.xml:
<br /></p>

<pre class="brush: xml;">
&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemalocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelversion&gt;4.0.0&lt;/modelversion&gt;
    &lt;groupid&gt;org.halyph&lt;/groupid&gt;
    &lt;artifactid&gt;proptest&lt;/artifactid&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;proptest&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;junit&lt;/groupid&gt;
            &lt;artifactid&gt;junit&lt;/artifactid&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;filters&gt;
            &lt;filter&gt;src/main/filters/mysql_filters.properties&lt;/filter&gt;
        &lt;/filters&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;
    &lt;properties&gt;
        &lt;jdbc .databasename=&quot;&quot;&gt;default_databaseName&lt;/jdbc&gt;
    &lt;/properties&gt;
&lt;/project&gt;
</pre>


<p>Now, check the resulted <i>\proptest\target\classes\application.properties</i> file:
<br /><pre class="brush: bash;">$ mvn process-resources<br />$ cat target/classes/application.properties<br /><br />application.username=mysql_username<br />application.password=mysql_password<br />application.databaseName=default_databaseName<br /></pre>In this case Maven uses <i>application.databaseName</i> property from pom.xml
<br />
<br /></p>

<h3>     Managing properties with <a href="http://mojo.codehaus.org/properties-maven-plugin/">properties-maven-plugin</a>&nbsp;</h3>


<p>Please check the plugin home page for more details <a href="http://mojo.codehaus.org/properties-maven-plugin"><a href="http://mojo.codehaus.org/properties-maven-plugin">http://mojo.codehaus.org/properties-maven-plugin</a></a>
<br />
<br />This plugin read external property and they behave like were declared in pom.xml.
<br />Modified pom.xml:
<br /></p>

<pre class="brush: xml;">
&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xsi:schemalocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelversion&gt;4.0.0&lt;/modelversion&gt;
    &lt;groupid&gt;org.halyph&lt;/groupid&gt;
    &lt;artifactid&gt;proptest&lt;/artifactid&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;proptest&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupid&gt;junit&lt;/groupid&gt;
            &lt;artifactid&gt;junit&lt;/artifactid&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupid&gt;org.codehaus.mojo&lt;/groupid&gt;
                &lt;artifactid&gt;properties-maven-plugin&lt;/artifactid&gt;
                &lt;version&gt;1.0-alpha-2&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;initialize&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;read-project-properties&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;files&gt;
                                &lt;file&gt;src/main/filters/cust_mysql_filters.properties&lt;/file&gt;
                            &lt;/files&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
        &lt;filters&gt;
            &lt;filter&gt;src/main/filters/mysql_filters.properties&lt;/filter&gt;
        &lt;/filters&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources&lt;/directory&gt;
                &lt;filtering&gt;true&lt;/filtering&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;
&lt;/project&gt;
</pre>


<p>Also, we have to add new external property file just to verify the property overlapping issue:
<br /><i>\proptest_extfile\src\main\filters\cust_mysql_filters.properties:</i>
<br /><pre class="brush: bash;">jdbc.username=cust_mysql_username<br />jdbc.password=cust_mysql_password<br />jdbc.databaseName=cust_mysql_databaseName<br /></pre>Now, it&rsquo;s time to check the resulted file <i>\proptest\target\classes\application.properties</i> file:
<br /><pre class="brush: bash;">$ mvn process-resources<br />$ cat target/classes/application.properties<br /><br />application.username=cust_mysql_username<br />application.password=cust_mysql_password<br />application.databaseName=cust_mysql_databaseName<br /></pre>
<br /><b>Have you noticed that we&rsquo;ve got properties values from <i>cust_mysql_filters.properties</i> and Maven hasn&rsquo;t applied properties from <i>mysql_filters.properties </i>file<i>?</i></b>
<br />
<br />So, as you can see we have several ways for managing/filtering properties with Maven. And, it&rsquo;s very convenient.
<br />
<br />You can checkout code snippets from <a href="https://github.com/halyph/blog-sandbox/tree/master/Maven/blogpost_061112">github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Steps in Maven]]></title>
    <link href="http://halyph.com/blog/2012/06/11/first-steps-in-maven/"/>
    <updated>2012-06-11T10:53:00+03:00</updated>
    <id>http://halyph.com/blog/2012/06/11/first-steps-in-maven</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;m going to collect the most important resources which helps quickly use Maven in the &ldquo;right&rdquo; way.
<br /></p>

<div class="separator" style="clear: both; text-align: center;">
    <a href="http://3.bp.blogspot.com/-HLT4LRIKJRk/T9WeuyWcXaI/AAAAAAAAAlE/UFjf4e6w1nA/s1600/maven-logo.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-HLT4LRIKJRk/T9WeuyWcXaI/AAAAAAAAAlE/UFjf4e6w1nA/s1600/maven-logo.png" /></a>
</div>


<h3>Intro Tutorials</h3>


<ol>
    <li><a href="http://javabrains.koushik.org/p/maven.html">Java Brains: Maven</a> - 10 video tutorials cover very basic Maven use cases.&nbsp; </li>
    <li><span><a href="http://www.sonatype.com/index.php/Support/Books/Maven-By-Example">Maven By Example </a>- free e-book which step-by-step how the Maven &#8220;world.&#8221; I&#8217;ve notices that off-line PDF book is a little bit outdated (i.e. some </span><span>POM </span><span>samples)</span></li>
    <li><a href="http://maven.apache.org/guides/getting-started/index.html">Maven Getting Started Guide</a> - guide from Apache Maven Project</li>
</ol>


<p><span>I must say that item 1 is optional, but item 2 is mandatory for newcomers. </span>
<br /><span></span>
<br /></p>

<h3><span>Tutorial, How-tos and FAQs</span></h3>


<ol>
    <li><a href="http://www.mkyong.com/tutorials/maven-tutorials/"><span>Mkyong.com </span>Maven Tutorial</a> - short and descriptive Q&amp;A tutorials.</li>
    <li><a href="http://www.avajava.com/tutorials/categories/maven">AVAJAVA - Maven Tutorials</a> - very huge collection of how-to&#8217;s and Q&amp;A, there are about 80+ articles.&nbsp; </li>
</ol>


<h4>Cheat Sheets</h4>


<ol>
    <li><a href="http://refcardz.dzone.com/refcardz/apache-maven-2%20">Dzone Maven 2</a> </li>
    <li><a href="http://cheat.errtheblog.com/s/maven/">http://cheat.errtheblog.com/s/maven/</a></li>
    <li><a href="http://blog.cliffano.com/2006/07/27/my-maven2-cheat-sheet/">http://blog.cliffano.com/2006/07/27/my-maven2-cheat-sheet/</a> </li>
</ol>


<p><br />
<br />Newcomers should clarify for yourself the next maven items which can potentially boost their productivity in future:
<br /></p>

<ol>
    <li>Maven lifecycles</li>
    <li>Multi-module project </li>
    <li>Resource filtering</li>
    <li>Maven Profiles</li>
</ol>

]]></content>
  </entry>
  
</feed>
