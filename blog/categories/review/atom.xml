<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Review | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-09-28T03:17:06+03:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review: Programming Groovy 2: Dynamic Productivity for the Java Developer]]></title>
    <link href="http://halyph.com/2014/07/review-programming-groovy-2-dynamic.html"/>
    <updated>2014-07-23T01:19:00+03:00</updated>
    <id>http://halyph.com/2014/07/review-programming-groovy-2-dynamic</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/book_programming_groovy2.jpg"></p>

<p>This book is well balanced around Groovy language. I would say there is minimal required knowledge regarding the language. The author (Venkat Subramaniam) fluently covered every important aspect of Groovy. But this book is for experienced developer. The accents were made only in scope of Groovy language and totally avoided any &ldquo;intro&rdquo; programming talks, which is actually cool.</p>

<p>Here is the book&rsquo;s structure:</p>

<ul>
<li><strong>Beginning Groovy</strong> - this part is dedicated to Groovy language features, especially from Java perspective. Reading this part I was building the parallel to Ruby trying to compare these languages. The main difference which I found it&rsquo;s only syntax &ldquo;sugar&rdquo;. I.e. conceptually these two language are very similar.&nbsp;</li>
<li><strong>Using Groovy</strong> - this is a pragmatic part where were highlighted the next topics: Groovy GDK, XML Processing, working with DB, &nbsp;working with Java.</li>
<li><strong>Dynamic features (MOPing Groovy)</strong>&nbsp;- here were highlighted two main metaprogramming approaches: run-time and compile-time metaprogramming. Very interesting part. For me Groovy metaprogramming facilities are much clear comparison to Ruby metaprogramming.</li>
<li><strong>Using Metaprogramming</strong> - it&rsquo;s pragmatic part where were highlighted the applications for Groovy metaprogramming features. It&rsquo;s very important to note that Groovy contains many pre-bundled classes/modules which are really nice samples of metaprogramming Groovy&rsquo;s features.<div>I highly recommend this book to everybody who is interested in Groovy language. This book highlights Groovy dynamic features.</div></li>
</ul>


<a name="References:"></a>
<h2>References:</h2>

<ul>
<li><a href="http://www.amazon.com/Programming-Groovy-Productivity-Developer-Pragmatic/dp/1937785300/">Programming Groovy 2: Dynamic Productivity for the Java Developer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Making Java Groovy]]></title>
    <link href="http://halyph.com/2014/03/review-making-java-groovy.html"/>
    <updated>2014-03-17T23:27:00+02:00</updated>
    <id>http://halyph.com/2014/03/review-making-java-groovy</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/book_making_java_groovy.jpg"></p>

<p>I can say that this book is special. It’s not a Groovy “cookbook”.
You won’t find tons of tricky recipes around Groovy. You won’t learn
black art of Groovy meta programming. Strange, doesn’t it. :-) Then why
you should read it. Or who should read this book?</p>

<p>The answer is very simple - Every Java programmer who wants to be productive in daily work must read this book. The author <a href="http://www.amazon.com/Ken-Kousen/e/B003NUYREE/ref=ntt_athr_dp_pel_1">Ken Kousen</a> did really great job showing different aspects of Groovy as a language, tool and ecosystem. The reader will understand that there are tons of different appliances of Groovy:</p>

<ul>
<li>Groovy scripting (@Grab)</li>
<li>Gradle, Maven/Ant automation</li>
<li>Groovy as prototyping language: REST, DB, etc.</li>
<li>Web micro-frameworks</li>
<li>Testing: Spock, mocks</li>
<li>Java/Groovy integration</li>
<li>JSON/XML manipulation</li>
</ul>


<p>The most important thing is to understand that Groovy should <strong>NOT</strong> be
used only with Grails. Java programmers must re-discover Groovy as super
pragmatic language. Everything which is written in Java can be written
in Groovy. Save your time and automate with Groovy.</p>

<a name="References:"></a>
<h2>References:</h2>

<ul>
<li> <a href="http://www.manning.com/kousen/">Making Java Groovy, by Ken Kousen</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Deploying With JRuby]]></title>
    <link href="http://halyph.com/blog/2013/02/02/review-deploying-with-jruby/"/>
    <updated>2013-02-02T21:00:00+02:00</updated>
    <id>http://halyph.com/blog/2013/02/02/review-deploying-with-jruby</id>
    <content type="html"><![CDATA[<div style="text-align: center;"><a href="http://www.amazon.com/gp/product/1934356972/ref=as_li_ss_il?ie=UTF8&amp;tag=knowisever-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356972"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=1934356972&amp;MarketPlace=US&amp;ID=AsinImage&amp;WS=1&amp;tag=knowisever-20&amp;ServiceVersion=20070822" /></a></div>


<p>This books is unique, because the author (Joe Kutner) did really great work collecting several JRuby on Rails deploying approaches in one book. It&rsquo;s very convenience if you need some sort of review in scope of this subject.<br /><br />I believe that any Rails developer which think that Java/JVM is enemy camp should read it. The tools which are highlighted in this book are very interesting and provide for Ruby/Rails developers broader space.<br /><br />As for Java developers it&rsquo;s a good start point for integration Rails in corporate Java environment. The reader get all required info to get started.<br /><br />Here is a list of tools:<br /><ul><li>Warbler (<a href="https://github.com/jruby/warbler"><a href="https://github.com/jruby/warbler">https://github.com/jruby/warbler</a></a>) - Warbler provides a minimal, flexible, Ruby-like way to bundle up all of your application files for deployment to a Java environment</li><li>Trinidad (<a href="https://github.com/trinidad/trinidad"><a href="https://github.com/trinidad/trinidad">https://github.com/trinidad/trinidad</a></a>) - Trinidad allows you to run Rails or Rack applications within an embedded  Apache Tomcat container. </li><li>Kirk (<a href="https://github.com/strobecorp/kirk"><a href="https://github.com/strobecorp/kirk">https://github.com/strobecorp/kirk</a></a>) - Kirk is a wrapper around Jetty that hides all of the insanity and wraps your Rack application in a loving embrace</li><li>Torquebox (<a href="http://torquebox.org/"><a href="http://torquebox.org">http://torquebox.org</a></a>) - TorqueBox is a new kind of <a href="http://www.ruby-lang.org/en/">Ruby</a> application                   platform that supports popular                   technologies such as <a href="http://rubyonrails.org/">Ruby on Rails</a> and                   <a href="http://www.sinatrarb.com/">Sinatra</a>, while extending                   the footprint of Ruby                   applications to include built-in support for services such as messaging,                   scheduling, caching, and daemons.</li><li>jetpack (<a href="https://github.com/square/jetpack"><a href="https://github.com/square/jetpack">https://github.com/square/jetpack</a></a>), it wasn&rsquo;t mentioned in book. It packages your JRuby webapp for Jetty.</li></ul>I must admit that the most impressive is Torquebox. It&rsquo;s very powerful and it uses all power of JBoss App Server:<br /><blockquote class="tr_bq">TorqueBox provides an all-in-one environment, built upon the latest                   <a href="http://www.jboss.org/jbossas/">JBoss AS</a> Java application server and                   <a href="http://jruby.org/">JRuby</a>.&nbsp; </blockquote>Such features as messaging, long running jobs, scheduled jobs are provided out of the box, have nice API which easy to use. Have a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Java Brains Spring Framework - Core Spring, by Koushik Kothagal]]></title>
    <link href="http://halyph.com/blog/2012/05/02/review-java-brains-spring-framework/"/>
    <updated>2012-05-02T18:35:00+03:00</updated>
    <id>http://halyph.com/blog/2012/05/02/review-java-brains-spring-framework</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Ik0LB2qKp0g/T5_x_1IbcCI/AAAAAAAAAj8/oAoF2cJighQ/s1600/placeholder_video_spring_projects.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-Ik0LB2qKp0g/T5_x_1IbcCI/AAAAAAAAAj8/oAoF2cJighQ/s1600/placeholder_video_spring_projects.png" /></a></div>


<p>I&rsquo;ve recently watched the subject <a href="http://javabrains.koushik.org/p/spring-framework.html" target="_blank">Java Brains - Spring Framework</a> video tutorials and I must admit that these screencasts were well done. One of the best Java related video tutorials I&rsquo;ve ever seen. Whether you are experienced or beginner developer it worth to watch them all. It&rsquo;s very good sample how to produce qualitative and pleasure to watch screencasts.<br /><br />Let&rsquo;s review each tutorial one-by-one just to have some snapshot what was described there:<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-01-understanding.html"><b>01 - Understanding Dependency Injection</b></a> Dependency Injection (DI) introduction. Here was explained why do we need DI and some conceptual sample.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-02-setting-up.html"><b>02 - Setting Up</b></a> Project Setup. The author avoided using any build tools (Ant, Maven) and set up Eclipse-based project via using Eclipse User Library.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-03-understanding-spring.html"><b>03 - Understanding Spring Bean Factory</b></a> Explained the differences between Factory pattern and Spring Bean Factory without any technical details, plain conceptual overview.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-04-writing-code-using.html"><b>04 - Writing Code Using the Bean Factory</b></a> Actually it&rsquo;s the first video with some <b>code inside</b>. Author use classical approach to introduce Spring DI in practice - wrote simple code without Spring and re-wrote it with Spring. And it has nice effect - it became very descriptive.<br />The next Spring-related things were introduced:<br /><ul><li><i>spring.xml</i></li><li><i>BeanFactory</i></li><li><i>XmlBeanFactory</i> and <i>FileSystemResources</i></li><li>bean instantiation via factory</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-05-applicationcontext.html"><b>05 - ApplicationContext and Property Initialization</b></a> Replaced <i>BeanFactory </i>with <i>ApplicationContext</i>. How to initialize bean property via spring.xml has been shown.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-06-using-constructor.html"><b>06 - Using Constructor Injection</b></a> Depicted different ways of constructor injection:<br /><ul><li>plain</li><li>index based</li><li>type based</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-07-injecting-objects.html"><b>07 - Injecting Objects</b></a> Created simple object and shown how to inject object dependency (i.e. was used&nbsp; &ldquo;property&rdquo; tag and &ldquo;ref&rdquo; attribute, <i>&lt;property name=&ldquo;propname&rdquo; ref=&ldquo;beanref&rdquo; /&gt;</i><br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-08-inner-beans-aliases.html"><b>08 - Inner Beans, Aliases and idref</b></a> The topic has pretty descriptive content, nothing more was here.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-09-initializing.html"><b>09 - Initializing Collections</b></a> Here List was used as sample to initialize bean with collection. Stated that the same approach should be applied to Set and Map.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-10-bean-autowiring.html"><b>10 - Bean Autowiring</b></a> Configured autowiring via spring.xml. Described pros&amp;cons:<br /><ul><li>byName</li><li>byType</li><li>constructor</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-11-understanding-bean.html"><b>11 - Understanding Bean Scopes</b></a> Explained bean scopes:<br /><ul><li>Singleton</li><li>Prototype</li><li>Request</li><li>Session</li><li>Global Session</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-12-using.html"><b>12 - Using ApplicationContextAware</b></a> Nicely shown how to use <i>ApplicationAwareContext </i>and BeanNameAware interfaces.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-13-bean-definition.html"><b>13 - Bean Definition Inheritance</b></a> Nice Spring feature is bean definition inheritance and how it is different from OOP inheritance. Explained when to use it and what is the benefits. Introduced bean <i>abstract </i>and&nbsp; <i>parent</i> attributes and when to use it.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-14-lifecycle-callbacks.html"><b>14 - Lifecycle Callbacks</b></a> Introduced <i>init </i>and <i>destroy </i>methods in different incarnations:<br /><ul><li>InitializingBean and DisposableBean interfaces</li><li>bean tag attributes: <i>init-method</i> and <i>destroy-method</i> </li><li>bean<i><b>s</b></i> tag attributes: <i>default-init-method</i> and <i>default-</i><i>destroy-method</i></li><li>Added<i> AbstractApplicationCantext </i>to switch on <i>redisterShutdownHook</i>()</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-15-writing.html"><b>15 - Writing a BeanPostProcessor</b></a> Shown how to implement custom <i>BeanPostProcessor</i><br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-16-writing.html"><b>16 - Writing a BeanFactoryPostProcessor</b></a> Shown how to implement:<br /><ul><li>custom <i>BeanFactoryPostProcessor</i></li><li>introduces properties for spring.xml via adding <i>PropertyPlaceholderConfigurer</i> (implementation of <i>BeanFactoryPostProcessor</i>)</li></ul>Explained when and why to use <i>BeanFactoryPostProcessor</i>s. Explained the differences between <i>BeanFactoryPostProcessor</i>s and <i>BeanPostProcessor.</i><br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-17-coding-to-interfaces.html"><b>17 - Coding To Interfaces</b></a> Rewritten the initial demo project to support interface based design, the right way for developing Spring applications :-) <br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-18-introduction-to.html"><b>18 - Introduction to Annotations and the Required Annotation</b></a> Added @Required annotation in demo project and activated it via adding bean post processor <i>RequiredAnnotationBeanPostProcessor</i>.<br /><br />  <a href="http://javabrains.koushik.org/2011/08/spring-tutorial-19-autowired-annotation.html"><b>19 - The Autowired Annotation</b></a> Shown how to use:<br /><ul><li><i>@Autowire</i> and <i>@Qualifier</i> annotations</li><li><i>&lt;context:annotation-config /&gt;</i> in<i> spring.xml</i></li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-20-some-jsr-250.html"><b>20 - Some JSR-250 Annotations</b></a> Shown how to use:<br /><ul><li><i>@Resource</i> annotation</li><li><i>@Resource</i> annotation with parameters</li><li><i>@PostConstruct </i>annotation</li><li><i>@PreDestroy </i>annotation</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-21-component-and.html"><b>21 - Component and Stereotype Annotations</b></a> Added the <i>&lt;context:component-scan base-packaeg=&ldquo;package&rdquo; /&gt;</i> to spring.xml. Shown how to use <i>@Component</i> annotation and what rules applied to this annotation. Also, were mentioned other Spring stereotypes.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-22-using-messagesource.html"><b>22 - Using MessageSource To Get Text From Property Files</b></a> Shown how to use <i>ResourceBundleMessageSource</i> to get properties. <br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-23-event-handling-in.html"><b>23 - Event Handling in Spring</b></a> Very nice introduction tutorial into the subject: even definition, event listeners and even publishing on application level.<br /><br />Ofcource, these tutorial are only intro and you should read Spring Documentation to gain the Spring &ldquo;black&rdquo; magic. But, it&rsquo;s good start point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Getting Good With Git by Andrew Burgess]]></title>
    <link href="http://halyph.com/blog/2012/04/24/review-getting-good-with-git-by-andrew/"/>
    <updated>2012-04-24T20:15:00+03:00</updated>
    <id>http://halyph.com/blog/2012/04/24/review-getting-good-with-git-by-andrew</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"></div>


<p><br /><a href="http://2.bp.blogspot.com/-kFLV4Wc3Kl8/T5bX54e2wgI/AAAAAAAAAjE/o5eeyr60NH8/s1600/L_GettingGoodwithGit.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"></a>There are several books about Git. I&rsquo;ve decided to review them all and started with &ldquo;Getting Good with Git&rdquo; by Andrew Burgess<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://rockablepress.com/books/getting-good-with-git" style="margin-left: 1em; margin-right: 1em;" target="_blank"><img border="0" height="302" src="http://2.bp.blogspot.com/-kFLV4Wc3Kl8/T5bX54e2wgI/AAAAAAAAAjE/o5eeyr60NH8/s320/L_GettingGoodwithGit.png" width="202" /> </a></div>First of all it&rsquo;s beginner level book. I wouldn&rsquo;t recommend it to anyone experienced developer. Even more it&rsquo;s more like tutorial and not a book.<br />So, based on previous statements the next chapters can be easily cut off:<br /><ul><li>Introduction to Git</li><li>Commands</li><li>GitHub</li></ul>&nbsp;IMHO, I would left the next two chapters:<br /><ul><li>Configuration</li><li>Beyond the Basics</li></ul>And more important is the price of this book: <span class="price"><b>$19</b>. Guys, come on </span><b class="price">$19 </b><span class="price">for this. It doesn&rsquo;t cost this money. </span><br /><b class="price"><br /></b><span class="price">Summary: don&rsquo;t spend your time and money on this book.</span><b class="price"><br /></b></p>
]]></content>
  </entry>
  
</feed>
