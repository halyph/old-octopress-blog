<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-11-25T00:47:33+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Distribute Application as Native Single Binary]]></title>
    <link href="http://halyph.com/blog/2015/09/25/programming-languages-to-native-code/"/>
    <updated>2015-09-25T01:51:25+03:00</updated>
    <id>http://halyph.com/blog/2015/09/25/programming-languages-to-native-code</id>
    <content type="html"><![CDATA[<div align="center"><span style="align: center; font-size: 64pt">~</span></div>


<p>Some time ago I had a pleasure to implement Ruby-based tool which theoretically must be easy to install and have no or limited dependencies.
I&rsquo;ve picked <code>JRuby</code> and packed/distribute the application as a <code>jar</code>. I.e. JRE was the single dependency I had. In general it was very nice distribution model despite the fact that non-Java users must install JRE (Java SE Runtime Environment) to run the application.</p>

<p>All other approaches like Ruby, Python, Perl, etc. were not acceptable as they requires additional user&rsquo;s efforts for tool installation and/or package distribution.</p>

<p>The idea was/is to have single native binary for all major platforms which requires no dependencies. Simply copy and run.</p>

<p>Now, the question: did I have other alternatives to implement this tool? Could it be implemented as native static binary? - Answer - YES. But, at that time there were only two mature solutions (acceptable for me): C and C++. And neither of them were very good for tool implementation and prototyping at the same time. Also, as far as I know, it&rsquo;s not a simple task to implement really cross-platform app, at least for Windows/Linux/OSX in C/C++. It adds additional maintenance efforts which I tried to avoid.</p>

<p>Looking now at this task I can say that this king of application is nice to implement in <a href="https://golang.org">Go</a>. Go has everything I need for really cross-platform application development and single static binary output which is awesome for tools/utilities writers.</p>

<p>I decided to look around and understand which other popular languages support compilation/packaging to native (semi-)single static binary. The term <em>&ldquo;semi-single&rdquo;</em> static binary will be explained later.</p>

<a name="Compilers"></a>
<h2>Compilers</h2>

<p>Quick googling give us the next languages:</p>

<ul>
<li><a href="https://www.rust-lang.org">Rust</a></li>
<li><a href="https://www.haskell.org">Haskell</a></li>
<li><a href="https://ocaml.org/">OCaml</a></li>
<li><a href="http://www.cliki.net/creating%20executables">Lisp</a>

<ul>
<li><a href="http://www.sbcl.org/">SBCL</a></li>
<li><a href="http://ccl.clozure.com/">Clozure CL</a></li>
</ul>
</li>
<li><a href="http://dlang.org/">D</a></li>
</ul>


<p><strong>Haskell</strong>, <strong>OCaml</strong> and <strong>Lisp</strong> are not widely used. And these langs should be picked carefully due to language specific learning curve.</p>

<p><strong>D</strong> language is not young and has small community. But it&rsquo;s much simpler and clean compared to C++, IMHO.</p>

<p><strong>Rust</strong> is the new hype along with <strong>Go</strong>. I guess it will be good alternative to C/C++. Also, the language is much more powerful compared to <strong>Go</strong>, it might be additional selling point.</p>

<a name="Dynamic.Languages"></a>
<h2>Dynamic Languages</h2>

<p>There is no direct compilation from interpret/dynamic language to native static binary. But, it&rsquo;s possible to pack application with language runtime into &ldquo;archive&rdquo;/executable to behave like static native binary.</p>

<ul>
<li>Python <a href="http://docs.python-guide.org/en/latest/shipping/freezing/">freezing</a> (To <em>&ldquo;Freeze&rdquo;</em> your code is to distribute to end-users as an executable which includes a bundled Python interpreter)

<ul>
<li><a href="https://pypi.python.org/pypi/bbfreeze">bbFreeze</a></li>
<li><a href="http://www.py2exe.org">py2exe</a></li>
<li><a href="http://www.pyinstaller.org">pyInstaller</a></li>
<li><a href="http://cx-freeze.sourceforge.net">cx_Freeze</a></li>
<li><a href="https://pythonhosted.org/py2app/">py2app</a></li>
</ul>
</li>
<li>Perl

<ul>
<li><a href="http://search.cpan.org/~rschupp/PAR-Packer-1.026/lib/pp.pm">PAR Packager</a></li>
<li><a href="http://www.indigostar.com/perl2exe.php">Perl2Exe</a></li>
</ul>
</li>
<li>Node.js, Here is <a href="https://github.com/nwjs/nw.js/wiki/how-to-package-and-distribute-your-apps">sample approaches</a></li>
<li>Ruby:

<ul>
<li><a href="http://www.erikveen.dds.nl/rubyscript2exe/">RubyScript2Exe</a></li>
<li><a href="http://ocra.rubyforge.org/">OCRA</a></li>
</ul>
</li>
</ul>


<p>Based on the list above, <strong>Python</strong> has many alternatives to accomplish single distribution artifact task. I.e. it&rsquo;s better to pick Python than other alternatives. Also, it looks like <strong>Ruby</strong> has limited and poor choices, i.e. it&rsquo;s not suitable for this kind of task.</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>IMHO, <strong>Go</strong> has the most appealing tool chain for accomplish this task.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Architecture and Scalability]]></title>
    <link href="http://halyph.com/blog/2015/04/04/rails-architecture-and-scalability-issues/"/>
    <updated>2015-04-04T19:17:12+03:00</updated>
    <id>http://halyph.com/blog/2015/04/04/rails-architecture-and-scalability-issues</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/blog/ruby.png"></p>

<p><ul>
 <li>
 <ul>
  <li><a href="#Rails.deployment.architecture">Rails deployment architecture</a>
  <ul>
   <li><a href="#Simple.Rails.Setup">Simple Rails Setup</a></li>
   <li><a href="#Typical.Rails.Setup">Typical Rails Setup</a></li>
   <li><a href="#Application.server..Phusion.Passenger.">Application server (Phusion Passenger)</a></li>
  </ul>
  </li>
  <li><a href="#Recommended.Rails.Application.Setups">Recommended Rails Application Setups</a>
  <ul>
   <li><a href="#Small.Site">Small Site</a></li>
   <li><a href="#Medium.Site">Medium Site</a></li>
   <li><a href="#Large.Site">Large Site</a></li>
  </ul>
  </li>
  <li><a href="#Scale.up.Traditional.Rails.Application">Scale up Traditional Rails Application</a>
  <ul>
   <li><a href="#Caching">Caching</a></li>
   <li><a href="#Long-runnint.task.scaling">Long-runnint task scaling</a></li>
  </ul>
  </li>
  <li><a href="#Rails.moving.towards.SOA.and.micro.services">Rails moving towards SOA and micro services</a>
  <ul>
   <li><a href="#Splitting.application.into.small.pieces">Splitting application into small pieces</a></li>
   <li><a href="#Reference..sample..service.orienter...micro.service.architecture">Reference (sample) service orienter / micro service architecture</a>
   <ul>
    <li><a href="#Groupon">Groupon</a></li>
    <li><a href="#Flipcart">Flipcart</a></li>
    <li><a href="#Gilt">Gilt</a>
</li>
   </ul>
   </li>
  </ul>
  </li>
  <li><a href="#Conclusion">Conclusion</a></li>
  <li><a href="#Rails.related.tech.components">Rails related tech components</a>
  <ul>
   <li><a href="#Web.Servers...Proxy">Web Servers / Proxy</a></li>
   <li><a href="#Application.Servers">Application Servers</a></li>
   <li><a href="#Libraries...Tools">Libraries / Tools</a></li>
  </ul>
  </li>
  <li><a href="#References">References</a></li>
 </ul>
 </li>
</ul>

</p>

<p>Everybody know when this <em>&ldquo;Rails doesn&rsquo;t scale&rdquo;</em> has been begun:</p>

<ul>
<li><strong>2009</strong> <a href="http://www.artima.com/scalazine/articles/twitter_on_scala.html">Twitter message queue back-end moved from Ruby to Scala</a></li>
<li><strong>2011</strong> <a href="https://blog.twitter.com/2011/twitter-search-now-3x-faster">Twitter Search is Now 3x Faster</a></li>
</ul>


<blockquote><p>Panic, we must not use <strong>Ruby on Rails</strong> because Twitter had scalability problems.</p></blockquote>

<p>I&rsquo;m a Java developer who love Ruby language, but don&rsquo;t write anything in Rails. Despite this I&rsquo;ve decided to look into this famous <em>&ldquo;Rails doesn&rsquo;t scale&rdquo;</em> statement deeper to understand the root cause of this problem.</p>

<p>So, I <a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">collected</a> public available Ruby on Rails architecture and scalability case studies (videos of conference talks, reports and blog posts) and tried to extract the general patterns of architecture and scalability issues.</p>

<p>There are two type of scalability issues:</p>

<ol>
<li><strong>Application performance</strong> - when web application can&rsquo;t handle huge traffic</li>
<li><strong>Delivery velocity</strong> - when it&rsquo;s become hard to make changes in big Rails application, run quick tests, deploy it and manage big team</li>
</ol>


<p><em>Note</em>: You are not another &ldquo;twitter&rdquo; to worry about scalability issues right from beginning of the project (there are fewer web apps on the Internet to get enough traffic to even care about scalability). Your goal is to push your product as quick as possible.
But, in the same time you&rsquo;d like to use Rails (due to it&rsquo;s productivity) and make you potentially application scalable (in all possible terms)</p>

<p>The most interesting that scalability is about architecture, databases, caching, event queues, disk IO and less about Rails framework.</p>

<a name="Rails.deployment.architecture"></a>
<h2>Rails deployment architecture</h2>

<p>Let&rsquo;s review the common Rails deployment approaches (see <a href="http://www.slideshare.net/jweiss/deployment-with-ruby-on-rails">Deployment with Ruby on Rails</a>)</p>

<a name="Simple.Rails.Setup"></a>
<h3>Simple Rails Setup</h3>

<p>One Rails instance handles all requests. Rails is single-threaded: There is only one concurrent request.</p>

<p><img src="/images/posts/2015-04-04/pic1.jpg"></p>

<a name="Typical.Rails.Setup"></a>
<h3>Typical Rails Setup</h3>

<ul>
<li>A load-balancer distributes the incoming requests</li>
<li>Some load-balancers will deliver static requests themselves</li>
<li>Several Rails instances handle all requests</li>
<li>Number of concurrent requests equals number of Rails instances</li>
</ul>


<p><img src="/images/posts/2015-04-04/pic2.jpg"></p>

<a name="Application.server..Phusion.Passenger."></a>
<h3>Application server (Phusion Passenger)</h3>

<ul>
<li>Involving Phusion Passenger application server</li>
<li>Makes setup easier on the single machine level</li>
<li>Multiple servers still require load balancer</li>
<li>Suitable for mass-hosting</li>
<li>upcoming standard way of deploying Rails</li>
</ul>


<p><img src="/images/posts/2015-04-04/pic3.jpg"></p>

<a name="Recommended.Rails.Application.Setups"></a>
<h2>Recommended Rails Application Setups</h2>

<a name="Small.Site"></a>
<h3>Small Site</h3>

<p>Apache with mod_rails/Phusion Passenger</p>

<p><img src="/images/posts/2015-04-04/pic4.jpg"></p>

<a name="Medium.Site"></a>
<h3>Medium Site</h3>

<ul>
<li>Apache/Nginx as frontend proxy</li>
<li>Passanger as backend</li>
<li>Deliver static files with Apache/Nginx</li>
</ul>


<p><img src="/images/posts/2015-04-04/pic5.jpg"></p>

<a name="Large.Site"></a>
<h3>Large Site</h3>

<ul>
<li>Redundant load-ballancer</li>
<li>Redundant proxy</li>
<li>Phusion Passenger/mod_rails</li>
</ul>


<p><img src="/images/posts/2015-04-04/pic6.jpg"></p>

<a name="Scale.up.Traditional.Rails.Application"></a>
<h2>Scale up Traditional Rails Application</h2>

<a name="Caching"></a>
<h3>Caching</h3>

<p>There might be the cases when it&rsquo;s not enought and in this case we should start looking in &ldquo;cashing&rdquo; direction via involving Memcahed and/or Redis <em>(based on Konstantin’s Gredeskoul slides)</em></p>

<p><img src="/images/posts/2015-04-04/pic7.jpg"></p>

<a name="Long-runnint.task.scaling"></a>
<h3>Long-runnint task scaling</h3>

<p><em>(based on Konstantin’s Gredeskoul slides)</em></p>

<ul>
<li>Background jobs with Reques (it sits on top of Redis)</li>
<li>Use Solr/Elasticsearch instead of doing complex joins</li>
</ul>


<p><img src="/images/posts/2015-04-04/pic8.jpg"></p>

<a name="Rails.moving.towards.SOA.and.micro.services"></a>
<h2>Rails moving towards SOA and micro services</h2>

<p>The shown above architectures are related to <strong>Monolith Architecture</strong>. This type of architecture has some problems:</p>

<ul>
<li>Development pain points:</li>
<li>effective controllers and models have a lot of logic

<ul>
<li>~1000 Models/Controllers, 200K LOC, 100s of jobs</li>
</ul>
</li>
<li>Merge issues arise in big team (20-30+)</li>
<li>Lots of contributors and no ownership</li>
<li>Difficult deployments with long integration cycles</li>
<li>Tests are not green, it&rsquo;s really hard to support stable test quality</li>
</ul>


<p>The monolithic Rails app should evolve into ecosystems of connected services. It&rsquo;s becoming quite common for Rails apps to be working mainly as <a href="https://github.com/halyph/architecture-case-study/blob/master/rails-as-an-soa-client-by-pete-hodgson.md">clients</a> to other services.</p>

<a name="Splitting.application.into.small.pieces"></a>
<h3>Splitting application into small pieces</h3>

<ul>
<li>Split into smaller applications (based on Konstantin&rsquo;s Gredeskoul <a href="http://www.slideshare.net/kigster/enterprise-architectures-with-ruby-and-rails">slides</a>)

<ul>
<li>Contains web UI, logic and data

<ul>
<li>Extract look and feel into gem to share across apps</li>
</ul>
</li>
<li>May combine with other apps</li>
<li>May rely on common libraries</li>
<li>Typically run in their own Ruby VM</li>
</ul>
</li>
<li>Extract services and create APIs

<ul>
<li>Create client API wrapper gems for consumers</li>
</ul>
</li>
<li>Extract libraries (gems)

<ul>
<li>Create shared based client gem library</li>
</ul>
</li>
</ul>


<p><img src="/images/posts/2015-04-04/pic9.jpg"></p>

<a name="Reference..sample..service.orienter...micro.service.architecture"></a>
<h3>Reference (sample) service orienter / micro service architecture</h3>

<p>Now, we have more than one Rails application and many service which are communicating using messaging, distributed cashed, etc.</p>

<a name="Groupon"></a>
<h4><a href="https://github.com/halyph/architecture-case-study/blob/master/groupon.md">Groupon</a></h4>

<p><img src="/images/posts/2015-04-04/pic10.png"></p>

<a name="Flipcart"></a>
<h4><a href="https://github.com/halyph/architecture-case-study/blob/master/flipcart.md">Flipcart</a></h4>

<p><img src="/images/posts/2015-04-04/pic11.jpg"></p>

<a name="Gilt"></a>
<h4><a href="https://github.com/halyph/architecture-case-study/blob/master/gilt.md">Gilt</a></h4>

<p><img src="/images/posts/2015-04-04/pic12.jpg"></p>

<p>I&rsquo;ve collect much more case studies, see <a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">here</a>.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Moving Monolith Rails application to micro service architecture it&rsquo;s not one shot action. It&rsquo;s long run with lots of trade offs. And more over, micro service architecture is not silver bullet, it&rsquo;s just one alternative way to scale your application (see [Recommended Rails Application Setups][#Recommended.Rails.Application.Setups]).</p>

<p>The key idea is to develop your application with <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP (Single responsibility principle)</a> in mind. The more modular your application the more scalable it&rsquo;s.</p>

<p>I&rsquo;m planning to add more architecture case studies to my <a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">collection</a> (not only Rails related). Stay tuned.</p>

<a name="Rails.related.tech.components"></a>
<h2>Rails related tech components</h2>

<p>Collection of major technology components mentioned in case studies.</p>

<a name="Web.Servers...Proxy"></a>
<h3>Web Servers / Proxy</h3>

<ul>
<li><a href="http://httpd.apache.org/">Apache</a></li>
<li><a href="http://nginx.org/">Nginx</a></li>
<li><a href="http://www.haproxy.org/">HAProxy</a></li>
</ul>


<a name="Application.Servers"></a>
<h3>Application Servers</h3>

<ul>
<li><a href="http://unicorn.bogomips.org/">Unicorn</a></li>
<li><a href="https://www.phusionpassenger.com">Phusion Passenger</a></li>
<li><a href="http://puma.io/">Puma</a></li>
<li><a href="http://code.macournoyer.com/thin/">Thin</a></li>
</ul>


<a name="Libraries...Tools"></a>
<h3>Libraries / Tools</h3>

<ul>
<li><a href="http://redis.io/">Redis</a></li>
<li><a href="http://memcached.org/">Memcached</a></li>
<li><a href="https://github.com/resque/resque">Reque</a></li>
<li><a href="http://sidekiq.org/">Sidekiq</a></li>
<li><a href="http://lucene.apache.org/solr/">Solr</a></li>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">Collection of Ruby on Rails Architecture Case Studies</a>

<ul>
<li><a href="http://www.slideshare.net/jweiss/deployment-with-ruby-on-rails">Deployment with Ruby on Rails</a></li>
<li><a href="http://www.slideshare.net/kigster/enterprise-architectures-with-ruby-and-rails">Enterprise Architectures with Ruby (and Rails)</a></li>
</ul>
</li>
<li><a href="http://www.quora.com/Does-Ruby-on-Rails-scale">Does Ruby on Rails scale</a> - Quora</li>
<li>&ldquo;Keeping Your Massive Rails App From Turning Into a S#!t Show with Benjamin Smith&rdquo; (see <a href="https://vimeo.com/76094344">video</a> and <a href="https://speakerdeck.com/benjaminleesmith/keeping-your-massive-rails-app-from-turning-into-a-s-number-t-show-windycityrails-2013">slides</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Octopress on Windows?]]></title>
    <link href="http://halyph.com/blog/2015/02/17/how-to-install-octopress-on-windows/"/>
    <updated>2015-02-17T18:53:27+02:00</updated>
    <id>http://halyph.com/blog/2015/02/17/how-to-install-octopress-on-windows</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/ruby.png"></p>

<p>I&rsquo;ve been using <a href="http://octopress.org/">Octopress</a> on Mac OS X (i.e. have no problem). But, recently I&rsquo;ve decided to run my blog on Windows machine and felt pain. Ahh, <a href="http://octopress.org/">Octopress</a> uses bunch of native extentions which actually cause a lot of cross-platform issues. My first attempt was to try <a href="http://jruby.org/">JRuby</a> due to his better Windows support, but got this:</p>

<pre><code>$ bundle install
Fetching gem metadata from https://rubygems.org/.........
Installing rake (10.4.2)
Installing RedCloth (4.2.9)
Using blankslate (2.1.2.4)
Installing hitimes (1.2.2)
Installing timers (4.0.1)
Installing celluloid (0.16.0)
Installing chunky_png (1.3.3)
Installing fast-stemmer (1.0.2) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension
.
        D:/Tools/JRuby/jruby-1.7.0/bin/jruby.exe extconf.rb NotImplementedError: C extension support is not enabled. Pass -Xcext.enabled=true to JRuby or set JRUBY_OPTS or modify .jrubyrc to enable.

   (root) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/mkmf.rb:8  require at org/jruby/RubyKernel.java:1019
   (root) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/rubygems/custom_require.rb:1
   (root) at extconf.rb:1


Gem files will remain installed in D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2 for inspection.
Results logged to D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2/ext/gem_make.out
An error occurred while installing fast-stemmer (1.0.2), and Bundler cannot continue.
Make sure that `gem install fast-stemmer -v '1.0.2'` succeeds before bundling.
</code></pre>

<p>There is JRuby version of <code>fast-stemmer</code> gem called <a href="https://github.com/caius/jruby-stemmer"><code>jruby-stemmer</code></a>. But, I&rsquo;m not ready to maitain this. That&rsquo;s why I&rsquo;ve decided to use <a href="http://rubyinstaller.org/">RubyInstaller</a>.</p>

<a name="Install.Ruby.on.Windows.and.SSL.issues"></a>
<h2>Install Ruby on Windows and SSL issues</h2>

<ol>
<li><p>Download (<code>rubyinstaller-2.1.5-x64.exe</code> in my case) and install <a href="http://rubyinstaller.org/">RubyInstaller</a>. I installed in <code>d:\Tools\Ruby\Ruby21-x64\</code> folder.</p></li>
<li><p>Check <code>rubygems</code> via running <code>gem update</code> and you should get the next error:
<code>
$ gem update
Updating installed gems
ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)
 SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/specs.4.8.gz)
</code></p></li>
</ol>


<p>It&rsquo;s well known <code>rubygems</code> issues with ready to use <a href="https://gist.github.com/luislavena/f064211759ee0f806c88">solution</a>:</p>

<ul>
<li>Step 1: Obtain the new trust certificate, download it <a href="https://raw.githubusercontent.com/rubygems/rubygems/master/lib/rubygems/ssl_certs/AddTrustExternalCARoot-2048.pem">AddTrustExternalCARoot-2048.pem</a> in some temp folder</li>
<li>Step 2: Locate RubyGems certificate directory in your installation (in my case it&rsquo;s <code>D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/</code> )
<code>
$ gem which rubygems
D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/rubygems.rb
</code></li>
<li>Step 3: Copy new trust certificate into <code>D:\Tools\Ruby\Ruby21-x64\lib\ruby\2.1.0\rubygems\ssl_certs</code>
<code>
$ copy AddTrustExternalCARoot-2048.pem D:\Tools\Ruby\Ruby21-x64\lib\ruby\2.1.0\rubygems\ssl_certs
</code></li>
<li>Step 4: Now You should be able to run gem update without any issues</li>
</ul>


<a name="Prepapre.environment.for.Octopress"></a>
<h2>Prepapre environment for Octopress</h2>

<p>Now it&rsquo;s time to clone <a href="http://octopress.org/">Octopress</a> blog and run it. Unfortunatelly, there are some minor issues which still must be fixed.</p>

<a name="Fix..Octopress..native.extentions.issues"></a>
<h3>Fix <a href="http://octopress.org/">Octopress</a> native extentions issues</h3>

<p>We know that <a href="http://octopress.org/">Octopress</a> uses native extentions thats why we have to additionally install <a href="http://cdn.rubyinstaller.org/archives/devkits/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">Development Kit</a></p>

<ul>
<li>Download and unpack it in adjacent to Ruby install folder (<code>d:\Tools\Ruby\DevKit_2.1_x64\</code> in my case)</li>
<li>Link <a href="http://cdn.rubyinstaller.org/archives/devkits/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">Development Kit</a> installation to previously installed Ruby

<ul>
<li>Go to <a href="http://cdn.rubyinstaller.org/archives/devkits/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">Development Kit</a> install folder <code>d:\Tools\Ruby\DevKit_2.1_x64\</code></li>
<li>Run <code>ruby dk.rb init</code> which generate <code>config.yml</code>. Open <code>config.yml</code> and add <code>- D:/Tools/Ruby/Ruby21-x64</code> to the end of this file.</li>
<li>Run <code>ruby dk.rb install</code></li>
</ul>
</li>
</ul>


<p>See my <em>Development Kit</em> <code>config.yml</code>:
&#8220;`</p>

<a name="This.configuration.file.contains.the.absolute.path.locations.of.all"></a>
<h1>This configuration file contains the absolute path locations of all</h1>

<a name="installed.Rubies.to.be.enhanced.to.work.with.the.DevKit..This.config"></a>
<h1>installed Rubies to be enhanced to work with the DevKit. This config</h1>

<a name="file.is.generated.by.the..ruby.dk.rb.init..step.and.may.be.modified"></a>
<h1>file is generated by the &lsquo;ruby dk.rb init&rsquo; step and may be modified</h1>

<a name="before.running.the..ruby.dk.rb.install..step..To.include.any.installed"></a>
<h1>before running the &lsquo;ruby dk.rb install&rsquo; step. To include any installed</h1>

<a name="Rubies.that.were.not.automagically.discovered..simply.add.a.line.below"></a>
<h1>Rubies that were not automagically discovered, simply add a line below</h1>

<a name="the.triple.hyphens.with.the.absolute.path.to.the.Ruby.root.directory."></a>
<h1>the triple hyphens with the absolute path to the Ruby root directory.</h1>

<p>#</p>

<a name="Example:"></a>
<h1>Example:</h1>

<p>#</p>

<a name="L---"></a>
<h1>&mdash;</h1>

<a name="L-.C:.ruby19trunk"></a>
<h1>- C:/ruby19trunk</h1>

<a name="L-.C:.ruby192dev"></a>
<h1>- C:/ruby192dev</h1>

<a name="L."></a>
<h2>#</h2>

<ul>
<li>D:/Tools/Ruby/Ruby21-x64
&#8220;`</li>
</ul>


<a name="Install.Python"></a>
<h3>Install Python</h3>

<p>The default syntax highlighting engine in Octopress/Jekyll is <a href="http://pygments.org/">Pygments</a>. It&rsquo;s requires Python v.2.7.x. Simply download <a href="https://www.python.org/downloads/release/python-278/">Python v.2.7.8</a> and add it on system <code>PATH</code>.</p>

<a name="Final.steps"></a>
<h3>Final steps</h3>

<p>I assume that blog was previously cloned. Now, we should perform &ldquo;traditional&rdquo; Ruby project ceremony:</p>

<ul>
<li>Install <code>budler</code> via <code>gem install bundler</code></li>
<li>Setup all required gems <code>bundle install</code></li>
<li>Run <a href="http://octopress.org/">Octopress</a> preview <code>rake preview</code></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://blog.zerosharp.com/setting-up-octopress-on-windows/">Octopress on Windows and GitHub</a></li>
<li><a href="http://thaiat.github.io/blog/2014/03/13/how-to-install-and-use-octopress-on-windows/">How to Install and Use Octopress on Windows</a></li>
<li><a href="http://octopress.org/">Octopress</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Notes]]></title>
    <link href="http://halyph.com/2014/04/thor-notes.html"/>
    <updated>2014-04-19T12:40:00+03:00</updated>
    <id>http://halyph.com/2014/04/thor-notes</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/ruby.png"></p>

<p>Some time ago I used <a href="http://whatisthor.com/">Thor</a> for one <a href="http://en.wikipedia.org/wiki/Command-line_interface">CLI</a> application. I
investigated several tools, but picked Thor because of its simplicity
and easy to star. In general you would need only the <a href="http://whatisthor.com/">official
documentation</a>. But, I used <a href="http://bundler.io/">Bundler</a> as real sample of Thor
usage also.</p>

<p>Here is the list of articles, notes about Thor which might be helpful:</p>

<ul>
<li><a href="http://whatisthor.com/">Thor Getting Started</a></li>
<li><a href="http://blog.paracode.com/2012/05/17/building-your-tools-with-thor/">Building Your Tools With Thor</a> - Thor overview</li>
<li><a href="https://github.com/erikhuda/thor/wiki">Thor wiki</a></li>
<li><a href="http://stackoverflow.com/questions/9340754/how-do-i-register-a-thorgroup-as-a-subcommand-with-arguments">Thor::Group as a sub-command with arguments</a></li>
<li><a href="http://stackoverflow.com/questions/9339677/how-do-i-create-thorgroup-generators-as-args-of-my-command">Thor::Group generators as args of my_command</a></li>
<li><a href="http://stackoverflow.com/questions/5663519/namespacing-thor-commands-in-a-standalone-ruby-executable">Namespacing Thor commands in a standalone ruby executable</a></li>
<li><a href="http://stackoverflow.com/questions/5729071/how-to-compose-thor-tasks-in-separate-classes-modules-files">Packaging Thor commands in separate classes/modules/files</a></li>
<li><a href="http://stackoverflow.com/questions/6561912/ruby-thor-based-executable-with-namespaces">Ruby Thor based executable with namespaces</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Deploying With JRuby]]></title>
    <link href="http://halyph.com/blog/2013/02/02/review-deploying-with-jruby/"/>
    <updated>2013-02-02T21:00:00+02:00</updated>
    <id>http://halyph.com/blog/2013/02/02/review-deploying-with-jruby</id>
    <content type="html"><![CDATA[<div style="text-align: center;"><a href="http://www.amazon.com/gp/product/1934356972/ref=as_li_ss_il?ie=UTF8&amp;tag=knowisever-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356972"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=1934356972&amp;MarketPlace=US&amp;ID=AsinImage&amp;WS=1&amp;tag=knowisever-20&amp;ServiceVersion=20070822" /></a></div>


<p>This books is unique, because the author (Joe Kutner) did really great work collecting several JRuby on Rails deploying approaches in one book. It&rsquo;s very convenience if you need some sort of review in scope of this subject.<br /><br />I believe that any Rails developer which think that Java/JVM is enemy camp should read it. The tools which are highlighted in this book are very interesting and provide for Ruby/Rails developers broader space.<br /><br />As for Java developers it&rsquo;s a good start point for integration Rails in corporate Java environment. The reader get all required info to get started.<br /><br />Here is a list of tools:<br /><ul><li>Warbler (<a href="https://github.com/jruby/warbler"><a href="https://github.com/jruby/warbler">https://github.com/jruby/warbler</a></a>) - Warbler provides a minimal, flexible, Ruby-like way to bundle up all of your application files for deployment to a Java environment</li><li>Trinidad (<a href="https://github.com/trinidad/trinidad"><a href="https://github.com/trinidad/trinidad">https://github.com/trinidad/trinidad</a></a>) - Trinidad allows you to run Rails or Rack applications within an embedded  Apache Tomcat container. </li><li>Kirk (<a href="https://github.com/strobecorp/kirk"><a href="https://github.com/strobecorp/kirk">https://github.com/strobecorp/kirk</a></a>) - Kirk is a wrapper around Jetty that hides all of the insanity and wraps your Rack application in a loving embrace</li><li>Torquebox (<a href="http://torquebox.org/"><a href="http://torquebox.org">http://torquebox.org</a></a>) - TorqueBox is a new kind of <a href="http://www.ruby-lang.org/en/">Ruby</a> application                   platform that supports popular                   technologies such as <a href="http://rubyonrails.org/">Ruby on Rails</a> and                   <a href="http://www.sinatrarb.com/">Sinatra</a>, while extending                   the footprint of Ruby                   applications to include built-in support for services such as messaging,                   scheduling, caching, and daemons.</li><li>jetpack (<a href="https://github.com/square/jetpack"><a href="https://github.com/square/jetpack">https://github.com/square/jetpack</a></a>), it wasn&rsquo;t mentioned in book. It packages your JRuby webapp for Jetty.</li></ul>I must admit that the most impressive is Torquebox. It&rsquo;s very powerful and it uses all power of JBoss App Server:<br /><blockquote class="tr_bq">TorqueBox provides an all-in-one environment, built upon the latest                   <a href="http://www.jboss.org/jbossas/">JBoss AS</a> Java application server and                   <a href="http://jruby.org/">JRuby</a>.&nbsp; </blockquote>Such features as messaging, long running jobs, scheduled jobs are provided out of the box, have nice API which easy to use. Have a try.</p>
]]></content>
  </entry>
  
</feed>
