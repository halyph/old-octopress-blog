<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2016-03-19T15:13:00+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Day - Kiev, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/11/08/java-day-kiev-2015-report/"/>
    <updated>2015-11-08T22:14:46+02:00</updated>
    <id>http://halyph.com/blog/2015/11/08/java-day-kiev-2015-report</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/conf/java_day_2015.png"></p>

<p><em>November 6-7, 2015</em> I visited <a href="http://javaday.org.ua/kyiv">Java Day Kyiv</a> conference. This report is for myself just to keep track talks I&rsquo;ve attended.</p>

<a name="Day.1"></a>
<h2>Day 1</h2>

<ul>
<li><p><strong>Get Past the Syntax, the Real Scare&rsquo;s in the Semantics</strong> by <a href="https://twitter.com/@venkat_s">Venkat Subramaniam</a></p>

<blockquote><p>We often hear programmers complain about the syntax, especially when learning a new language. It turns out that, while syntax plays a role in our ability to learn and use languages, the real force we have to deal with is in the semantics. Once we get past the syntax, the semantics is where the real power and the real scare is. Curious to learn more?</p></blockquote></li>
<li><p><strong>Enterprise Integration Patterns Revisited for the Era of Big Data, Internet of Things and Microservices</strong> by <a href="https://twitter.com/kaiwaehner">Kai Waehner</a>  (<a href="http://www.slideshare.net/KaiWaehner/enterprise-integration-patterns-revisited-eip-for-the-era-of-big-data-internet-of-things-iot-and-cloud">slides</a>)</p>

<blockquote><p>Data exchanges between companies increase a lot. Hence, the number of applications, which must be integrated increases, too. The realization of these integration scenarios is a complex and time-consuming task because different applications and services do not use the same concepts, interfaces, data formats and technologies. Originated and published over ten years ago by Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns (EIP) became the world wide de facto standard for describing integration problems. They offer a standardized way to split huge, complex integration scenarios into smaller recurring problems. This session revisits EIPs and gives an overview about the status quo and its relevance regarding modern concepts such as Big Data, Internet of Things or Microservices. Fortunately, EIPs offer more possibilities than just being used for modeling integration problems in a standardized way. Several frameworks and tools already implement these patterns. The developer does not have to implement EIPs on his own. Therefore, the end of the session shows different open source frameworks and proprietary tools available, which can be used for modeling and implementing complex integration scenarios by using the EIPs.</p></blockquote></li>
<li><p><strong>Microservices at Proximus: Netflix OSS and HATEOAS deployed on production</strong> by <a href="https://twitter.com/andreasevers">Andreas Evers</a> (<a href="https://speakerdeck.com/krosan/microservices-with-netflix-oss-and-hypermedia-apis-javaday-kiev">slides</a>)</p>

<blockquote><p>At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. Throughout this session you will learn what the microservices hype is all about, including its benefits and pitfalls based on our experiences of running microservices (including the Netflix OSS) in production at a major company in Belgium. To manage hundreds of microservices you need to apply certain patterns such as circuit breakers, gateways, service registries and so on. You will learn how these patterns work, how they are applied through the Netflix stack and how easy it is to use them in your architecture through code examples and demos. The contracts between these microservices should be well defined and loosely coupled. Using hypermedia as the engine of application state (hateoas), we can benefit from independent evolution and decoupled implementation. How we can implement these using Spring Hateoas, correctly document using Spring Restdocs, integrate with the HAL browser and version using JsonViews will become clear in the second part of this session.</p></blockquote></li>
<li><p><strong>Java in production for Data Mining Research projects</strong> by <a href="https://plus.google.com/110650159101065784429/posts">Alexey Zinoviev</a> (<a href="http://www.slideshare.net/zaleslaw/javadaykiev15-java-in-production-for-data-mining-research-projects">slide</a>)</p>

<blockquote><p>Java is often criticized for hard parsing CSV datasets, poor matrix and vectors manipulations. This makes it hard to easy and efficiently implement certain types of machine learning algorithms. In many cases data scientists choose R or Python languages for modeling and problem solution and you as a Java developer should rewrite R algorithms in Java or integrate many small Python scripts in Java application. But why so many highload tools like Cassandra, Hadoop, Giraph, Spark are written in Java or executed on JVM? What the secret of successful implementation and running? Maybe we should forget old manufacturing approach of dividing on developers and research engineers in production projects? During the report, we will discuss how to build full Java-stack Data Mining application, deploy it, make charts, integrate with databases, how to improve performance with JVM tuning and etc. Attendees of my talk will become familiar with the development and deploy of research Java projects, Hadoop/Spark — based Data Mining tools and will get useful tips about possible integration ways.</p></blockquote></li>
<li><p><strong>How Java developers should test their applications</strong> by <a href="https://twitter.com/xpinjection">Mikalai Alimenkou</a> <em>It was a real code sharing session where were demoed and discussed different testing approaches</em></p></li>
</ul>


<a name="Day.2"></a>
<h2>Day 2</h2>

<ul>
<li><p><strong>The Future [Java] Developer</strong> by <a href="https://twitter.com/brjavaman">Bruno Souza</a>. <strong>Keynote</strong></p>

<blockquote><p>What kind of developer do you want to be? The kind that plans, organizes, prepares, and prepares&hellip; and prepares&hellip; Or the kind that focus on delivering and on transforming your customers&#8217; lives? Software development is a creative and complex work. It is trully &ldquo;Meaningful Work&rdquo;. But&hellip; If we do it right! Java has allowed us to adventure into all kinds of new technologies, while improving our core knowledge. But how does the ever changing technology landscape and things like Cloud Computing, Internet of Things, BigData and DevOps impact our ability to deliver? This talk will take a look at the abilities of the Future [Java] Developer, and how open source, startups and containers play a role into our future careers.</p></blockquote></li>
<li><p><strong>20 Years of Java</strong> by <a href="https://twitter.com/lagergren">Marcus Lagergren</a>. <strong>Keynote</strong></p>

<blockquote><p>This keynote will be a historical trip down memory lane - going through 20 years of Java and JVM implementations. This will be partly from Marcus’s own perspective as one of the architects behind JRockit, with plenty of stories from the trenches, like the benchmarking competitions between BEA/Oracle, Sun and IBM. We will see how Java and the JVM turned into the robust high performance server side platform that it is today, partly through personal observations and partly through a more objective “what a long strange trip this has been”. He will take you back to 1995 in a time machine and slowly bring you to 2014, going over the major Java releases and the runtime innovations made in the JVM side to get us here. Finally, we will do a short trip into the future, even though the future is always fuzzy, to explore what might be coming next. With Java 8, the biggest release in Java history, Java is more vibrant and alive than ever before. This is an evolution that won’t be stopped.</p></blockquote></li>
<li><p><strong>Brand new proximus microservices architecture in production</strong> by <a href="https://twitter.com/andreasevers">Andreas Evers</a> (<a href="https://speakerdeck.com/krosan/lessons-learned-testimonial-of-a-brand-new-microservices-architecture-in-production-javaday-kiev">slides</a>)</p>

<blockquote><p>At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. During this talk we will shed a light on the migration path we went through to get Spring Cloud microservices based on Netflix deployed to production. Migrating from a monolith to containerized microservices doesn&rsquo;t always go smoothly in a rigid regulated enterprise. This is not your regular microservice talk. This is a journey through our struggles to reform both technically and culturally (reverse Conway&rsquo;s law) towards a devops distributed architecture which actually runs on production. E.g. gradually evolving from a manual infrastructure deploying on JBoss and using dedicated apache load balancers, to a PaaS private cloud solution.</p></blockquote></li>
<li><p><strong>One VM To Rule Them All</strong> by <a href="http://www.wuerthinger.net/">Thomas Wuerthinger</a> (<a href="http://www.slideshare.net/ThomasWuerthinger/jazoon2014-slides">slides</a>)</p>

<blockquote><p>Running a multitude of programming languages is a common requirement for large scale applications. This talk presents a virtual machine architecture that allows to handle different programming languages and their interoperability while not sacrificing performance. It bases on partial evaluation of AST interpreters to automatically derive compiled code. A prototype of this architecture has been developed as part of the Graal OpenJDK project (<a href="http://openjdk.java.net/projects/graal/">http://openjdk.java.net/projects/graal/</a>) as well as the TruffleRuby, ZipPy, and FastR open source projects. The talk will be about the general principles behind our VM, special aspects of the Ruby, Python, and R implementations, and our vision for making language interoperability work efficiently.</p></blockquote></li>
<li><p><strong>Microservices Design Patterns for Java Application</strong> by <a href="https://twitter.com/arungupta">Arun Gupta</a> (<a href="https://dzone.com/refcardz/getting-started-with-microservices">DZone Refcard</a>)</p>

<blockquote><p>Microservices allow to decompose a monolithic application into cohesive and multiple decoupled services. Each service is running in its own process and communicate using lightweight mechanisms, such as HTTP API. These services are built around business capabilities or functional decomposition. Microservice also enables true polyglot architecture – both in terms of language and data. It truly allows you to employ the right tool for the right job. Each service is independently deployable and lends very well to fully automated deployment machinery. Can you take an existing Java EE application and decompose it into microservices? What tools are required to enable CI/CD? What are different design patterns for microservices? What tools do you need to manage such services? Is the complexity being pushed around from service implementation to orchestration? This talk will explain some of these concerns and provide guidance on how to leverage microservices in your Java applications.</p></blockquote></li>
<li><p><strong>Scaling Wix with microservices architecture and multi-cloud platform</strong> by <a href="http://www.aviransplace.com/">Aviran Mordo</a> (<a href="http://www.slideshare.net/aviranwix/scaling-wix-with-microservices-and-multi-cloud-2015">slides</a>)</p>

<blockquote><p>Many small startups build their systems on top of a traditional toolset like Tomcat, Hibernate, and MySQL. These systems are used because they facilitate easy development and fast progress, but many of them are monolithic and have limited scalability. So as a startup grows, the team is confronted with the problem of how to evolve the system and make it scalable. Facing the same dilemma, Wix.com grew from 0 to 70 million users in just a few years. Facing some interesting challenges, like performance and availability. Traditional performance solutions, such as caching, would not help due to a very long tail problem which causes caching to be highly inefficient. And because every minute of downtime means customers lose money, the product needed to have near 100% availability. Solving these issues required some interesting and out-of-the-box thinking, and this talk will discuss some of these strategies: building a highly preformant, highly available and highly scalable system; and leveraging microservices architecture and multi-cloud platforms to help build a very efficient and cost-effective system.</p></blockquote></li>
<li><p><strong>From CRUD to Hypermedia APIs with Spring</strong> by <a href="https://twitter.com/flushdia">Vladimir Tsukur</a></p>

<blockquote><p>Typical way to design and expose HTTP API today is a so called CRUD approach: come up with URL templates for resources, map create-read-update-delete operations to HTTP verbs and serialize domain model as JSON. Nice and easy, isn&rsquo;t it? This talk will present limitations of CRUD style APIs and how to address them using &ldquo;real&rdquo; REST and hypermedia, HAL and ALPS. We&rsquo;ll take a look how a set of libraries and tools from Spring helps building these APIs. All the talking is not worth it without an example, so Spring-based application will be our guide. Amazon, PayPal, GitHub and other API providers have already started embracing hypermedia and linking by enhancing their HTTP interfaces. Are you next? #rest #hypermedia #http #api #design #spring #spring-hateoas #java #hal #alps</p></blockquote></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="https://speakerdeck.com/krosan/spring-rest-docs-documenting-restful-apis-using-your-tests">Spring REST Docs - Documenting RESTful APIs using your tests by Andreas Evers</a></li>
<li>Graal Compiler <a href="http://www.slideshare.net/ThomasWuerthinger/2015-cgo-graal">slides</a></li>
<li><a href="http://blog.arungupta.me/microservice-design-patterns/">Microservice Design Patterns</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Netflix Eureka via Webapp Runner?]]></title>
    <link href="http://halyph.com/blog/2015/10/21/using-webrunner/"/>
    <updated>2015-10-21T00:20:21+03:00</updated>
    <id>http://halyph.com/blog/2015/10/21/using-webrunner</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/blog/java.png"></p>

<p>Some time ago I had to run <a href="https://github.com/Netflix/eureka">Netflix Eureka server</a> (to be more specific itwas version 1.1.151) not using Spring Boot.</p>

<p>There were several ways:</p>

<ul>
<li>simply deploy <strong>eureka-server.war</strong> into Tomcat</li>
<li>use <a href="http://www.eclipse.org/jetty/documentation/current/runner.html">Jetty runner</a>.

<blockquote><p>The idea of the jetty-runner is extremely simple – run a webapp directly from the command line using a single jar and as much default configuration as possible. Of course, if your webapp is not so straightforward, the jetty-runner has command line options which allow you to customize the execution environment.</p></blockquote></li>
<li>use <a href="https://github.com/jsimone/webapp-runner">Webapp Runner</a>.

<blockquote><p>Webapp runner is designed to allow you to launch an exploded or compressed war that is on your filesystem into a tomcat container with a simple java -jar command.</p></blockquote></li>
</ul>


<p>I decided to go with <em>Webapp Runner</em>.</p>

<p>So, here is the list of steps:</p>

<ol>
<li>Download <strong>eureka-server</strong> war from maven central (e.g. <a href="http://mvnrepository.com/artifact/com.netflix.eureka/eureka-server/1.1.151">http://mvnrepository.com/artifact/com.netflix.eureka/eureka-server/1.1.151</a>). Also, we can clone the Netflix Eureka github repo and perform build locally. But, our intent is just get ready to use war file as quick as possible.</li>
<li>Rename <strong>eureka-server-1.1.151.war</strong> to <strong>eureka-server.war</strong>.</li>
<li>Download <strong>webapp-runnner</strong> jar from maven central (e.g. <a href="http://mvnrepository.com/artifact/com.github.jsimone/webapp-runner/8.0.24.0">http://mvnrepository.com/artifact/com.github.jsimone/webapp-runner/8.0.24.0</a>)</li>
<li>I assume that <strong>eureka-server.war</strong> and <strong>webapp-runner-8.0.24.0.jar</strong> are located in the same directory. Now we can simply run the <em>eureka-server</em> on port 4000 via <code>runme.bat</code> file:
<code>
$ cat runme.bat
java -jar webapp-runner-8.0.24.0.jar eureka.war --path /eureka --port 4000
</code></li>
</ol>


<p>Local directory should have the next files/folders:
<code>
$ dir /b
eureka-server-1.1.151.war
eureka.war
runme.bat
target/
webapp-runner-8.0.24.0.jar
</code></p>

<p>The server is up and running: check Eureka UI <a href="http://localhost:4000/eureka/">http://localhost:4000/eureka/</a> or registered apps <a href="http://localhost:4000/eureka/v2/apps/">http://localhost:4000/eureka/v2/apps/</a> XML output.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li>Github <a href="https://github.com/jsimone/webapp-runner">Webapp Runner</a></li>
<li>Github <a href="https://github.com/Netflix/eureka">Netflix Eureka</a></li>
<li><a href="https://github.com/heroku/devcenter-jetty-runner">Deploy a Java Web Application that launches with Jetty Runner</a></li>
<li><a href="https://devcenter.heroku.com/articles/java-webapp-runner">Deploying Tomcat-based Java Web Applications with Webapp Runner</a></li>
<li><a href="http://www.java-allandsundry.com/2015/02/standing-up-local-netflix-eureka.html">Standing up a local Netflix Eureka</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDay - Lviv, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/09/20/jday-lviv-2015-report/"/>
    <updated>2015-09-20T23:14:46+03:00</updated>
    <id>http://halyph.com/blog/2015/09/20/jday-lviv-2015-report</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/conf/jday.png"></p>

<p><em>September 19, 2015</em> I visited <a href="http://www.jday.com.ua">JDay Lviv</a> Java conference. This report is for myself just to keep track talks I&rsquo;ve attended.</p>

<ul>
<li><p><strong>Put Your Thinking CAP On</strong> by <a href="https://twitter.com/tomerg">Tomer Gabel</a> (<a href="http://www.slideshare.net/holograph/scaling-out-data-stores-and-the-cap-theorem">slides</a>)</p>

<blockquote><p>Consistency, availability and partition tolerance: these seemingly innocuous concepts have been giving engineers and researchers of distributed systems headaches for over 15 years. But despite how important they are to the design and architecture of modern software, they are still poorly understood by many engineers. This session covers the definition and practical ramifications of the CAP theorem; you may think that this has nothing to do with you because you &ldquo;don&rsquo;t work on distributed systems&rdquo;, or possibly that it doesn&rsquo;t matter because you &ldquo;run over a local network.&rdquo; Yet even traditional enterprise CRUD applications must obey the laws of physics, which are exactly what the CAP theorem describes. Know the rules of the game and they&rsquo;ll serve you well, or ignore them at your own peril&hellip;</p></blockquote></li>
<li><p><strong>Microservices and Modularity or the difference between treatment and cure!</strong> by <a href="https://twitter.com/milendyankov">Milen Dyankov</a> (<a href="http://www.slideshare.net/MilenDyankov1/microservices-and-modularity">slides</a>)</p>

<blockquote><p>Everyone is talking about microservices these days! So the question is should you also jump on that bandwagon and why those somewhat older colleagues of yours (yep, those that still remember the EJB 2 revolution) are not that enthusiastic? To help you make the right decisions, this talk will first focus on explaining complexity - the problem microservices claim to solve. It then will concentrate on modular architecture and how it compares to what most people understand by microservices! Live demo will present multiple ways to modularize existing JEE application going from &ldquo;monolithic&rdquo; Glassfish EJB/JSF style app through SpringBoot and OSGi to reach a distributed system with a portal as front-end.</p></blockquote></li>
<li><p><strong>The modern view on implementation of classic design patterns in Java</strong> by <a href="https://twitter.com/xpinjection">Mikalai Alimenkou</a> (<a href="http://www.slideshare.net/alimenkou/the-modern-view-on-implementation-of-classic-design-patterns-in-java">slides</a>, <a href="https://github.com/xpinjection/design-patterns">github</a>)</p>

<blockquote><p>Almost every developer heard about design patterns. They was introduced long time ago to solve particular set of repeating problems in systems of different complexity level and size. But there is an opinion that many design patters just filled holes in the OOP languages of that time. Java as one of them has transformed and improved significantly in the last 10 years. So may be we could review design patterns implementation in modern Java world? Some of them are now may be easily replaced with language idioms, some others may be covered with existing libraries and frameworks. I&rsquo;m sure you know some design patterns that are dead now or became anti-patterns in their initial implementation. Lets make this fun and useful review together!</p></blockquote></li>
<li><p><strong>Functional programming concepts in Java 8: Lambdas &amp;&amp; Monads</strong> by <a href="https://twitter.com/pivovarit">Grzegorz Piwowarek</a> (<a href="http://www.slideshare.net/pivovarit/confitura2015grzegorzpiwowareklambdasmonads">slides</a>)</p>

<blockquote><p>The aim of this presentation is to introduce listener to a functional programming concepts that were introduced in Java 8. Presentation covers lambda expressions, an imperative-programmer-friendly definition of a monad and an application of Java 8 monads in everyday java developer life.</p></blockquote></li>
<li><p><strong>Handling 10k req/sec with 1 core or how you could get even more?</strong> by <a href="https://github.com/doom369">Dmitriy Dumanskiy</a></p>

<blockquote><p>For the past 5 years I have been working on highly-loaded systems, solving problems and optimizing them. In my talk I will explain how the IoT has changed the understanding of high-load and why this trend changes the rules. What are asynchronous sockets and how they work. What are the solutions up to date and why Netty has no competitors? How does Netty work, what are its strengths, weaknesses, pitfalls? How to get the most, out of your code, where to look and what to do? And many other tips and advices on how to optimize your code ranging from simple cases up to choosing a JDBC pool.</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Full Stack Web Framework]]></title>
    <link href="http://halyph.com/blog/2015/04/06/java-full-stack-web-framework/"/>
    <updated>2015-04-06T23:43:10+03:00</updated>
    <id>http://halyph.com/blog/2015/04/06/java-full-stack-web-framework</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/blog/java.png"></p>

<p><ul>
 <li>
 <ul>
  <li><a href="#Overview">Overview</a></li>
  <li><a href="#Grails">Grails</a></li>
  <li><a href="#Play.Framework.2">Play Framework 2</a></li>
  <li><a href="#Code.Generation.Frameworks">Code Generation Frameworks</a>
  <ul>
   <li><a href="#Spring.Roo">Spring Roo</a></li>
   <li><a href="#JBoss.Forge">JBoss Forge</a></li>
   <li><a href="#AppFuse">AppFuse</a></li>
   <li><a href="#JHipster">JHipster</a></li>
  </ul>
  </li>
  <li><a href="#Domain-driven.Frameworks">Domain-driven Frameworks</a></li>
  <li><a href="#Others">Others</a></li>
  <li><a href="#Summary">Summary</a></li>
  <li><a href="#References">References</a></li>
 </ul>
 </li>
</ul>

</p>

<p>I believe that everybody knows the most popular full-stack web framework - <a href="http://rubyonrails.org">Ruby on Rails</a>. Of course there are other frameworks for Ruby language, but Rails is the number one. Now, the question: how many full-stack web frameworks exist for Java?</p>

<a name="Overview"></a>
<h2>Overview</h2>

<p>Let&rsquo;s define the desired items for full-stack web framework:</p>

<ul>
<li>CoC - <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a></li>
<li>MVC - <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-view-controller</a></li>
<li>DRY - <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don&rsquo;t repeat yourself</a></li>
<li>Scaffolding (<em>it was one of the major selling point on the early stage of Rails</em>)

<ul>
<li>Easy prototyping</li>
</ul>
</li>
<li>Data/Persistent Layer / ORM</li>
<li>DB schema migration</li>
<li>URI Routing</li>
<li>HTML Rendering / Template engines</li>
<li>Testing</li>
<li>REST API</li>
<li>Security</li>
<li>Caching</li>
<li>Request Filtering</li>
<li>Session Management</li>
<li>Form Validation</li>
<li>i18n/l10n</li>
</ul>


<a name="Grails"></a>
<h2>Grails</h2>

<p>I think  <a href="https://grails.org">Grails</a> was and is the single &ldquo;true&rdquo; Rails reincarnation on JVM. Grails is based on <a href="http://www.groovy-lang.org/">Groovy</a> language. It support all concepts Rails supports. It&rsquo;s based on Spring/Hibernate and Gradle since v.3.0 (Grails v.3.0.0 was released on <strong>Mar 31, 2015</strong>).</p>

<p>Grails v.3 is build on <a href="http://projects.spring.io/spring-boot/">Spring Boot</a>.</p>

<p>Some people arguing that Grails v.3 acts as simple wrapper on top of Spring Boot and now it does not worth any investments. But, we must not agree as CoC and DRY principles are very vague.</p>

<a name="Play.Framework.2"></a>
<h2>Play Framework 2</h2>

<p><a href="https://www.playframework.com/">Play Framework 2</a> is a special player. It has two implementations: Java and Scala. Actually Java version is not as powerful as Scala due to Java, as a language, &ldquo;limitation&rdquo;. This framework lives under <a href="http://typesafe.com/">Typesafe</a> umbrella, aka <strong>&ldquo;Typesafe Reactive Platform&rdquo;</strong>.</p>

<p>Play is just different. It&rsquo;s not Servlet-based and is built on <a href="http://netty.io/">Netty</a> async framework. A lot of people claiming that Play is very cool and productive. I haven&rsquo;t tried it yet. But it looks promising and interesting.</p>

<a name="Code.Generation.Frameworks"></a>
<h2>Code Generation Frameworks</h2>

<p>I decided to define the special category &ldquo;Code Generation&rdquo;. Frameworks which are related  to this category are not full stack, but can be called as RAD (Rapid Application Development) frameworks.</p>

<a name="Spring.Roo"></a>
<h3>Spring Roo</h3>

<p><a href="http://projects.spring.io/spring-roo/">Spring Roo</a> was very popular some time ago and had a lot of investments from VMWare (former Spring stack owner). Later, the ownership was transferred to <a href="http://www.disid.com">DISIG</a>.</p>

<p>Spring Roo is code generation framework, built on top of Spring stack. It&rsquo;s useful for quick prototyping.</p>

<a name="JBoss.Forge"></a>
<h3>JBoss Forge</h3>

<p><a href="http://forge.jboss.org/">JBoss Forge</a> is conceptually equal to Spring Roo, but linked to Java EE stack (like <a href="http://wildfly.org/">Wildfly</a>, <a href="http://tomee.apache.org/apache-tomee.html">TomEE</a>) and Maven. It&rsquo;s relly cool if you work with Java EE a lot. Forge is shine in prototyping and code generation. Community looks vibrant and active.</p>

<a name="AppFuse"></a>
<h3>AppFuse</h3>

<p><a href="http://appfuse.org/">AppFuse</a> can be called as ramp-up framework. The main goal is to quickly generate project with pre-onfigured functionality (see <code>mvn archetype:generate</code>).</p>

<a name="JHipster"></a>
<h3>JHipster</h3>

<p><a href="https://jhipster.github.io/">JHipster</a> is brand new and based on Spring Boot and Angular.js v.1.x. Classical code generation like in Forge or Spring Roo. But, code generation is build on top of node.js tool <a href="http://yeoman.io/">Yeoman</a>. Concept is very interesting, especially when it uses so hipster&rsquo;s technologies ;-).
It can generate both back-end (REST endpoint) and front-end (Angular.js Single-page application), even <a href="http://www.liquibase.org/">Liquibase</a> migrations (which is cool too).</p>

<a name="Domain-driven.Frameworks"></a>
<h2>Domain-driven Frameworks</h2>

<p>There is a very special category Domain-driven frameworks. For this category I&rsquo;ve selected two most popular frameworks: <a href="http://www.openxava.org/">OpenXava</a> and <a href="http://isis.apache.org/">Apache Isis</a>. The main idea is that they can generate views and RESTs based on domain entities. Both frameworks have active community. They have &ldquo;own&rdquo; concepts and no hipsters technologies. The usage domain is very narrow, I guess they can be easily used to quickly general application&rsquo;s back-offices (aka admin pages) and prototyping.</p>

<a name="Others"></a>
<h2>Others</h2>

<p>There are several others frameworks <a href="http://www.ninjaframework.org/">Ninja</a>, <a href="http://javalite.io/">Javalight</a>, <a href="http://joddframework.org/">Jodd</a>, <a href="http://jooby.org/">Jobby</a> and <a href="https://github.com/airlift/airlift">airlift</a>. They are build by small communities (or my single developer) and have some applications. But, it&rsquo;s risky to invest in them. You can look into because of curiosity, but not more. As for me it&rsquo;s much safe to use Play/Grails than some unpopular frameworks.</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>So, Java ecosystem has two full stack frameworks which use Java language minimally: <strong>Grails</strong> (Groovy/Java) and <strong>Play</strong> (Scala/Java). Also, we have a bunch of code generation frameworks and domain-driven frameworks (which occupy really special niche).</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li>Full stack

<ul>
<li><a href="https://grails.org/">Grails</a></li>
<li><a href="https://www.playframework.com/">Play Framework 2</a></li>
</ul>
</li>
<li>Code Generation

<ul>
<li><a href="http://projects.spring.io/spring-roo/">Spring Roo</a></li>
<li><a href="http://forge.jboss.org/">JBoss Forge</a></li>
<li><a href="http://appfuse.org/">AppFuse</a></li>
<li><a href="https://jhipster.github.io/">JHipster</a></li>
</ul>
</li>
<li>DD Frameworks

<ul>
<li><a href="http://www.openxava.org/">OpenXava</a></li>
<li><a href="https://www.cuba-platform.com">Cuba-platform</a> - CUBA Platform is free for applications with up to 5 concurrent sessions.</li>
<li><a href="http://isis.apache.org/">Apache Isis</a></li>
</ul>
</li>
<li>Others

<ul>
<li><a href="http://www.ninjaframework.org/">Ninja</a></li>
<li><a href="http://javalite.io/">Javalight</a></li>
<li><a href="http://jodd.org/">Jodd</a> and <a href="http://joddframework.org/">Jodd µicro frameworks</a></li>
<li><a href="http://jooby.org/">Jobby</a></li>
<li><a href="https://github.com/airlift/airlift">airlift</a></li>
<li><a href="http://www.web4j.com/">Web4j</a></li>
<li><a href="http://rifers.org/">Rife</a> - dead</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Download Jars From Maven Central]]></title>
    <link href="http://halyph.com/blog/2015/03/17/how-to-download-jars-from-maven-central/"/>
    <updated>2015-03-17T18:00:00+02:00</updated>
    <id>http://halyph.com/blog/2015/03/17/how-to-download-jars-from-maven-central</id>
    <content type="html"><![CDATA[<center>
<img src="/images/blog/java.png">
<img src="/images/blog/ivy.png">
<img src="/images/blog/maven.png">
</center>


<p>We know how to download Java libraries with it&rsquo;s dependencies (transitive included) via Maven <em>pom.xml</em>, Ant/Ivy <em>build.xml</em> script, Gradle <em>build.gradle</em> script etc.
But what if we need to download them without these scripts.</p>

<p>There are several ways to do this.
Assume that we&rsquo;d like to download <code>spark-core</code> library (<code>groupId=com.sparkjava, artifactId=spark-core, version=2.1</code>) with all dependencies from <a href="http://search.maven.org/#artifactdetails%7Ccom.sparkjava%7Cspark-core%7C2.1%7Cjar">Maven Central</a> into <code>lib</code> folder.</p>

<a name="Use.Maven3.dependency.plugin"></a>
<h2>Use Maven3 dependency plugin</h2>

<p>Here is there variants for lib download:
&#8220;` bash Download library with all dependencies</p>

<a name="Specify.repoUrl..it.s.optional."></a>
<h1>Specify repoUrl (it&rsquo;s optional)</h1>

<p>mvn dependency:get -DrepoUrl=<a href="http://download.java.net/maven/2/">http://download.java.net/maven/2/</a> -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1</p>

<a name="OR.use.default.repoUrl"></a>
<h1>OR use default repoUrl</h1>

<p>mvn dependency:get -DgroupId=com.sparkjava -DartifactId=spark-core -Dversion=2.1</p>

<a name="OR.use.parameter.artifact.as.groupId:artifactId:version"></a>
<h1>OR use parameter artifact as groupId:artifactId:version</h1>

<p>mvn dependency:get -Dartifact=com.sparkjava:spark-core:2.1
&#8220;`</p>

<p>Now we need to copy just downloaded artifacts in our working directory:
&#8220;` bash Copy jars from local maven repo
mvn dependency:copy-dependencies -f $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.pom -DoutputDirectory=$(pwd)/lib</p>

<a name="the.previous.command.doesn.t.copy.spark-core-x.x.jar..that.s.why.we.should.copy.it.manually"></a>
<h1>the previous command doesn&rsquo;t copy spark-core-x.x.jar, that&rsquo;s why we should copy it manually</h1>

<p>cp $HOME/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.jar $(pwd)/lib
&#8220;`</p>

<a name="Use.standalone.Ivy"></a>
<h2>Use standalone Ivy</h2>

<p>We can use Ivy as standalone jar to download Maven dependencies without creating Ant build file:</p>

<pre><code class="bash"># 1. Download the latest ivy jar (currently it's v.2.4.0)
curl -L -O http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar

# 2. Run ivy.jar to retrieve all dependencies
java -jar ivy-2.4.0.jar -dependency com.sparkjava spark-core 2.1 -retrieve "lib/[artifact]-[revision](-[classifier]).[ext]"
</code></pre>

<p>As you can see Ivy downloads approach is much simpler. The only cons (or pros, it depends) that <strong>ivy.jar</strong> should be additionally downloaded.</p>

<a name="Calling.Ivy.from.Groovy.or.Java"></a>
<h2>Calling Ivy from Groovy or Java</h2>

<p>Here I&rsquo;ve decided to store <a href="http://makandracards.com/evgeny-goldin/5817-calling-ivy-from-groovy-or-java">Evgeny&rsquo;s Goldin</a> code snippet as a reference for myself. Programmatic artifacts downloads is not a common operation. It&rsquo;s alway nice to know the general concept how it can be done. Especially when Ivy documentation is not very informative.</p>

<pre><code class="java Groovy snippet of calling Ivy">import org.apache.ivy.Ivy
import org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor
import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor
import org.apache.ivy.core.module.id.ModuleRevisionId
import org.apache.ivy.core.resolve.ResolveOptions
import org.apache.ivy.core.settings.IvySettings
import org.apache.ivy.plugins.resolver.URLResolver
import org.apache.ivy.core.report.ResolveReport
import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter


public File resolveArtifact(String groupId, String artifactId, String version) {
        //creates clear ivy settings
        IvySettings ivySettings = new IvySettings();
        //url resolver for configuration of maven repo
        URLResolver resolver = new URLResolver();
        resolver.setM2compatible(true);
        resolver.setName('central');
        //you can specify the url resolution pattern strategy
        resolver.addArtifactPattern(
            'http://repo1.maven.org/maven2/[organisation]/[module]/[revision]/[artifact](-[revision]).[ext]');
        //adding maven repo resolver
        ivySettings.addResolver(resolver);
        //set to the default resolver
        ivySettings.setDefaultResolver(resolver.getName());
        //creates an Ivy instance with settings
        Ivy ivy = Ivy.newInstance(ivySettings);

        File ivyfile = File.createTempFile('ivy', '.xml');
        ivyfile.deleteOnExit();

        String[] dep = [groupId, artifactId, version]

        DefaultModuleDescriptor md =
                DefaultModuleDescriptor.newDefaultInstance(ModuleRevisionId.newInstance(dep[0],
                dep[1] + '-caller', 'working'));

        DefaultDependencyDescriptor dd = new DefaultDependencyDescriptor(md,
                ModuleRevisionId.newInstance(dep[0], dep[1], dep[2]), false, false, true);
        md.addDependency(dd);

        //creates an ivy configuration file
        XmlModuleDescriptorWriter.write(md, ivyfile);

        String[] confs = ['default'];
        ResolveOptions resolveOptions = new ResolveOptions().setConfs(confs);

        //init resolve report
        ResolveReport report = ivy.resolve(ivyfile.toURL(), resolveOptions);

        //so you can get the jar library
        File jarArtifactFile = report.getAllArtifactsReports()[0].getLocalFile();

        return jarArtifactFile;
}

resolveArtifact( 'log4j', 'log4j', '1.2.16' )
</code></pre>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/15450383/using-maven-to-download-dependencies-to-a-directory-on-the-command-line/15456621">Using Maven to download dependencies to a directory on the command line - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/15598612/simplest-ivy-code-to-programmatically-retrieve-dependency-from-maven-central">Simplest Ivy code to programmatically retrieve dependency from Maven Central - Stack Overflow</a></li>
<li><a href="http://makandracards.com/evgeny-goldin/5817-calling-ivy-from-groovy-or-java">Calling Ivy from Groovy or Java</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
