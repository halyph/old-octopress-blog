<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-11-25T00:47:33+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Install Git 1.8.3.4 on CentOS 6.4]]></title>
    <link href="http://halyph.com/blog/2013/08/21/how-to-install-git-1834-on-centos-64/"/>
    <updated>2013-08-21T15:45:00+03:00</updated>
    <id>http://halyph.com/blog/2013/08/21/how-to-install-git-1834-on-centos-64</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-8tSaZBIgOh8/UhSywqivolI/AAAAAAAABqE/u2B3RdZZJoY/s1600/CentOS_logo.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-8tSaZBIgOh8/UhSywqivolI/AAAAAAAABqE/u2B3RdZZJoY/s1600/CentOS_logo.png" /></a></div>


<ol><li>Check the CentOS version</li><pre class="brush: bash;">$ cat /etc/redhat-release<br />CentOS release 6.4 (Final)<br /></pre><li>Check git version</li><pre class="brush: bash;">$ git --version<br />git version 1.7.1<br /></pre><li>Enable/disable <b>yum </b>proxy settings (find/add &#8220;proxy&#8221; string with related proxy server) <pre class="brush: bash;">$ vim /etc/yum.conf<br /></pre></li><li>Try to update <b>git </b>via <b>yum </b>package manager. But you will get the message that git is up to date</li><pre class="brush: bash;">$ sudo yum update git <br /></pre><li>Based on instruction from <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">Getting Started Installing Git</a> install git from sources:</li><pre class="brush: bash;">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc<br />$ wget https://www.kernel.org/pub/software/scm/git/git-1.8.3.4.tar.gz<br />$ tar xzvf git-1.8.3.4.tar.gz<br />$ cd git-1.8.3.4<br />$ sudo make prefix=/usr/local all<br />$ sudo make prefix=/usr/local install<br /></pre><li>Re-run bash shell and verify the current git version</li><pre class="brush: bash;">$ git --version<br />git version 1.8.3.4<br /></pre></ol>


<p><b>References</b>:<br /><ul><li><a href="http://johnathanmarksmith.com/linux/git/programming/2013/05/15/how-to-install-git-182-on-fedora-centos-red-hat-and-scientific-linux/" target="_blank">How to install Git 1.8.2 on Fedora, CentOS, Red Hat and Scientific Linux</a></li><li><a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">Getting Started Installing Git</a></li></ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, Jenkins, Gerrit, Code Review and Pre-tested Commits]]></title>
    <link href="http://halyph.com/blog/2013/08/17/git-jenkins-gerrit-code-review-and-pre/"/>
    <updated>2013-08-17T13:16:00+03:00</updated>
    <id>http://halyph.com/blog/2013/08/17/git-jenkins-gerrit-code-review-and-pre</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-TQLoXCK0UjM/UH8CEqejzkI/AAAAAAAAArU/vx6ohZLn3K0/s1600/git-logo.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="http://1.bp.blogspot.com/-TQLoXCK0UjM/UH8CEqejzkI/AAAAAAAAArU/vx6ohZLn3K0/s200/git-logo.png" width="200" /></a><a href="http://3.bp.blogspot.com/-G0y3vRvF8Gk/UODT7t-pUCI/AAAAAAAABF4/JxoydHYGUvQ/s1600/logo.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="http://3.bp.blogspot.com/-G0y3vRvF8Gk/UODT7t-pUCI/AAAAAAAABF4/JxoydHYGUvQ/s200/logo.png" width="144" /></a></div>


<p><br />This post is a note to myself. There are bunch of tools on the market which can be successfully used in yours development process. But, I&rsquo;m interested in <a href="http://git-scm.com/" target="_blank">git</a>,&nbsp;<a href="http://jenkins-ci.org/" target="_blank">Jenkins</a><a href="http://jenkins-ci.org/" target="_blank"> </a>only. Also, git/jenkins supports tons on different workflows, but here I&rsquo;d like to talk about pre-tested commits.<br /><br />So, what does it mean <i>&ldquo;pre-tested commit&rdquo;</i>? Initially this type of commits was introduced in <a href="http://www.jetbrains.com/teamcity/" target="_blank">TeamCity</a> CI Server:<br /><blockquote class="tr_bq">Typically, your team submits code to Version Control BEFORE verifying that it works, and risks breaking the             build every single time — causing more problems than necessary. <a href="http://www.jetbrains.com/teamcity/features/delayed_commit.html" target="_blank">[2]</a></blockquote><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-sW4kC9t9Q9I/Ug9IK5q5kiI/AAAAAAAABpo/oAnCmJ2Hy8k/s1600/Standard-scenario.gif" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="320" src="http://4.bp.blogspot.com/-sW4kC9t9Q9I/Ug9IK5q5kiI/AAAAAAAABpo/oAnCmJ2Hy8k/s320/Standard-scenario.gif" width="279" /></a><a href="http://1.bp.blogspot.com/-AmCwe9rar4k/Ug9IA7cEraI/AAAAAAAABpk/jVpX2bYsSss/s1600/TeamCity-scenario.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-AmCwe9rar4k/Ug9IA7cEraI/AAAAAAAABpk/jVpX2bYsSss/s320/TeamCity-scenario.gif" width="279" /></a></div><br />But, it&rsquo;s TeamCity and we need similar functionality in Jenkins.<br /><br />There are several ways to get it:<br /><ul><li>Implement Jenkins plugin which can work with integration branches and simulate pre-tested workflow</li><li>Reuse existing tool like <a href="http://code.google.com/p/gerrit/" target="_blank">Gerrit</a>.&nbsp; </li></ul>But you say <a href="http://code.google.com/p/gerrit/" target="_blank">Gerrit</a> is a code review tool. And you are right. Fortunately, <a href="http://code.google.com/p/gerrit/" target="_blank">Gerrit</a> support pre-tested commit in his code review workflows (see source <a href="http://blogs.collab.net/teamforge/teamforge-git-gerrit-integration-with-jenkins-ci" target="_blank">[3]</a>):<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-8RxVzZiVAw8/Ug9J3vwhvaI/AAAAAAAABp0/PJWcEhal96w/s1600/Git_gerrit_jenkins.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="419" src="http://4.bp.blogspot.com/-8RxVzZiVAw8/Ug9J3vwhvaI/AAAAAAAABp0/PJWcEhal96w/s640/Git_gerrit_jenkins.png" width="640" /></a></div><br /><blockquote class="tr_bq"><a href="http://gerrit.googlecode.com/" target="_blank" title="Gerrit Code Review">Gerrit Code Review</a> represents a step-forward in the way the team work on the code and  share idea and the ownership of the design and coding decisions.&nbsp; (see <a href="http://jenkinsmobi.me/2012/03/21/jenkins-ci-and-gerrit-code-review-dance-together/" target="_blank">[4]</a>)</blockquote>&nbsp;Tools required to support this workflow:<br /><ul><li><a href="http://git-scm.com/" target="_blank">git</a></li><li><a href="http://jenkins-ci.org/" target="_blank">Jenkins</a></li><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger" target="_blank">Jenkins Gerrit Trigger</a></li></ul><br />&nbsp;To see all these in action I&rsquo;ve added two videos which demonstrate this concept:<br /><iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/LvCVw5gnAo0" width="560"></iframe> <iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/96wfa3ipF34" width="560"></iframe><br /><br />Also, it worth to review this slides. Here is nicely demonstrated why <a href="http://code.google.com/p/gerrit/" target="_blank">Gerrit</a> is cool and why un-tested commit is bad.<br /><iframe allowfullscreen="" frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen="" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/12081441" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px; max-width: 427px;" webkitallowfullscreen="" width="100%"> </iframe> <br /><div style="margin-bottom: 5px;"><b> <a href="https://www.slideshare.net/lucamilanesio/gerrit-code-review" target="_blank" title="Gerrit Code Review">Gerrit Code Review</a> </b> from <b><a href="http://www.slideshare.net/lucamilanesio" target="_blank">Luca Milanesio</a></b> </div><br /><br /><b>References:</b><br /><ol><li><a href="http://www.tomslabs.com/index.php/2011/10/pretested-commits-why-does-it-matter-to-us/" target="_blank">Pretested commits – why does it matter to us?</a></li><li><a href="http://www.jetbrains.com/teamcity/features/delayed_commit.html" target="_blank">Pre-Tested Commit: No broken code in your version control. Ever.</a></li><li><a href="http://blogs.collab.net/teamforge/teamforge-git-gerrit-integration-with-jenkins-ci" target="_blank">TeamForge Git /Gerrit Integration with Jenkins CI </a></li><li><a href="http://jenkinsmobi.me/2012/03/21/jenkins-ci-and-gerrit-code-review-dance-together/" target="_blank">Jenkins CI and Gerrit Code Review dance together</a></li><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Designing+pre-tested+commit" target="_blank">Jeknins - Designing pre-tested commit</a></li><li><a href="https://wiki.openstack.org/wiki/Gerrit_Workflow" target="_blank">Open Stack - Gerrit Workflow </a></li><li><a href="https://wiki.openstack.org/wiki/GerritJenkinsGithub" target="_blank">Open Stack - Gerrit Jenkins Github</a></li></ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typical .gitignore for Java Projects]]></title>
    <link href="http://halyph.com/blog/2013/08/06/typical-gitignore-for-java-projects/"/>
    <updated>2013-08-06T00:22:00+03:00</updated>
    <id>http://halyph.com/blog/2013/08/06/typical-gitignore-for-java-projects</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-PpkCLrGAdmE/UH8NW3zQGSI/AAAAAAAAAsc/zYChVLpt1iY/s1600/Git-Logo-1788C.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="83" src="http://4.bp.blogspot.com/-PpkCLrGAdmE/UH8NW3zQGSI/AAAAAAAAAsc/zYChVLpt1iY/s200/Git-Logo-1788C.png" width="200" /></a></div>


<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-TQLoXCK0UjM/UH8CEqejzkI/AAAAAAAAArU/vx6ohZLn3K0/s1600/git-logo.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><br /></a></div>


<p>I&rsquo;m sure that every developer have some basic (skeleton) .gitignore file which is coping from project to project :-)<br /><br />As a Java developer I&rsquo;d like to talk about typical .gitignore file which can be added at the beginning the project (a la initial commit).<br /><br />I&rsquo;ve been using <a href="https://github.com/github/gitignore" target="_blank">Github collection of useful .gitignore templates</a>. It&rsquo;s very useful repo contains tons of standard .gitignore<i>s</i>. General workflow is to assemble my .gitignore based on several templates:<br /><ul><li><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target"><a class="js-directory-link" href="https://github.com/github/gitignore/blob/master/Java.gitignore" id="3a066dd7df792412558ff6d8db876167-0f182a0349c4925c57f4ffbd5802b536a3e2588b" title="Java.gitignore">Java.gitignore</a></span> </span></li><li><span class="css-truncate css-truncate-target"><a class="js-directory-link" href="https://github.com/github/gitignore/blob/master/Global/Eclipse.gitignore" id="83d5bb833c644c02a4277614b885f166-7b3ad03cac9d0ddfe53ebb4412ecf9619f002eeb" title="Eclipse.gitignore">Eclipse.gitignore</a></span></li><li><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target"><a class="js-directory-link" href="https://github.com/github/gitignore/blob/master/Global/IntelliJ.gitignore" id="86afa0583a7f510bb6462828794c530a-7d89b9c0afebe7ef94c374aa37fab164ca478f5f" title="IntelliJ.gitignore">IntelliJ.gitignore</a></span></span></li><li><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target"><a class="js-directory-link" href="https://github.com/github/gitignore/blob/master/Maven.gitignore" id="b61a033ac24cb8b5eab9aa153d26cc52-2f7896d1d1365eafb0da03d9fe456fac81408487" title="Maven.gitignore">Maven.gitignore</a></span></span></span></li></ul><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target">But recently I&rsquo;ve found very nice service <a href="http://gitignore.io/" target="_blank">gitignore.io</a> which can generate </span></span><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target">nicely </span></span>assembled .gitignore based on provided criteria:</span></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-eDW_9k1SXJA/UgAWZi8I2mI/AAAAAAAABpI/j01Y-UvTZOg/s1600/gitignore.io.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="163" src="http://4.bp.blogspot.com/-eDW_9k1SXJA/UgAWZi8I2mI/AAAAAAAABpI/j01Y-UvTZOg/s640/gitignore.io.png" width="640" /></a></div><br /><span class="css-truncate css-truncate-target"><span class="css-truncate css-truncate-target">Here is the generated file:</span></span><br /><pre class="brush: bash;"> <br /># Generated by <a href="http://gitignore.io">http://gitignore.io</a><br /><br />### Java ###<br /><em>.class<br /><br /># Package Files #<br /></em>.jar<br /><em>.war<br /></em>.ear<br /><br />### IntelliJ ###<br /><em>.iml<br /></em>.ipr<br /><em>.iws<br />.idea/<br /><br />### Eclipse ###<br /></em>.pydevproject<br />.project<br />.metadata<br />bin/<strong><br />tmp/</strong><br />tmp/<em><em>/</em><br /></em>.tmp<br /><em>.bak<br /></em>.swp<br /><em>~.nib<br />local.properties<br />.classpath<br />.settings/<br />.loadpath<br /><br /># External tool builders<br />.externalToolBuilders/<br /><br /># Locally stored &ldquo;Eclipse launch configurations&rdquo;<br /></em>.launch<br /><br /># CDT-specific<br />.cproject<br /><br /># PDT-specific<br />.buildpath<br /><br />### Maven ###<br />target/<br /><br /></pre>Very convenient. Have a try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install the Latest Git on OS X]]></title>
    <link href="http://halyph.com/blog/2013/06/25/how-to-install-latest-git-on-os-x/"/>
    <updated>2013-06-25T01:08:00+03:00</updated>
    <id>http://halyph.com/blog/2013/06/25/how-to-install-latest-git-on-os-x</id>
    <content type="html"><![CDATA[<div style="text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-D4VYLGwDCpA/Uci_q0qUKVI/AAAAAAAABmM/M_wNuu4muRk/s1600/homebrew.png" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img border="0" height="83" src="http://4.bp.blogspot.com/-PpkCLrGAdmE/UH8NW3zQGSI/AAAAAAAAAsc/zYChVLpt1iY/s200/Git-Logo-1788C.png" width="200" />&nbsp;</div>


<p><br />I&rsquo;ve been using git v.1.7.10.2 long time, despite the fact that git v.1.8+ released several months ago. So, I&rsquo;ve decided to updated my local git via <a href="http://mxcl.github.io/homebrew/" target="_blank">homebrew</a>.<br /><br /><pre class="brush: bash;">$ git &ndash;version<br />git version 1.7.10.2 (Apple Git-33)<br /><br />$ brew install git<br /><br />==&gt; Downloading <a href="http://git-core.googlecode.com/files/git-1.8.3.1.tar.gz">http://git-core.googlecode.com/files/git-1.8.3.1.tar.gz</a><br />######################################################################## 100.0%<br />==&gt; make prefix=/usr/local/Cellar/git/1.8.3.1 CC=cc CFLAGS= LDFLAGS= install<br />==&gt; make CC=cc CFLAGS= LDFLAGS=<br />==&gt; make clean<br />==&gt; make CC=cc CFLAGS= LDFLAGS=<br />==&gt; Downloading <a href="http://git-core.googlecode.com/files/git-manpages-1.8.3.1.tar.gz">http://git-core.googlecode.com/files/git-manpages-1.8.3.1.tar.gz</a><br />######################################################################## 100.0%<br />==&gt; Downloading <a href="http://git-core.googlecode.com/files/git-htmldocs-1.8.3.1.tar.gz">http://git-core.googlecode.com/files/git-htmldocs-1.8.3.1.tar.gz</a><br />######################################################################## 100.0%<br />==&gt; Caveats<br />The OS X keychain credential helper has been installed to:<br />  /usr/local/bin/git-credential-osxkeychain<br /><br />The &lsquo;contrib&rsquo; directory has been installed to:<br />  /usr/local/share/git-core/contrib<br /><br />Bash completion has been installed to:<br />  /usr/local/etc/bash_completion.d<br /><br />zsh completion has been installed to:<br />  /usr/local/share/zsh/site-functions<br />==&gt; Summary<br />  /usr/local/Cellar/git/1.8.3.1: 1324 files, 28M, built in 113 seconds<br /><br />$ git &ndash;version<br />git version 1.7.10.2 (Apple Git-33)<br /></pre>As you can see the latest git isn&rsquo;t on PATH. Than I&rsquo;ve asked the doctor&rsquo;s help: <br /><pre class="brush: bash;">$ brew doctor<br />Warning: /usr/bin occurs before /usr/local/bin<br />This means that system-provided programs will be used instead of those<br />provided by Homebrew. The following tools exist at both paths:<br /><br />    git<br />    git-cvsserver<br />    git-receive-pack<br />    git-shell<br />    git-upload-archive<br />    git-upload-pack<br />    gitk<br /><br />Consider amending your PATH so that /usr/local/bin<br />occurs before /usr/bin in your PATH.<br /></pre>I.e. I need to put the homebrew git before system git: <br /><pre class="brush: bash;">$ echo &lsquo;export PATH=/usr/local/bin:$PATH&rsquo; &gt;&gt; ~/.bash_profile</pre>After the terminal&rsquo;s restart I&rsquo;ve got the next: <br /><pre class="brush: bash;">$ git &ndash;version<br />git version 1.8.3.1</pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Configure Git Diff and Merge Tools?]]></title>
    <link href="http://halyph.com/blog/2012/11/02/how-to-configure-git-diff-and-merge/"/>
    <updated>2012-11-02T19:10:00+02:00</updated>
    <id>http://halyph.com/blog/2012/11/02/how-to-configure-git-diff-and-merge</id>
    <content type="html"><![CDATA[<div style="text-align: center;"><a href="http://2.bp.blogspot.com/-kKG2ycquT3Y/UJP7h58FIfI/AAAAAAAAAxM/LoNs-fCFWfI/s1600/06ada5204a4e0f281f988507ba90ebb4-763234.jpeg"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5806260904517771762" src="http://2.bp.blogspot.com/-kKG2ycquT3Y/UJP7h58FIfI/AAAAAAAAAxM/LoNs-fCFWfI/s320/06ada5204a4e0f281f988507ba90ebb4-763234.jpeg" /></a>&nbsp;</div>


<p>Git can use external tools to perform merge and diff:  <br /><div><br /></div><b>Use default tool:</b><br /><pre class="brush: bash;"> <br />git difftool <br />git mergetool<br /></pre><div><br /><b>Use custom tool:</b></div><pre class="brush: bash;">git difftool -t tool_name<br />git mergetool -t tool_name</pre><div><br /><div>There are tons on diff/merge tools, I&rsquo;d like highlight git configuration for three of them:</div></div><div><ul><li><a href="http://www.sourcegear.com/diffmerge/">DiffMerge</a></li><li><a href="http://kdiff3.sourceforge.net/">Kdiff3</a></li><li><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/opendiff.1.html">opendiff</a></li></ul><div></div></div><b>Sample ~/.gitconfig (Windows):</b>  <br /><pre class="brush: bash;"> <br />[difftool &ldquo;kdiff3&rdquo;]<br />     path = D:/Tools/KDiff3/kdiff3.exe<br />     keepBackup = false<br />     trustExitCode = false<br />[mergetool &ldquo;kdiff3&rdquo;]<br />     path = D:/Tools/KDiff3/kdiff3.exe<br />     keepBackup = false<br />     trustExitCode = false<br />[difftool &ldquo;diffmerge&rdquo;]<br />     cmd = \&ldquo;C:/Program Files/SourceGear/Common/DiffMerge/sgdm.exe\&rdquo;  \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo;<br />[mergetool &ldquo;diffmerge&rdquo;]<br />     cmd = \&ldquo;D:/Tools/Git/cmd/git-diffmerge-merge.sh\&rdquo; \&ldquo;$BASE\&rdquo; \&ldquo;$LOCAL\&rdquo; \&ldquo;$REMOTE\&rdquo; \&ldquo;$MERGED\&rdquo;<br />     trustExitCode = false<br /><br />[diff]<br />    tool = kdiff3<br />[merge]<br />    tool = kdiff3<br /></pre><br /><div></div><div><b>Content of&nbsp;git-diffmerge-merge.sh:</b></div><pre class="brush: bash;"> <br />$cat D:/Tools/Git/cmd/git-diffmerge-merge.sh<br />#!/bin/sh<br />localPath=&ldquo;$2&rdquo;<br />basePath=&ldquo;$1&rdquo;<br />remotePath=&ldquo;$3&rdquo;<br />resultPath=&ldquo;$4&rdquo;<br />if [ ! -f $basePath ]<br />then<br />    basePath=&ldquo;~/diffmerge-empty&rdquo;<br />fi<br />&ldquo;C:/Program Files/SourceGear/Common/DiffMerge/sgdm.exe&rdquo; &ndash;merge &ndash;result=&ldquo;$resultPath&rdquo; &ldquo;$localPath&rdquo; &ldquo;$basePath&rdquo; &ldquo;$remotePath&rdquo; &ndash;title1=&ldquo;Mine&rdquo; &ndash;title2=&ldquo;Merged: $4&rdquo; &ndash;title3=&ldquo;Theirs&rdquo;<br /></pre><div><br /></div><div><b>Sample ~/.gitconfig (OS X):</b></div><pre class="brush: bash;"> <br />[diff]<br />    tool = opendiff<br />[merge]<br />    tool = opendiff<br /></pre><div><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/opendiff.1.html">opendiff</a>&nbsp;is bundled with Xcode Tools.</div><div><br /></div><div>Sample usage:</div><pre class="brush: bash;"> <br />$ git difftool -t diffmerge HEAD..HEAD~1<br /></pre>Links: <br /><div><ul><li><a href="http://www.gitshah.com/2010/12/how-to-setup-kdiff-as-diff-tool-for-git.html">How to setup KDiff as the diff tool for GIT</a>&nbsp;</li><li><a href="http://www.devinprogress.info/2012/01/how-to-configure-your-git-diff-or-merge.html">how to configure your git diff or merge tool&nbsp;</a></li><li><a href="http://adventuresincoding.com/2010/04/how-to-setup-git-to-use-diffmerge%20">How to setup Git to use Diffmerge</a></li></ul></div></p>
]]></content>
  </entry>
  
</feed>
