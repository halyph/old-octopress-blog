<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conference | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/conference/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2016-01-09T22:57:29+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Day - Kiev, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/11/08/java-day-kiev-2015-report/"/>
    <updated>2015-11-08T22:14:46+02:00</updated>
    <id>http://halyph.com/blog/2015/11/08/java-day-kiev-2015-report</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/conf/java_day_2015.png"></p>

<p><em>November 6-7, 2015</em> I visited <a href="http://javaday.org.ua/kyiv">Java Day Kyiv</a> conference. This report is for myself just to keep track talks I&rsquo;ve attended.</p>

<a name="Day.1"></a>
<h2>Day 1</h2>

<ul>
<li><p><strong>Get Past the Syntax, the Real Scare&rsquo;s in the Semantics</strong> by <a href="https://twitter.com/@venkat_s">Venkat Subramaniam</a></p>

<blockquote><p>We often hear programmers complain about the syntax, especially when learning a new language. It turns out that, while syntax plays a role in our ability to learn and use languages, the real force we have to deal with is in the semantics. Once we get past the syntax, the semantics is where the real power and the real scare is. Curious to learn more?</p></blockquote></li>
<li><p><strong>Enterprise Integration Patterns Revisited for the Era of Big Data, Internet of Things and Microservices</strong> by <a href="https://twitter.com/kaiwaehner">Kai Waehner</a>  (<a href="http://www.slideshare.net/KaiWaehner/enterprise-integration-patterns-revisited-eip-for-the-era-of-big-data-internet-of-things-iot-and-cloud">slides</a>)</p>

<blockquote><p>Data exchanges between companies increase a lot. Hence, the number of applications, which must be integrated increases, too. The realization of these integration scenarios is a complex and time-consuming task because different applications and services do not use the same concepts, interfaces, data formats and technologies. Originated and published over ten years ago by Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns (EIP) became the world wide de facto standard for describing integration problems. They offer a standardized way to split huge, complex integration scenarios into smaller recurring problems. This session revisits EIPs and gives an overview about the status quo and its relevance regarding modern concepts such as Big Data, Internet of Things or Microservices. Fortunately, EIPs offer more possibilities than just being used for modeling integration problems in a standardized way. Several frameworks and tools already implement these patterns. The developer does not have to implement EIPs on his own. Therefore, the end of the session shows different open source frameworks and proprietary tools available, which can be used for modeling and implementing complex integration scenarios by using the EIPs.</p></blockquote></li>
<li><p><strong>Microservices at Proximus: Netflix OSS and HATEOAS deployed on production</strong> by <a href="https://twitter.com/andreasevers">Andreas Evers</a> (<a href="https://speakerdeck.com/krosan/microservices-with-netflix-oss-and-hypermedia-apis-javaday-kiev">slides</a>)</p>

<blockquote><p>At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. Throughout this session you will learn what the microservices hype is all about, including its benefits and pitfalls based on our experiences of running microservices (including the Netflix OSS) in production at a major company in Belgium. To manage hundreds of microservices you need to apply certain patterns such as circuit breakers, gateways, service registries and so on. You will learn how these patterns work, how they are applied through the Netflix stack and how easy it is to use them in your architecture through code examples and demos. The contracts between these microservices should be well defined and loosely coupled. Using hypermedia as the engine of application state (hateoas), we can benefit from independent evolution and decoupled implementation. How we can implement these using Spring Hateoas, correctly document using Spring Restdocs, integrate with the HAL browser and version using JsonViews will become clear in the second part of this session.</p></blockquote></li>
<li><p><strong>Java in production for Data Mining Research projects</strong> by <a href="https://plus.google.com/110650159101065784429/posts">Alexey Zinoviev</a> (<a href="http://www.slideshare.net/zaleslaw/javadaykiev15-java-in-production-for-data-mining-research-projects">slide</a>)</p>

<blockquote><p>Java is often criticized for hard parsing CSV datasets, poor matrix and vectors manipulations. This makes it hard to easy and efficiently implement certain types of machine learning algorithms. In many cases data scientists choose R or Python languages for modeling and problem solution and you as a Java developer should rewrite R algorithms in Java or integrate many small Python scripts in Java application. But why so many highload tools like Cassandra, Hadoop, Giraph, Spark are written in Java or executed on JVM? What the secret of successful implementation and running? Maybe we should forget old manufacturing approach of dividing on developers and research engineers in production projects? During the report, we will discuss how to build full Java-stack Data Mining application, deploy it, make charts, integrate with databases, how to improve performance with JVM tuning and etc. Attendees of my talk will become familiar with the development and deploy of research Java projects, Hadoop/Spark — based Data Mining tools and will get useful tips about possible integration ways.</p></blockquote></li>
<li><p><strong>How Java developers should test their applications</strong> by <a href="https://twitter.com/xpinjection">Mikalai Alimenkou</a> <em>It was a real code sharing session where were demoed and discussed different testing approaches</em></p></li>
</ul>


<a name="Day.2"></a>
<h2>Day 2</h2>

<ul>
<li><p><strong>The Future [Java] Developer</strong> by <a href="https://twitter.com/brjavaman">Bruno Souza</a>. <strong>Keynote</strong></p>

<blockquote><p>What kind of developer do you want to be? The kind that plans, organizes, prepares, and prepares&hellip; and prepares&hellip; Or the kind that focus on delivering and on transforming your customers&#8217; lives? Software development is a creative and complex work. It is trully &ldquo;Meaningful Work&rdquo;. But&hellip; If we do it right! Java has allowed us to adventure into all kinds of new technologies, while improving our core knowledge. But how does the ever changing technology landscape and things like Cloud Computing, Internet of Things, BigData and DevOps impact our ability to deliver? This talk will take a look at the abilities of the Future [Java] Developer, and how open source, startups and containers play a role into our future careers.</p></blockquote></li>
<li><p><strong>20 Years of Java</strong> by <a href="https://twitter.com/lagergren">Marcus Lagergren</a>. <strong>Keynote</strong></p>

<blockquote><p>This keynote will be a historical trip down memory lane - going through 20 years of Java and JVM implementations. This will be partly from Marcus’s own perspective as one of the architects behind JRockit, with plenty of stories from the trenches, like the benchmarking competitions between BEA/Oracle, Sun and IBM. We will see how Java and the JVM turned into the robust high performance server side platform that it is today, partly through personal observations and partly through a more objective “what a long strange trip this has been”. He will take you back to 1995 in a time machine and slowly bring you to 2014, going over the major Java releases and the runtime innovations made in the JVM side to get us here. Finally, we will do a short trip into the future, even though the future is always fuzzy, to explore what might be coming next. With Java 8, the biggest release in Java history, Java is more vibrant and alive than ever before. This is an evolution that won’t be stopped.</p></blockquote></li>
<li><p><strong>Brand new proximus microservices architecture in production</strong> by <a href="https://twitter.com/andreasevers">Andreas Evers</a> (<a href="https://speakerdeck.com/krosan/lessons-learned-testimonial-of-a-brand-new-microservices-architecture-in-production-javaday-kiev">slides</a>)</p>

<blockquote><p>At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. During this talk we will shed a light on the migration path we went through to get Spring Cloud microservices based on Netflix deployed to production. Migrating from a monolith to containerized microservices doesn&rsquo;t always go smoothly in a rigid regulated enterprise. This is not your regular microservice talk. This is a journey through our struggles to reform both technically and culturally (reverse Conway&rsquo;s law) towards a devops distributed architecture which actually runs on production. E.g. gradually evolving from a manual infrastructure deploying on JBoss and using dedicated apache load balancers, to a PaaS private cloud solution.</p></blockquote></li>
<li><p><strong>One VM To Rule Them All</strong> by <a href="http://www.wuerthinger.net/">Thomas Wuerthinger</a> (<a href="http://www.slideshare.net/ThomasWuerthinger/jazoon2014-slides">slides</a>)</p>

<blockquote><p>Running a multitude of programming languages is a common requirement for large scale applications. This talk presents a virtual machine architecture that allows to handle different programming languages and their interoperability while not sacrificing performance. It bases on partial evaluation of AST interpreters to automatically derive compiled code. A prototype of this architecture has been developed as part of the Graal OpenJDK project (<a href="http://openjdk.java.net/projects/graal/">http://openjdk.java.net/projects/graal/</a>) as well as the TruffleRuby, ZipPy, and FastR open source projects. The talk will be about the general principles behind our VM, special aspects of the Ruby, Python, and R implementations, and our vision for making language interoperability work efficiently.</p></blockquote></li>
<li><p><strong>Microservices Design Patterns for Java Application</strong> by <a href="https://twitter.com/arungupta">Arun Gupta</a> (<a href="https://dzone.com/refcardz/getting-started-with-microservices">DZone Refcard</a>)</p>

<blockquote><p>Microservices allow to decompose a monolithic application into cohesive and multiple decoupled services. Each service is running in its own process and communicate using lightweight mechanisms, such as HTTP API. These services are built around business capabilities or functional decomposition. Microservice also enables true polyglot architecture – both in terms of language and data. It truly allows you to employ the right tool for the right job. Each service is independently deployable and lends very well to fully automated deployment machinery. Can you take an existing Java EE application and decompose it into microservices? What tools are required to enable CI/CD? What are different design patterns for microservices? What tools do you need to manage such services? Is the complexity being pushed around from service implementation to orchestration? This talk will explain some of these concerns and provide guidance on how to leverage microservices in your Java applications.</p></blockquote></li>
<li><p><strong>Scaling Wix with microservices architecture and multi-cloud platform</strong> by <a href="http://www.aviransplace.com/">Aviran Mordo</a> (<a href="http://www.slideshare.net/aviranwix/scaling-wix-with-microservices-and-multi-cloud-2015">slides</a>)</p>

<blockquote><p>Many small startups build their systems on top of a traditional toolset like Tomcat, Hibernate, and MySQL. These systems are used because they facilitate easy development and fast progress, but many of them are monolithic and have limited scalability. So as a startup grows, the team is confronted with the problem of how to evolve the system and make it scalable. Facing the same dilemma, Wix.com grew from 0 to 70 million users in just a few years. Facing some interesting challenges, like performance and availability. Traditional performance solutions, such as caching, would not help due to a very long tail problem which causes caching to be highly inefficient. And because every minute of downtime means customers lose money, the product needed to have near 100% availability. Solving these issues required some interesting and out-of-the-box thinking, and this talk will discuss some of these strategies: building a highly preformant, highly available and highly scalable system; and leveraging microservices architecture and multi-cloud platforms to help build a very efficient and cost-effective system.</p></blockquote></li>
<li><p><strong>From CRUD to Hypermedia APIs with Spring</strong> by <a href="https://twitter.com/flushdia">Vladimir Tsukur</a></p>

<blockquote><p>Typical way to design and expose HTTP API today is a so called CRUD approach: come up with URL templates for resources, map create-read-update-delete operations to HTTP verbs and serialize domain model as JSON. Nice and easy, isn&rsquo;t it? This talk will present limitations of CRUD style APIs and how to address them using &ldquo;real&rdquo; REST and hypermedia, HAL and ALPS. We&rsquo;ll take a look how a set of libraries and tools from Spring helps building these APIs. All the talking is not worth it without an example, so Spring-based application will be our guide. Amazon, PayPal, GitHub and other API providers have already started embracing hypermedia and linking by enhancing their HTTP interfaces. Are you next? #rest #hypermedia #http #api #design #spring #spring-hateoas #java #hal #alps</p></blockquote></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="https://speakerdeck.com/krosan/spring-rest-docs-documenting-restful-apis-using-your-tests">Spring REST Docs - Documenting RESTful APIs using your tests by Andreas Evers</a></li>
<li>Graal Compiler <a href="http://www.slideshare.net/ThomasWuerthinger/2015-cgo-graal">slides</a></li>
<li><a href="http://blog.arungupta.me/microservice-design-patterns/">Microservice Design Patterns</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDay - Lviv, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/09/20/jday-lviv-2015-report/"/>
    <updated>2015-09-20T23:14:46+03:00</updated>
    <id>http://halyph.com/blog/2015/09/20/jday-lviv-2015-report</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/conf/jday.png"></p>

<p><em>September 19, 2015</em> I visited <a href="http://www.jday.com.ua">JDay Lviv</a> Java conference. This report is for myself just to keep track talks I&rsquo;ve attended.</p>

<ul>
<li><p><strong>Put Your Thinking CAP On</strong> by <a href="https://twitter.com/tomerg">Tomer Gabel</a> (<a href="http://www.slideshare.net/holograph/scaling-out-data-stores-and-the-cap-theorem">slides</a>)</p>

<blockquote><p>Consistency, availability and partition tolerance: these seemingly innocuous concepts have been giving engineers and researchers of distributed systems headaches for over 15 years. But despite how important they are to the design and architecture of modern software, they are still poorly understood by many engineers. This session covers the definition and practical ramifications of the CAP theorem; you may think that this has nothing to do with you because you &ldquo;don&rsquo;t work on distributed systems&rdquo;, or possibly that it doesn&rsquo;t matter because you &ldquo;run over a local network.&rdquo; Yet even traditional enterprise CRUD applications must obey the laws of physics, which are exactly what the CAP theorem describes. Know the rules of the game and they&rsquo;ll serve you well, or ignore them at your own peril&hellip;</p></blockquote></li>
<li><p><strong>Microservices and Modularity or the difference between treatment and cure!</strong> by <a href="https://twitter.com/milendyankov">Milen Dyankov</a> (<a href="http://www.slideshare.net/MilenDyankov1/microservices-and-modularity">slides</a>)</p>

<blockquote><p>Everyone is talking about microservices these days! So the question is should you also jump on that bandwagon and why those somewhat older colleagues of yours (yep, those that still remember the EJB 2 revolution) are not that enthusiastic? To help you make the right decisions, this talk will first focus on explaining complexity - the problem microservices claim to solve. It then will concentrate on modular architecture and how it compares to what most people understand by microservices! Live demo will present multiple ways to modularize existing JEE application going from &ldquo;monolithic&rdquo; Glassfish EJB/JSF style app through SpringBoot and OSGi to reach a distributed system with a portal as front-end.</p></blockquote></li>
<li><p><strong>The modern view on implementation of classic design patterns in Java</strong> by <a href="https://twitter.com/xpinjection">Mikalai Alimenkou</a> (<a href="http://www.slideshare.net/alimenkou/the-modern-view-on-implementation-of-classic-design-patterns-in-java">slides</a>, <a href="https://github.com/xpinjection/design-patterns">github</a>)</p>

<blockquote><p>Almost every developer heard about design patterns. They was introduced long time ago to solve particular set of repeating problems in systems of different complexity level and size. But there is an opinion that many design patters just filled holes in the OOP languages of that time. Java as one of them has transformed and improved significantly in the last 10 years. So may be we could review design patterns implementation in modern Java world? Some of them are now may be easily replaced with language idioms, some others may be covered with existing libraries and frameworks. I&rsquo;m sure you know some design patterns that are dead now or became anti-patterns in their initial implementation. Lets make this fun and useful review together!</p></blockquote></li>
<li><p><strong>Functional programming concepts in Java 8: Lambdas &amp;&amp; Monads</strong> by <a href="https://twitter.com/pivovarit">Grzegorz Piwowarek</a> (<a href="http://www.slideshare.net/pivovarit/confitura2015grzegorzpiwowareklambdasmonads">slides</a>)</p>

<blockquote><p>The aim of this presentation is to introduce listener to a functional programming concepts that were introduced in Java 8. Presentation covers lambda expressions, an imperative-programmer-friendly definition of a monad and an application of Java 8 monads in everyday java developer life.</p></blockquote></li>
<li><p><strong>Handling 10k req/sec with 1 core or how you could get even more?</strong> by <a href="https://github.com/doom369">Dmitriy Dumanskiy</a></p>

<blockquote><p>For the past 5 years I have been working on highly-loaded systems, solving problems and optimizing them. In my talk I will explain how the IoT has changed the understanding of high-load and why this trend changes the rules. What are asynchronous sockets and how they work. What are the solutions up to date and why Netty has no competitors? How does Netty work, what are its strengths, weaknesses, pitfalls? How to get the most, out of your code, where to look and what to do? And many other tips and advices on how to optimize your code ranging from simple cases up to choosing a JDBC pool.</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevoxxPL - Krakow, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/06/29/devoxxpl/"/>
    <updated>2015-06-29T13:00:51+03:00</updated>
    <id>http://halyph.com/blog/2015/06/29/devoxxpl</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/2015-06/Devoxx-Poland-2015.png"></p>

<p>This summer I&rsquo;ve decided to attend my 1<sup>st</sup> foreign conference - <a href="http://devoxx.pl">DevoxxPL - Krakow, Poland, 22-25 June 2015</a>. It was very important experience, because I wanted to compare it with our local Ukrainian conferences. Long story short - the quality is equal. Any conference is based on speakers (I&rsquo;d like to be &ldquo;Captain Obvious&rdquo;). And even awesome conference location can&rsquo;t make conference <strong>great</strong>.</p>

<p>So, I&rsquo;ve attended the next talks:</p>

<a name="Day.1"></a>
<h2>Day 1</h2>

<ul>
<li><strong>&ldquo;The Silver Bullet Syndrome&rdquo;</strong> by <a href="http://hadihariri.com/">Hadi Hariri</a></li>
<li><strong>&ldquo;Tips and tricks for clean relational db schemas&rdquo;</strong> by <a href="https://twitter.com/clementd">Clément Delafargue</a></li>
<li><strong>&ldquo;JRebel under the covers - how is it even possible?&rdquo;</strong> by <a href="https://twitter.com/sjmaple">Simon Maple</a></li>
<li><strong>&ldquo;Corporate startup and Scala&rdquo;</strong> by <a href="https://plus.google.com/114974986229567009127/posts">Filip Rogaczewski</a> from <a href="spartez.com">Spartez</a>

<ul>
<li>It was really nice case study about building project with Scala. Pros&amp;cons were &ldquo;honestly&rdquo; highlighted.</li>
</ul>
</li>
<li><strong>&ldquo;Refactoring to Functional&rdquo;</strong> by <a href="http://hadihariri.com/">Hadi Hariri</a></li>
<li><strong>&ldquo;You&rsquo;re an Architect&hellip;Now What?&rdquo;</strong> by <a href="https://twitter.com/ntschutta">Nathaniel Schutta</a></li>
</ul>


<a name="Day.2"></a>
<h2>Day 2</h2>

<ul>
<li><strong>&ldquo;Why software developers should care about deployment and monitoring&rdquo;</strong> by <a href="http://allegrotech.io/authors/michal.kosmulski/">Michał Kosmulski</a> from Allegro Group</li>
<li><strong>&ldquo;Modern Java Component Design with Spring 4.2&rdquo;</strong> by <a href="https://twitter.com/springjuergen">Juergen Hoeller</a> from Pivotal</li>
<li><strong>&ldquo;Make sense of your (BIG) data!&rdquo;</strong> by <a href="https://twitter.com/dadoonet">David Pilato</a> from ElasticSearch

<ul>
<li><a href="http://david.pilato.fr">Blog</a></li>
</ul>
</li>
<li><strong>&ldquo;Building an Asynchronous Reactive NoSQL SDK with RxJava&rdquo;</strong> by <a href="https://about.me/simonbasle">Simon Baslé</a> from Couchbase</li>
<li><strong>&ldquo;Lazy Evaluations&rdquo;</strong> by <a href="https://twitter.com/venkat_s">Venkat Subramaniam</a>

<ul>
<li><a href="http://blog.agiledeveloper.com/2015/06/lazy-in-java_24.html">Blogpost - Lazy in Java</a></li>
</ul>
</li>
<li><strong>&ldquo;Get Past the Syntax, The Real Scare is in the Semantics&rdquo;</strong> by <a href="https://twitter.com/venkat_s">Venkat Subramaniam</a></li>
</ul>


<a name="Day.3"></a>
<h2>Day 3</h2>

<ul>
<li><strong>&ldquo;PubSub++ - few tips that make your life with kafka easier&rdquo;</strong> by <a href="https://twitter.com/DebskiChris">Krzysztof Debski</a> from Allegro Group</li>
<li><strong>&ldquo;Deep dive into Reactive Java&rdquo;</strong> by <a href="https://twitter.com/tkowalcz">Tomasz Kowalczewski</a> from Codewise:

<ul>
<li><a href="http://www.slideshare.net/tkowalcz/deep-dive-reactive-java-devoxxpl">Slides</a></li>
<li><a href="https://github.com/tkowalcz/presentations">Github</a></li>
</ul>
</li>
<li><strong>&ldquo;Event Sourcing &amp; Functional Programming - a pair made in heaven&rdquo;</strong> by <a href="https://twitter.com/rabbitonweb">Paweł Szulc</a>

<ul>
<li><a href="http://www.rabbitonweb.com/">Blog</a></li>
</ul>
</li>
<li><strong>&ldquo;Functional Programming: Technical Reasons to Adapt&rdquo;</strong> by <a href="https://twitter.com/venkat_s">Venkat Subramaniam</a></li>
<li><strong>&ldquo;Why I love Logstash and you should too&rdquo;</strong> by <a href="https://twitter.com/jsvd">João Duarte</a> from ElasticSearch</li>
</ul>


<a name="Summary"></a>
<h2>Summary</h2>

<p>This conference had a huge buzz around microservices. I&rsquo;ve been inspired by some talks and planning to look deeper into:</p>

<ul>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
<li><a href="https://www.elastic.co/products/logstash">Logstash</a></li>
<li><a href="https://www.elastic.co/products/kibana">Kibana</a></li>
<li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li>
<li>and OMG ;-) <a href="http://www.scala-lang.org/">Scala</a></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li>Allegro

<ul>
<li><a href="http://allegrotech.io/open-source/">Open Source</a></li>
<li><a href="http://allegrotech.io/">Tech blog</a></li>
</ul>
</li>
<li><a href="https://www.elastic.co">Elastic</a>

<ul>
<li><a href="https://www.elastic.co/blog">Blog</a></li>
<li>Products:

<ul>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
<li><a href="https://www.elastic.co/products/logstash">Logstash</a></li>
<li><a href="https://www.elastic.co/products/kibana">Kibana</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://babun.github.io/">Babun - a windows shell you will love</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JEEConf - Kiev, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/05/25/jeeconf-kiev/"/>
    <updated>2015-05-25T00:45:51+03:00</updated>
    <id>http://halyph.com/blog/2015/05/25/jeeconf-kiev</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/jeeconf.png"></p>

<p>It happened again - I attend <a href="http://jeeconf.com">JEEConf</a>, May 22-23, 2015. And as usual it was inspiring. Also, I can say that <a href="http://www.scala-lang.org/">&ldquo;Scala&rdquo;</a> was the most dominated buzz word at this conference.</p>

<p>So, I attended the next talks:</p>

<ul>
<li><p><strong>Pragmatic Functional Refactoring with Java 8, by Richard Warburton</strong> Java 8 functional features were introduced here. And were shown how we can refactor OOP program in functional way. I can say it&rsquo;s still a new way of thinking for Java developers.</p></li>
<li><p><strong>Just what are you doing, HotSpot? by Gleb Smirnov</strong> - Gleb gave us several advices for understanding tricky HotSpot behavior and why we should read HotSpot sources.</p></li>
<li><p><strong>Lessons from Implementing a Modern B2C System in Scala, by Yuriy Guts</strong> It was a case study talk about starting new project with Scala. The most interesting  was the issues appeared during project development, team&rsquo;s relationship with Scala, and Scala influences on non-Scala developers.</p></li>
<li><p><strong>Spring Puzzlers, by Evgeny Borisov and Baruch Sadogursky</strong> - We can say that this topic is unique. At least I&rsquo;m not aware of similar talks on other Java conferences. Spring Puzzlers is a variation of classic Java puzzlers, but in Spring. It&rsquo;s really great collection of tricky Spring parts.</p></li>
<li><p><strong>JVM Languages Q&amp;A Panel with Jacek Laskowski, Baruch Sadogursky, Dmytro Mantula, Alexander Podkhalyuzin, Tomer Gabel</strong> We can say that this panel was Groovy vs Scala. There are no other &ldquo;languages&rdquo; on this talk.</p></li>
<li><p><strong>Building an Enterprise-less online bank, Anton Keks</strong> - Anton doesn&rsquo;t love bloated Spring and likes simple and clean solution. He doesn&rsquo;t use Play Framework 2 on Scala because of slow compilation. Instead of this, he told us about his banking platform implemented on <em>Play 1.3</em> and <em>Java 8</em>, and all other items included in his stack.</p></li>
<li><p><strong>Everything you wanted to know about writing async, high-concurrency HTTP applications in Java, but were afraid to ask, by Baruch Sadogursky</strong> - Baruch shared his experience about implementing asynchronous file downloader in Java.</p></li>
<li><p><strong>Scala Rock-Painting, by Dmytro Mantula</strong> - This talk was like Scala puzzlers and/or Scala tricky parts. Speaker also gave us several suggesting how we can learn Scala more effectively via practicing <em>code katas</em> and/or <a href="http://ankisrs.net">Anki</a> flesh cards. This talk highlighted the &ldquo;dark&rdquo; side of Scala. Really, recommend it.</p></li>
<li><p><strong>Groovy under Macroscope, by Sergei Egorov and Baruch Sadogursky</strong> - Sergei demoed us very hacky Groovy library <a href="https://github.com/bsideup/MacroGroovy">MacroGroovy</a>. It&rsquo;s nice to see true Groovy hacker and his creature.</p></li>
<li><p><strong>About concurrency abstractions with Observable’s, Future’s, Akka (actors) in Scala, by Jacek Laskowski</strong> - Jacek did Scala concurrency overview talk and highlighted other non-Akka libraries. It&rsquo;s nice to know that there are other <em>&ldquo;good&rdquo;</em> way to do concurrency without Akka.</p></li>
<li><p><strong>Node.js and Evented I/O Alternatives on the JVM, by Niko Köbler</strong> - I definitely heard about <a href="https://avatar-js.java.net">Avatar.js</a>, but Niko told us that <a href="http://blog.n-k.de/2015/01/is-oracles-avatar-dead.html">Avatar.js is dead</a> and  <a href="http://blog.n-k.de/2015/02/current-status-of-oracles-project-avatar.html">Oracle put development of Avatar on hold</a>, i.e. full stop. As alternative were mentioned two solutions: <strong><a href="http://dynjs.org">DynJS</a></strong> an ECMAScript runtime for the JVM and <strong><a href="http://nodyn.io/">Nodyn</a></strong> - Node.js compatible framework on JVM. It&rsquo;s very interesting to see what will happen with them. <em>Nodyn</em> has strong RedHat support. Let&rsquo;s hope it&rsquo;s much stronger than Avatar.js had from  Oracle.</p></li>
<li><p><strong>Do we need JMS in 21st century? by Mikalai Alimenkou</strong> - The simple statements can be extracted from this talk: a) there are other non-JMS Message queues (MQs); b) we don&rsquo;t need bloated JMS for every tasks; c) use right MQ for right job</p></li>
</ul>


<a name="Summary"></a>
<h2>Summary</h2>

<ul>
<li><p>JEEConf has dedicated JVM track: 50% of this track was occupied by Scala (7 talks). As for me this is the sign ;-) Scala bandwagon reached Ukraine.</p></li>
<li><p><em>Microservices</em> everywhere. If you are not doing <em>microservices</em> - you should :-)</p></li>
</ul>


<p>Yes, JEEConf is simply the best. <a href="http://xpinjection.com/">XP Injection</a> did amazing work.</p>

<p><strong>Have fun, love Java!</strong></p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://halyph.com/2014/05/jeeconf-kiev-2014-report.html">JEEConf - Kiev, 2014 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2013/05/jeeconf-kiev-2013-report.html">JEEConf - Kiev, 2013 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2012/05/this-year-we-had-second-jeeconf.html">JEEConf - Kiev, 2012 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2011/05/jeeconf-kiev-2011-report.html">JEEConf - Kiev, 2011 - Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JEEConf - Kiev, 2014 - Report]]></title>
    <link href="http://halyph.com/2014/05/jeeconf-kiev-2014-report.html"/>
    <updated>2014-05-25T23:41:00+03:00</updated>
    <id>http://halyph.com/2014/05/jeeconf-kiev-2014-report</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/jeeconf.png"></p>

<p>I attended the forth <a href="http://jeeconf.com">JEEConf</a>, May 23-24, 2014. The situation in my country (Ukraine) is difficult that’s why I was amazed to see so many foreign speakers. The organizers did really tremendous work.</p>

<p>This year I divided topics by the next directions:</p>

<a name="Spring"></a>
<h3>Spring</h3>

<ul>
<li><em>Spring 4, Java EE 7 or Both? by Ivar Grimstad</em> &ndash; The main idea of the talk was to show similar and different parts of Spring 4 and Java EE 7. And have an ability easily identify when to use one or another. There are trade-offs and we should be aware of them.</li>
<li><em>Spring configuration: how to do it right (experience report), Mikalai Alimenkou</em> &ndash; Mikalai shared his experience related to Spring configs. Nice talk. I&rsquo;m going to borrow some ideas ;-)</li>
<li><em>Spring the Ripper, by Evgeny Borisov</em> &ndash; It was the most dynamic talk at this conference. The presenter shown Spring life-cycle internals in action. Well done. It should be seen by every Spring dev :-)</li>
</ul>


<a name="Frameworks"></a>
<h3>Frameworks</h3>

<ul>
<li><em>Apache Lucene/Solr Internals, by Anatoliy Sokolenko</em> &ndash; I had no experience with these technologies. And it was really nice intro. Now I have some clue how it works.</li>
<li><em>Streamline your processes with jBPM 6, by Jiri Svitak</em> &ndash; It was an into talk into jBPM 6. I had small experience with competitor framework <a href="http://activiti.org/">Activiti</a>. It&rsquo;s always interesting to see the similar framework&rsquo;s features.</li>
</ul>


<a name="Java.JVM.Compiler"></a>
<h3>Java/JVM/Compiler</h3>

<ul>
<li><em>Java8: Stream Style, by Sergey Kuksenko</em> &ndash; It was Java 8 Stream introduction. There were shown different stream features and approaches.</li>
<li><em><a href="http://shipilev.net/blog/2014/heapdump-is-a-lie/">What Heap Dumps Are Lying To You About, by Aleksey Shipilёv</a></em> &ndash; It&rsquo;s a very special talk related to Java &ldquo;internals&rdquo;. Actually, this talk was about Java object size calculation and what happens under the hood.</li>
<li><em>Reflection Madness, by Heinz Kabutz</em> &ndash; The presenter told us about Java reflection magic, when to use it and why it&rsquo;s dangerous.</li>
</ul>


<a name="Miscellaneous"></a>
<h3>Miscellaneous</h3>

<ul>
<li><em>Tooling of a Test-Driven Developer, by Paweł Lipiński</em> &ndash; There were highlighted two very interesting libraries for TDD on top of JUnit: <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> and <a href="https://code.google.com/p/junitparams/">JUnitParams</a>.Very interesting libraries</li>
<li><em>Web Apps in LISP!? EWW!, by Anatoly Polinsky</em> &ndash; Here was shown different aspects of web development in Clojure for beginners. It&rsquo;s was real intro, but very interesting, especially when you&rsquo;d like to spread your mind into alternative JVM-related communities.</li>
</ul>


<p>It was very productive conference for me. I&rsquo;ve got new portion of inspiration, new knowledge and passion to ordinary things.</p>

<p><img class="center" src="/images/posts/jeeconf2014.jpg"></p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://halyph.blogspot.com/2013/05/jeeconf-kiev-2013-report.html">JEEConf - Kiev, 2013 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2012/05/this-year-we-had-second-jeeconf.html">JEEConf - Kiev, 2012 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2011/05/jeeconf-kiev-2011-report.html">JEEConf - Kiev, 2011 - Report</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
