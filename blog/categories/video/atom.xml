<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Video | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/video/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2016-03-19T15:13:00+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review: Java Brains Spring Framework - Core Spring, by Koushik Kothagal]]></title>
    <link href="http://halyph.com/blog/2012/05/02/review-java-brains-spring-framework/"/>
    <updated>2012-05-02T18:35:00+03:00</updated>
    <id>http://halyph.com/blog/2012/05/02/review-java-brains-spring-framework</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Ik0LB2qKp0g/T5_x_1IbcCI/AAAAAAAAAj8/oAoF2cJighQ/s1600/placeholder_video_spring_projects.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-Ik0LB2qKp0g/T5_x_1IbcCI/AAAAAAAAAj8/oAoF2cJighQ/s1600/placeholder_video_spring_projects.png" /></a></div>


<p>I&rsquo;ve recently watched the subject <a href="http://javabrains.koushik.org/p/spring-framework.html" target="_blank">Java Brains - Spring Framework</a> video tutorials and I must admit that these screencasts were well done. One of the best Java related video tutorials I&rsquo;ve ever seen. Whether you are experienced or beginner developer it worth to watch them all. It&rsquo;s very good sample how to produce qualitative and pleasure to watch screencasts.<br /><br />Let&rsquo;s review each tutorial one-by-one just to have some snapshot what was described there:<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-01-understanding.html"><b>01 - Understanding Dependency Injection</b></a> Dependency Injection (DI) introduction. Here was explained why do we need DI and some conceptual sample.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-02-setting-up.html"><b>02 - Setting Up</b></a> Project Setup. The author avoided using any build tools (Ant, Maven) and set up Eclipse-based project via using Eclipse User Library.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-03-understanding-spring.html"><b>03 - Understanding Spring Bean Factory</b></a> Explained the differences between Factory pattern and Spring Bean Factory without any technical details, plain conceptual overview.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-04-writing-code-using.html"><b>04 - Writing Code Using the Bean Factory</b></a> Actually it&rsquo;s the first video with some <b>code inside</b>. Author use classical approach to introduce Spring DI in practice - wrote simple code without Spring and re-wrote it with Spring. And it has nice effect - it became very descriptive.<br />The next Spring-related things were introduced:<br /><ul><li><i>spring.xml</i></li><li><i>BeanFactory</i></li><li><i>XmlBeanFactory</i> and <i>FileSystemResources</i></li><li>bean instantiation via factory</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-05-applicationcontext.html"><b>05 - ApplicationContext and Property Initialization</b></a> Replaced <i>BeanFactory </i>with <i>ApplicationContext</i>. How to initialize bean property via spring.xml has been shown.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-06-using-constructor.html"><b>06 - Using Constructor Injection</b></a> Depicted different ways of constructor injection:<br /><ul><li>plain</li><li>index based</li><li>type based</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-07-injecting-objects.html"><b>07 - Injecting Objects</b></a> Created simple object and shown how to inject object dependency (i.e. was used&nbsp; &ldquo;property&rdquo; tag and &ldquo;ref&rdquo; attribute, <i>&lt;property name=&ldquo;propname&rdquo; ref=&ldquo;beanref&rdquo; /&gt;</i><br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-08-inner-beans-aliases.html"><b>08 - Inner Beans, Aliases and idref</b></a> The topic has pretty descriptive content, nothing more was here.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-09-initializing.html"><b>09 - Initializing Collections</b></a> Here List was used as sample to initialize bean with collection. Stated that the same approach should be applied to Set and Map.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-10-bean-autowiring.html"><b>10 - Bean Autowiring</b></a> Configured autowiring via spring.xml. Described pros&amp;cons:<br /><ul><li>byName</li><li>byType</li><li>constructor</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-11-understanding-bean.html"><b>11 - Understanding Bean Scopes</b></a> Explained bean scopes:<br /><ul><li>Singleton</li><li>Prototype</li><li>Request</li><li>Session</li><li>Global Session</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-12-using.html"><b>12 - Using ApplicationContextAware</b></a> Nicely shown how to use <i>ApplicationAwareContext </i>and BeanNameAware interfaces.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-13-bean-definition.html"><b>13 - Bean Definition Inheritance</b></a> Nice Spring feature is bean definition inheritance and how it is different from OOP inheritance. Explained when to use it and what is the benefits. Introduced bean <i>abstract </i>and&nbsp; <i>parent</i> attributes and when to use it.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-14-lifecycle-callbacks.html"><b>14 - Lifecycle Callbacks</b></a> Introduced <i>init </i>and <i>destroy </i>methods in different incarnations:<br /><ul><li>InitializingBean and DisposableBean interfaces</li><li>bean tag attributes: <i>init-method</i> and <i>destroy-method</i> </li><li>bean<i><b>s</b></i> tag attributes: <i>default-init-method</i> and <i>default-</i><i>destroy-method</i></li><li>Added<i> AbstractApplicationCantext </i>to switch on <i>redisterShutdownHook</i>()</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-15-writing.html"><b>15 - Writing a BeanPostProcessor</b></a> Shown how to implement custom <i>BeanPostProcessor</i><br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-16-writing.html"><b>16 - Writing a BeanFactoryPostProcessor</b></a> Shown how to implement:<br /><ul><li>custom <i>BeanFactoryPostProcessor</i></li><li>introduces properties for spring.xml via adding <i>PropertyPlaceholderConfigurer</i> (implementation of <i>BeanFactoryPostProcessor</i>)</li></ul>Explained when and why to use <i>BeanFactoryPostProcessor</i>s. Explained the differences between <i>BeanFactoryPostProcessor</i>s and <i>BeanPostProcessor.</i><br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-17-coding-to-interfaces.html"><b>17 - Coding To Interfaces</b></a> Rewritten the initial demo project to support interface based design, the right way for developing Spring applications :-) <br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-18-introduction-to.html"><b>18 - Introduction to Annotations and the Required Annotation</b></a> Added @Required annotation in demo project and activated it via adding bean post processor <i>RequiredAnnotationBeanPostProcessor</i>.<br /><br />  <a href="http://javabrains.koushik.org/2011/08/spring-tutorial-19-autowired-annotation.html"><b>19 - The Autowired Annotation</b></a> Shown how to use:<br /><ul><li><i>@Autowire</i> and <i>@Qualifier</i> annotations</li><li><i>&lt;context:annotation-config /&gt;</i> in<i> spring.xml</i></li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-20-some-jsr-250.html"><b>20 - Some JSR-250 Annotations</b></a> Shown how to use:<br /><ul><li><i>@Resource</i> annotation</li><li><i>@Resource</i> annotation with parameters</li><li><i>@PostConstruct </i>annotation</li><li><i>@PreDestroy </i>annotation</li></ul><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-21-component-and.html"><b>21 - Component and Stereotype Annotations</b></a> Added the <i>&lt;context:component-scan base-packaeg=&ldquo;package&rdquo; /&gt;</i> to spring.xml. Shown how to use <i>@Component</i> annotation and what rules applied to this annotation. Also, were mentioned other Spring stereotypes.<br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-22-using-messagesource.html"><b>22 - Using MessageSource To Get Text From Property Files</b></a> Shown how to use <i>ResourceBundleMessageSource</i> to get properties. <br /><br /><a href="http://javabrains.koushik.org/2011/08/spring-tutorial-23-event-handling-in.html"><b>23 - Event Handling in Spring</b></a> Very nice introduction tutorial into the subject: even definition, event listeners and even publishing on application level.<br /><br />Ofcource, these tutorial are only intro and you should read Spring Documentation to gain the Spring &ldquo;black&rdquo; magic. But, it&rsquo;s good start point.</p>
]]></content>
  </entry>
  
</feed>
