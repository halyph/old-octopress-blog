<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-01-03T02:29:55+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy Notes: Pretty Print JSON From the Command Line]]></title>
    <link href="http://halyph.com/2014/08/groovy-notes-pretty-print-json-from.html"/>
    <updated>2014-08-13T21:28:00+03:00</updated>
    <id>http://halyph.com/2014/08/groovy-notes-pretty-print-json-from</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/groovy.png">
JSON pretty print it&rsquo;s common task while working with JSON from command line. There are many ways of doing this via Python, Ruby, node.js, but here I&rsquo;d like to concentrate on Groovy one-liner:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span><span class="p">&amp;</span>ldquo<span class="p">;</span>foo<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>lorem<span class="p">&amp;</span>rdquo<span class="p">;</span>, <span class="p">&amp;</span>ldquo<span class="p">;</span>bar<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>ipsum<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> groovy -e <span class="p">&amp;</span>lsquo<span class="p">;</span>import groovy.json.*<span class="p">;</span> println JsonOutput.prettyPrint<span class="o">(</span>System.in.text<span class="o">)</span><span class="p">&amp;</span>rsquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>foo<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>lorem<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>bar<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>ipsum<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can slightly improve this one-liner via adding shell alias:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">pp</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>groovy -e <span class="p">&amp;</span>lsquo<span class="p">;</span>import groovy.json.*<span class="p">;</span> println JsonOutput.prettyPrint<span class="o">(</span>System.in.text<span class="o">)</span><span class="p">&amp;</span>rsquo<span class="p">;&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span><span class="p">&amp;</span>ldquo<span class="p">;</span>foo<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>lorem<span class="p">&amp;</span>rdquo<span class="p">;</span>, <span class="p">&amp;</span>ldquo<span class="p">;</span>bar<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>ipsum<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> pp
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also, we might use Groovy script which might be handy for simple JSON validation also:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span> <span class="n">cat</span> <span class="n">prettyJson</span><span class="o">.</span><span class="na">groovy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.json.*</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;try {</span>
</span><span class='line'><span class="s">  println JsonOutput.prettyPrint(System.in.text)</span>
</span><span class='line'><span class="s">} catch (JsonException e) {</span>
</span><span class='line'><span class="s">  println &amp;ldquo;ERROR: Not valid JSON&amp;rdquo;</span>
</span><span class='line'><span class="s">  System.exit(1)</span>
</span><span class='line'><span class="s">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">$</span> <span class="n">echo</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;{&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nl">foo:</span> <span class="o">&amp;</span><span class="err">#</span><span class="mi">8220</span><span class="o">;</span><span class="n">lorem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="o">|</span> <span class="n">groovy</span> <span class="n">prettyJson</span><span class="o">.</span><span class="na">groovy</span>
</span><span class='line'><span class="nl">ERROR:</span> <span class="n">Not</span> <span class="n">valid</span> <span class="n">JSON</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Programming Groovy 2: Dynamic Productivity for the Java Developer]]></title>
    <link href="http://halyph.com/2014/07/review-programming-groovy-2-dynamic.html"/>
    <updated>2014-07-23T01:19:00+03:00</updated>
    <id>http://halyph.com/2014/07/review-programming-groovy-2-dynamic</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/book_programming_groovy2.jpg"></p>

<p>This book is well balanced around Groovy language. I would say there is minimal required knowledge regarding the language. The author (Venkat Subramaniam) fluently covered every important aspect of Groovy. But this book is for experienced developer. The accents were made only in scope of Groovy language and totally avoided any &ldquo;intro&rdquo; programming talks, which is actually cool.</p>

<p>Here is the book&rsquo;s structure:</p>

<ul>
<li><strong>Beginning Groovy</strong> - this part is dedicated to Groovy language features, especially from Java perspective. Reading this part I was building the parallel to Ruby trying to compare these languages. The main difference which I found it&rsquo;s only syntax &ldquo;sugar&rdquo;. I.e. conceptually these two language are very similar.&nbsp;</li>
<li><strong>Using Groovy</strong> - this is a pragmatic part where were highlighted the next topics: Groovy GDK, XML Processing, working with DB, &nbsp;working with Java.</li>
<li><strong>Dynamic features (MOPing Groovy)</strong>&nbsp;- here were highlighted two main metaprogramming approaches: run-time and compile-time metaprogramming. Very interesting part. For me Groovy metaprogramming facilities are much clear comparison to Ruby metaprogramming.</li>
<li><strong>Using Metaprogramming</strong> - it&rsquo;s pragmatic part where were highlighted the applications for Groovy metaprogramming features. It&rsquo;s very important to note that Groovy contains many pre-bundled classes/modules which are really nice samples of metaprogramming Groovy&rsquo;s features.<div>I highly recommend this book to everybody who is interested in Groovy language. This book highlights Groovy dynamic features.</div></li>
</ul>


<h2>References:</h2>

<ul>
<li><a href="http://www.amazon.com/Programming-Groovy-Productivity-Developer-Pragmatic/dp/1937785300/">Programming Groovy 2: Dynamic Productivity for the Java Developer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Making Java Groovy]]></title>
    <link href="http://halyph.com/2014/03/review-making-java-groovy.html"/>
    <updated>2014-03-17T23:27:00+02:00</updated>
    <id>http://halyph.com/2014/03/review-making-java-groovy</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/book_making_java_groovy.jpg"></p>

<p>I can say that this book is special. It’s not a Groovy “cookbook”.
You won’t find tons of tricky recipes around Groovy. You won’t learn
black art of Groovy meta programming. Strange, doesn’t it. :-) Then why
you should read it. Or who should read this book?</p>

<p>The answer is very simple - Every Java programmer who wants to be productive in daily work must read this book. The author <a href="http://www.amazon.com/Ken-Kousen/e/B003NUYREE/ref=ntt_athr_dp_pel_1">Ken Kousen</a> did really great job showing different aspects of Groovy as a language, tool and ecosystem. The reader will understand that there are tons of different appliances of Groovy:</p>

<ul>
<li>Groovy scripting (@Grab)</li>
<li>Gradle, Maven/Ant automation</li>
<li>Groovy as prototyping language: REST, DB, etc.</li>
<li>Web micro-frameworks</li>
<li>Testing: Spock, mocks</li>
<li>Java/Groovy integration</li>
<li>JSON/XML manipulation</li>
</ul>


<p>The most important thing is to understand that Groovy should <strong>NOT</strong> be
used only with Grails. Java programmers must re-discover Groovy as super
pragmatic language. Everything which is written in Java can be written
in Groovy. Save your time and automate with Groovy.</p>

<h2>References:</h2>

<ul>
<li> <a href="http://www.manning.com/kousen/">Making Java Groovy, by Ken Kousen</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
