<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reflection | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/reflection/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2016-03-19T15:13:00+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Reflection: Invoke Constructor Issue]]></title>
    <link href="http://halyph.com/blog/2011/10/21/java-reflection-invoke-constructor/"/>
    <updated>2011-10-21T13:37:00+03:00</updated>
    <id>http://halyph.com/blog/2011/10/21/java-reflection-invoke-constructor</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s imagine we have the next classes:<br /><br /><pre class="brush: java;">package test.clazz;<br /><br />public class First {<br /> private FirstArg arg;<br /><br /> public FirstArg getArg() {<br />  return arg;<br /> }<br /><br /> public First (FirstArg arg) {<br />  this.arg = arg;<br />  System.out.println(&ldquo;First() - constructor&rdquo;);<br /> }<br />}<br /><br />public class FirstArg {<br /> public FirstArg() {<br />  System.out.println(&ldquo;FirstArg.FirstArg()&rdquo;);<br /> }<br />}<br /><br />public class SecondArg  extends FirstArg{<br /> public SecondArg() {<br />  System.out.println(&ldquo;SecondArg.SecondArg()&rdquo;);<br /> }<br />}<br /></pre>And we can easily instantiate <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">First</span> class with <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">FirstArg<span style="font-family: inherit;"> </span></span>or <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">SecondArg</span>:<br /><pre class="brush: java;">First f1Old = new First(new FirstArg());<br />First f2Old = new First(new SecondArg());<br />System.out.println(f1Old.getArg().getClass());<br />System.out.println(f2Old.getArg().getClass());<br /></pre>We&rsquo;ll get the next output: <br /><pre class="brush: java;">FirstArg.FirstArg()<br />First() - constructor<br />FirstArg.FirstArg()<br />SecondArg.SecondArg()<br />First() - constructor<br />class test.clazz.FirstArg<br />class test.clazz.SecondArg<br /></pre><br />Now, we have to instantiate  <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">First</span> class with <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">FirstArg<span style="font-family: inherit;"> </span></span>or <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">SecondArg</span>, but via Java reflection:<br /><br /><pre class="brush: java;">public final class ConstructionUtil {<br /> public static Object instantiateClassOld(String className, Object iView) {<br />  try {<br />   Class iViewClass = iView.getClass();<br />   Class clazz = Class.forName(className);<br /><br />   Constructor ctor = clazz.getDeclaredConstructor(iViewClass);<br />   ctor.setAccessible(true);<br />   return ctor.newInstance(iView);<br />  } catch (Exception e) {<br />   e.printStackTrace();<br />   return null;<br />  }<br /> }<br />}&nbsp;</pre>Check reflection based class instantiation: <pre class="brush: java;">Object cls = instantiateClassOld(&ldquo;test.clazz.First&rdquo;, new FirstArg());<br />First f1 = (First) cls;<br />Object cls2 = instantiateClassOld(&ldquo;test.clazz.First&rdquo;, new SecondArg());<br />First f2 = (First) cls2;<br />System.out.println(f1.getArg().getClass());<br />System.out.println(f2.getArg().getClass());<br /></pre>And we&rsquo;ll get Exception: <br /><pre class="brush: java;">FirstArg.FirstArg()<br />First() - constructor<br />FirstArg.FirstArg()<br />SecondArg.SecondArg()<br />java.lang.NoSuchMethodException: test.clazz.First.<init>(test.clazz.SecondArg)<br /> at java.lang.Class.getConstructor0(Unknown Source)<br /> at java.lang.Class.getDeclaredConstructor(Unknown Source)<br /> at test.ConstructionUtil.instantiateClassOld(ConstructionUtil.java:63)<br /> at test.ConstructionUtil.main(ConstructionUtil.java:22)<br /></init></pre>Reflection mechanism can&rsquo;t find <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">First(SecondArg arg) </span>constructor.<br />We have to patch <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">instantiateClassOld </span>method like this:<br /><br /><pre class="brush: java;">public final class ConstructionUtil {<br /> public static Object instantiateClassNew(String className, Object iView) {<br />  try {<br />   Class iViewClass = iView.getClass();<br />   Class clazz = Class.forName(className);<br />   try {<br />    Constructor ctor = clazz.getDeclaredConstructor(iViewClass);<br />    ctor.setAccessible(true);<br />    return ctor.newInstance(iView);<br /><br />   } catch (NoSuchMethodException e) {<br />    Constructor[] constructors = clazz.getDeclaredConstructors();<br />    for (Constructor c : constructors) {<br />     if (c.getParameterTypes().length &gt; 1)<br />      continue;<br />     Class type = c.getParameterTypes()[0];<br />     if (type.isAssignableFrom(iView.getClass())) {<br />      return c.newInstance(type.cast(iView));<br />     }<br /><br />    }<br />   }<br />   return null;<br /><br />  } catch (Exception e) {<br />   e.printStackTrace();<br />   return null;<br />  }<br /> }<br />}&nbsp;</pre>And run it again: <br /><pre class="brush: java;">Object cls = instantiateClassNew(&ldquo;test.clazz.First&rdquo;,new FirstArg());<br />First f1 = (First) cls;<br />Object cls2 = instantiateClassNew(&ldquo;test.clazz.First&rdquo;,new SecondArg());<br />First f2 = (First) cls2;<br />System.out.println(f1.getArg().getClass());<br />System.out.println(f2.getArg().getClass());<br /></pre>Output: <br /><pre class="brush: java;">FirstArg.FirstArg()<br />First() - constructor<br />FirstArg.FirstArg()<br />SecondArg.SecondArg()<br />First() - constructor<br />class test.clazz.FirstArg<br />class test.clazz.SecondArg<br /></pre> We should be careful when invoke methods via reflection with polymorphic arguments.</p>
]]></content>
  </entry>
  
</feed>
