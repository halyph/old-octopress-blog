<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Knowledge Is Everything]]></title>
  <link href="http://halyph.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-11-25T00:59:42+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scripting in Scala]]></title>
    <link href="http://halyph.com/blog/2015/02/02/scripting-in-scala/"/>
    <updated>2015-02-02T00:18:00+02:00</updated>
    <id>http://halyph.com/blog/2015/02/02/scripting-in-scala</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/blog/scala.png"></p>

<p>Scala language compiles sources code to Java bytecode.  But, it has some nice scripting facilities. Let&rsquo;s review them.</p>

<p>So, the <code>scala</code> command is also a shell-script wrapper around the java command.</p>

<p>According to official <a href="http://www.scala-lang.org/files/archive/nightly/docs-2.10.1/manual/html/scala.html">scala utility</a> documentation (here highlighted only post-related notes):</p>

<blockquote><p><code>scala [ &lt;option&gt; ]... [ &lt;torun&gt; &lt;argument&gt;... ]</code></p>

<p>The <code>scala</code> utility runs Scala code using a Java runtime environment.</p>

<p>If a <strong>script</strong> file is specified to run, then the file is read and all Scala statements and declarations in the file are processed in order. Any arguments specified will be available via the argsvariable.</p>

<p>Script files may have an <strong>optional header</strong> that is ignored if present. There are two ways to format the header: either beginning with #! and ending with !#, or beginning with ::#! and ending with ::!#.</p>

<p>Such a header must have each header boundary start at the beginning of a line. Headers can be used to make stand-alone script files, as shown in the examples below.</p>

<p>Here is a complete Scala script (<strong>check.sh</strong>) for Unix:</p>

<pre><code>#!/bin/sh
exec scala "$0" "$@"
!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre>

<p>Here is a complete Scala script (<strong>check.bat</strong>) for MS Windows:</p>

<pre><code>::#!
@echo off
call scala %0 %*
goto :eof
::!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre>

<p>If you want to use the compilation cache to speed up multiple executions of the script (<strong>check.sh</strong>), then add <strong>-savecompiled</strong> to the scala command:</p>

<pre><code>#!/bin/sh
exec scala -savecompiled "$0" "$@"
!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre></blockquote>

<p>These tricks give us an ability to run Scala script as plain shell script. Also, based on the setting above this script can have input parameters and <em>almost</em> cross-platform (see script header differences for Linux <strong>.vs.</strong> Windows).</p>

<p>Now, we should save the mentioned above code snippet in some file (e.g. <strong>check.sh</strong>) and make it executable. This script can be run as any Linux shell script <code>./check.sh</code> (<code>check.bat</code> - Windows).</p>

<a name="Scala.utility.internals"></a>
<h2>Scala utility internals</h2>

<a name="Linux"></a>
<h3>Linux</h3>

<p>Linux script header uses the next items:</p>

<ul>
<li><code>#!</code> it&rsquo;s <a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> interpreter directive</li>
<li><code>exec</code> is used to run <code>scala</code> without creation new process. Commands which go right after <code>exec</code> will not be executed</li>
<li><code>!#</code> is simple marker for <code>scala</code> utility (see notes below)</li>
</ul>


<p>E.g.
This script
&#8220;`</p>

<a name="L...bin.sh"></a>
<h1>! /bin/sh</h1>

<p>echo Header
exec echo
!#
echo Body
<code>
will have the next output
</code>
$ ./test.sh
Header
&#8220;`</p>

<p>We will get error in case <code>exec</code> is removed:
&#8220;`</p>

<a name="L...bin.sh"></a>
<h1>! /bin/sh</h1>

<p>echo Header
!#
echo Body
<code>
Output
</code>
$ ./test.sh
Header
./test.sh: line 4: !#: command not found
Body</p>

<pre><code>### Windows
Windows batch script header uses the next items:

- `::` is a remark without displaying or executing that line when the batch file is run (see [Information on batch files]).
- `::#!`  is simple marker for `scala` utility (see notes below)
- `@echo off` disable echo
- `call` calls one batch program from another.
- `goto :eof` go to end of file
- `::!#` is simple marker for `scala` utility (see notes below)

The OS-specific script settings were identified, now let's dive deeper to understand how `scala` utility works.

### `scala` internals
This utility performs the next flow to run script:

1. Run `scala.tools.nsc.MainGenericRunner#process` and identify run target "as Script" (there are other targets) `ScriptRunner.runScriptAndCatch(settings, thingToRun, command.arguments)` 
2. `ScriptRunner` creates temp file `File.makeTemp("scalacmd", ".scala")`
3. Run compiler and clean script header
</code></pre>

<p>class ScriptRunner extends HasCompileSocket {
&hellip;
  private def withCompiledScript(
      settings: GenericRunnerSettings,
      scriptFile: String)
      (handler: String => Boolean): Boolean =
    {
      def mainClass = scriptMain(settings)</p>

<pre><code>     val compiler = newGlobal(settings, reporter)
     new compiler.Run compile List(scriptFile)
</code></pre>

<pre><code></code></pre>

<p>class Global
    /<em>* If this compilation is scripted, convert the source to a script source. </em>/
    private def scripted(s: SourceFile) = s match {
      case b: BatchSourceFile if settings.script.isSetByUser => ScriptSourceFile(b)
      case _ => s
    }</p>

<pre><code>/** Compile abstract file until `globalPhase`, but at least
 *  to phase "namer".
 */
def compileLate(file: AbstractFile) {
  if (!compiledFiles(file.path))
    compileLate(new CompilationUnit(scripted(getSourceFile(file))))
}
</code></pre>

<pre><code>
4. Cleanup shell script (remove header) via `SourceFile`. Now, it's clear why script's header have such *strange* closing markers (see line 21, `content drop headerLen` - actual header remove)
</code></pre>

<p>object ScriptSourceFile {
  /<em><em> Length of the script header from the given content, if there is one.
   *  The header begins with &ldquo;#!&rdquo; or &ldquo;::#!&rdquo; and ends with a line starting
   *  with &ldquo;!#&rdquo; or &ldquo;::!#&rdquo;.
   </em>/
  def headerLength(cs: Array[Char]): Int = {
    val headerPattern = Pattern.compile(&ldquo;&rdquo;&ldquo;((?m)<sup>::</sup>?!#.</em>|^.<em>/env .</em>)(\r|\n|\r\n)&rdquo;&ldquo;&rdquo;)
    val headerStarts  = List(&ldquo;#!&rdquo;, &ldquo;::#!&rdquo;)</p>

<pre><code>if (headerStarts exists (cs startsWith _)) {
  val matcher = headerPattern matcher cs.mkString
  if (matcher.find) matcher.end
  else throw new IOException("script file does not close its header with !# or ::!#")
}
else 0
</code></pre>

<p>  }</p>

<p>  def apply(file: AbstractFile, content: Array[Char]) = {
    val underlying = new BatchSourceFile(file, content)
    val headerLen = headerLength(content)
    val stripped = new ScriptSourceFile(underlying, content drop headerLen, headerLen)</p>

<pre><code>stripped
</code></pre>

<p>  }
&#8220;`</p>

<a name="Add.libraries.to.Scala.script"></a>
<h2>Add libraries to Scala script</h2>

<p>Scala script libraries (<strong>jar</strong>s) can be added in script&rsquo;s header section:
&#8220;`</p>

<a name="L..bin.sh"></a>
<h1>!/bin/sh</h1>

<p>exec scala -classpath &ldquo;lib/lib.1.jar:lib/lib.2.jar&rdquo; &ldquo;$0&rdquo; &ldquo;$@&rdquo;
!#
&#8220;`</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>There is nothing magical in Scala interpretation. Every single peace of code must be compiled. Such interesting <em>scripting</em> approach can be applied to Java as well.</p>

<p>Unfortunately, Scala is not looks like nice scripting language (because it&rsquo;s <strong>not</strong> designed for this use case). It will be uncomfortable &ldquo;scripting&rdquo; in Scala without IDE.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://timperrett.com/2011/08/01/system-scripting-with-scala/">System Scripting with Scala</a></li>
<li><a href="http://www.scala-lang.org/files/archive/nightly/docs-2.10.1/manual/html/scala.html">scala utility</a></li>
<li><a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></li>
<li><a href="http://www.computerhope.com/batch.htm">Information on batch files</a></li>
<li>Scala Sources:

<ul>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/compiler/scala/tools/nsc/ScriptRunner.scala#">ScriptRunner.scala</a></li>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/reflect/scala/reflect/internal/util/SourceFile.scala">SourceFile.scala</a></li>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/compiler/scala/tools/nsc/Global.scala">Global.scala</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT Booze Meetup #2: Scala, Clojure, Groovy]]></title>
    <link href="http://halyph.com/blog/2011/07/30/it-booze-meetup-2-scala-clojure-groovy/"/>
    <updated>2011-07-30T16:11:00+03:00</updated>
    <id>http://halyph.com/blog/2011/07/30/it-booze-meetup-2-scala-clojure-groovy</id>
    <content type="html"><![CDATA[<p><br />Today, I had a chance to attend local user group <a href="https://sites.google.com/site/itboozeinif/home">IT Booze</a>. It was the second meetup and it was very interesting, because of topics which were under discussion: Scala, Clojure And Groovy. I love such events especially in my town. :-)
<br />
<br />I&rsquo;d like to share my <i>reflections </i>regarding these cool languages.
<br />
<br />As you know these languages are very popular on JVM (of cause not so popular as Java :-). And I&rsquo;m sure every passionate Java/JVM developer has been thinking &ldquo;what&rsquo;s the <b>Next</b> <b>Big Language</b>&rdquo;. It&rsquo;s really hard to choose the next one.
<br />
<br />So, here is a short &ldquo;brain snapshot&rdquo;:
<br /></p>

<ol>
    <li>Scala and Clojure are great languages with huge amount of interesting features, but to master them we need to use Scala (or Clojure) on daily basis.</li>
    <li>Scala appeared as complex language. I think it requires a <span class="st">steeper learning curve then Clojure or Groovy. It means we must invest much, much more.</span></li>
    <li><span class="st">Clojure has lisp syntax, but innovative concurrency concept is worth to look into. I say <b>lisp</b>, because it might be a stopper for someone to evaluate it as a next big language.</span></li>
    <li><span class="st">Clojure and functional programming require to &#8220;patch&#8221; our way of thinking. And it can be difficult.</span></li>
    <li><span class="st">Groovy is agile language. We (Java developers) can start using it right away. I think we should invest more in Groovy just to boost our productivity in: scripting, testing, automation routine work, etc. It doesn&#8217;t require big investments and we can learn as we go.</span></li>
</ol>


<p><span class="st"> So, here is outcome from this meetup:</span>
<br /></p>

<ul>
    <li><span class="st">start using Groovy</span></li>
    <li><span class="st">look into Clojure concepts</span></li>
    <li><span class="st">postpone Scala for now</span></li>
</ul>


<p><span class="st">Could you please share your thoughts regarding this?</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Choose Between Scala and Clojure?]]></title>
    <link href="http://halyph.com/blog/2011/06/01/how-to-choose-between-scala-and-clojure/"/>
    <updated>2011-06-01T01:55:00+03:00</updated>
    <id>http://halyph.com/blog/2011/06/01/how-to-choose-between-scala-and-clojure</id>
    <content type="html"><![CDATA[<div style="text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-TSZUHnPf1Vo/TeVzTeSMD4I/AAAAAAAAAbg/Zy19YqzOfTo/s1600/scala-icon.png" /><span style="font-size: x-large;"> vs. </span>
    <a href="http://4.bp.blogspot.com/-Z2uFWB3np-Q/TeVzZOmDHTI/AAAAAAAAAbk/sOJtanqor7U/s1600/clojure-icon.gif" imageanchor="1"><img border="0" src="http://4.bp.blogspot.com/-Z2uFWB3np-Q/TeVzZOmDHTI/AAAAAAAAAbk/sOJtanqor7U/s1600/clojure-icon.gif" /></a>
</div>


<p><br />I think it&rsquo;s very popular question nowadays. The Java-haters produce so many buzz around this. So, want you or not, but You passively have been trying to choose the <i>Java.next()</i>.
<br />
<br />I&rsquo;ve found several interesting posts which cover pretty much about this subject:
<br /><br /><strong>by Stephan Schmidt</strong>
<br /></p>

<ul>
    <li><a href="http://codemonkeyism.com/scala-vs-clojure/%20"><span id="goog_1314162347"></span>Scala vs. Clojure<span id="goog_1314162348"></span></a></li>
    <li><a href="http://codemonkeyism.com/clojure-scala-part-2/"><span id="goog_1314162354"></span>Clojure vs Scala, Part 2<span id="goog_1314162355"></span></a></li>
    <li><a href="http://codemonkeyism.com/scala-vsclojure-part-3-similarities">Scala vs.Clojure, part 3 – the similarities</a></li>
    <li><a href="http://codemonkeyism.com/scala-vs-clojure-flawed-loc-comparison/">Anatomy of a Flawed Clojure vs. Scala LOC Comparison</a></li>
</ul>


<p><strong>by Lau B. Jensen </strong>
<br /></p>

<ul>
    <li><a href="http://www.bestinclass.dk/index.clj/2010/04/clojure-scala-similarities-twins-separated-at-birth.html">Clojure &amp; Scala Similarities - Twins separated at birth?</a></li>
    <li><a href="http://www.bestinclass.dk/index.clj/2009/09/scala-vs-clojure-lets-get-down-to-business.html">Scala Vs Clojure - Lets get down to business</a></li>
    <li><a href="http://www.bestinclass.dk/index.clj/2009/09/scala-vs-clojure-round-2-concurrency.html">Scala vs Clojure - Round 2: Concurrency!</a></li>
</ul>


<p><strong>Others</strong>
<br /></p>

<ul>
    <li><a href="http://gregosuri.com/on-scala-vs-clojure-what-the-market-thinks">On &#8220;Scala Vs Clojure&#8221;, What the market thinks. </a></li>
    <li><a href="http://mattstine.com/2009/04/02/loty-time-again-scala-or-clojure">LOTY Time Again: Scala or Clojure?!?! </a></li>
</ul>


<p><i>Hint</i>: Try to read comments to these posts, there are very interesting discussions. Some of them are even more useful than the actual post(s)/article(s).
<br />
<br />These articles don&rsquo;t give you any advices or strong opinions which language is the best. But, it&rsquo;s a good start point, for sure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JEEConf - Kiev, 2011 - Report]]></title>
    <link href="http://halyph.com/blog/2011/05/24/jeeconf-kiev-2011-report/"/>
    <updated>2011-05-24T00:41:00+03:00</updated>
    <id>http://halyph.com/blog/2011/05/24/jeeconf-kiev-2011-report</id>
    <content type="html"><![CDATA[<p>I had a chance to attend the first and totally dedicated to <a href="http://jeeconf.com/">Java conference in Kiev</a> (May 21, 2011).
<br />It was a great. The atmosphere was amazing. The organization was good, really good. The most noticeable thing was that almost every presentation was based on real problem, no metaphysical stuff :-)
<br />There were three stages, that&rsquo;s why I couldn&rsquo;t attend every talk and that&rsquo;s a pity.
<br />
<br />Here is a short overview of all attended talks:
<br />
<br /><strong>1. &ldquo;What Riding the <a href="http://camel.apache.org/">Camel </a>can do to make integration easier for you&rdquo; by Claus Ibsen.</strong>
<br />I had an idea what the Camel is, but this presentation gave me the &ldquo;big picture&rdquo;. Actually, the speaker has been well prepared and known the presentation technique very well. He showed all major aspects of Camel framework and explain its purpose.
<br />
<br />He&rsquo;s shown the several Camel&rsquo;s DSLs: XML-based, Java and Scala. That short code snippets were really cool and clean. So, I&rsquo;ve added into my todo list &ldquo;the Camel DSL digging&rdquo; ;-)
<br />
<br /><strong>2. &ldquo;The <a href="http://www.scala-lang.org/">Scala </a>and <a href="http://www.gridgain.com/">GridGain </a>usage for the distributed systems with high efficiency&rdquo; by Renat Ahmerov.</strong>
<br />This talk and master-class inspired me to start Scala learning. I&rsquo;ve never seen the cloud computing in action. But during that master-class was created real application for distributed computing. And the code base was so tiny and clean, so my heart falling in love to this language. The last time I had had the similar feeling when I&rsquo;ve seen the Rails in action.
<br />
<br /><strong>3. The problem diagnosing and GC tuning in HotSpot Java VM by Vladimir Ivanov.</strong>
<br />This talk was like a JVM magic :-). The speaker discovered the darkest GC places I&rsquo;ve never known about. He&rsquo;s opened my eyes. I even couldn&rsquo;t expect that GC tuning is so interesting.
<br />
<br /><strong>4. To be in ten times faster kudos <a href="http://groovy.codehaus.org/">Groovy </a>by Evgeny Kompaniec</strong>
<br />This guy has shown the real case study:
<br />- Why he choose the Groovy as Java substitution.
<br />- Java code snippets vs Groovy (functionally equal) code snippets. IMHO, the most interesting and inspiration part of talk.
<br />- Groovy knowledge sharing via pros &amp; cons.
<br />
<br />5. <strong><a href="http://www.unitils.org/">Unitils </a>for Java testing by Mikalai Alimenkou</strong>
<br />To be honest I&rsquo;ve never heard about this tools. This presentation was full of practical samples and advices like a cookbook. Great talk, the presenter had a good mood and used the right jokes in the right places, he was very impressive. I wish every speaker had such good presentation technique.
<br />
<br /><strong>6. How Graph Databases can make you a super star by Andrés Taylor</strong>
<br />This talk was dedicated to the &ldquo;beauty&rdquo; of <a href="http://neo4j.org/">Neo4j</a> graph DB. It was just a start point for this DB.
<br />
<br /><strong>7. <a href="http://vaadin.com/">Vaadin</a>, Rich Web Apps in Server-Side Java without Plug-ins or JavaScript by Joonas Lehtinen</strong>
<br />I&rsquo;ve been following this framework about a year. And I must admit that it was really impressed to see CEO of company behind Vaadin.
<br />The talk was short and pragmatic. The major areas of Vaadin were highlighted. Then, the presenter has shown the Vaadin in action and it was cool. The community and the whole framework evolved in one year. As for me it was great to see the real person who developed so interesting stuff.
<br />
<br />It was my 6th IT conference. I must admit it was the best, no doubts. I hope to attend the Java conference next year again.</p>
]]></content>
  </entry>
  
</feed>
