<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Knowledge Is Everything]]></title>
  <link href="http://halyph.com/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2016-01-09T22:57:29+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Day - Kiev, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/11/08/java-day-kiev-2015-report/"/>
    <updated>2015-11-08T22:14:46+02:00</updated>
    <id>http://halyph.com/blog/2015/11/08/java-day-kiev-2015-report</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/posts/conf/java_day_2015.png"></p>

<p><em>November 6-7, 2015</em> I visited <a href="http://javaday.org.ua/kyiv">Java Day Kyiv</a> conference. This report is for myself just to keep track talks I&rsquo;ve attended.</p>

<a name="Day.1"></a>
<h2>Day 1</h2>

<ul>
<li><p><strong>Get Past the Syntax, the Real Scare&rsquo;s in the Semantics</strong> by <a href="https://twitter.com/@venkat_s">Venkat Subramaniam</a></p>

<blockquote><p>We often hear programmers complain about the syntax, especially when learning a new language. It turns out that, while syntax plays a role in our ability to learn and use languages, the real force we have to deal with is in the semantics. Once we get past the syntax, the semantics is where the real power and the real scare is. Curious to learn more?</p></blockquote></li>
<li><p><strong>Enterprise Integration Patterns Revisited for the Era of Big Data, Internet of Things and Microservices</strong> by <a href="https://twitter.com/kaiwaehner">Kai Waehner</a>  (<a href="http://www.slideshare.net/KaiWaehner/enterprise-integration-patterns-revisited-eip-for-the-era-of-big-data-internet-of-things-iot-and-cloud">slides</a>)</p>

<blockquote><p>Data exchanges between companies increase a lot. Hence, the number of applications, which must be integrated increases, too. The realization of these integration scenarios is a complex and time-consuming task because different applications and services do not use the same concepts, interfaces, data formats and technologies. Originated and published over ten years ago by Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns (EIP) became the world wide de facto standard for describing integration problems. They offer a standardized way to split huge, complex integration scenarios into smaller recurring problems. This session revisits EIPs and gives an overview about the status quo and its relevance regarding modern concepts such as Big Data, Internet of Things or Microservices. Fortunately, EIPs offer more possibilities than just being used for modeling integration problems in a standardized way. Several frameworks and tools already implement these patterns. The developer does not have to implement EIPs on his own. Therefore, the end of the session shows different open source frameworks and proprietary tools available, which can be used for modeling and implementing complex integration scenarios by using the EIPs.</p></blockquote></li>
<li><p><strong>Microservices at Proximus: Netflix OSS and HATEOAS deployed on production</strong> by <a href="https://twitter.com/andreasevers">Andreas Evers</a> (<a href="https://speakerdeck.com/krosan/microservices-with-netflix-oss-and-hypermedia-apis-javaday-kiev">slides</a>)</p>

<blockquote><p>At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. Throughout this session you will learn what the microservices hype is all about, including its benefits and pitfalls based on our experiences of running microservices (including the Netflix OSS) in production at a major company in Belgium. To manage hundreds of microservices you need to apply certain patterns such as circuit breakers, gateways, service registries and so on. You will learn how these patterns work, how they are applied through the Netflix stack and how easy it is to use them in your architecture through code examples and demos. The contracts between these microservices should be well defined and loosely coupled. Using hypermedia as the engine of application state (hateoas), we can benefit from independent evolution and decoupled implementation. How we can implement these using Spring Hateoas, correctly document using Spring Restdocs, integrate with the HAL browser and version using JsonViews will become clear in the second part of this session.</p></blockquote></li>
<li><p><strong>Java in production for Data Mining Research projects</strong> by <a href="https://plus.google.com/110650159101065784429/posts">Alexey Zinoviev</a> (<a href="http://www.slideshare.net/zaleslaw/javadaykiev15-java-in-production-for-data-mining-research-projects">slide</a>)</p>

<blockquote><p>Java is often criticized for hard parsing CSV datasets, poor matrix and vectors manipulations. This makes it hard to easy and efficiently implement certain types of machine learning algorithms. In many cases data scientists choose R or Python languages for modeling and problem solution and you as a Java developer should rewrite R algorithms in Java or integrate many small Python scripts in Java application. But why so many highload tools like Cassandra, Hadoop, Giraph, Spark are written in Java or executed on JVM? What the secret of successful implementation and running? Maybe we should forget old manufacturing approach of dividing on developers and research engineers in production projects? During the report, we will discuss how to build full Java-stack Data Mining application, deploy it, make charts, integrate with databases, how to improve performance with JVM tuning and etc. Attendees of my talk will become familiar with the development and deploy of research Java projects, Hadoop/Spark — based Data Mining tools and will get useful tips about possible integration ways.</p></blockquote></li>
<li><p><strong>How Java developers should test their applications</strong> by <a href="https://twitter.com/xpinjection">Mikalai Alimenkou</a> <em>It was a real code sharing session where were demoed and discussed different testing approaches</em></p></li>
</ul>


<a name="Day.2"></a>
<h2>Day 2</h2>

<ul>
<li><p><strong>The Future [Java] Developer</strong> by <a href="https://twitter.com/brjavaman">Bruno Souza</a>. <strong>Keynote</strong></p>

<blockquote><p>What kind of developer do you want to be? The kind that plans, organizes, prepares, and prepares&hellip; and prepares&hellip; Or the kind that focus on delivering and on transforming your customers&#8217; lives? Software development is a creative and complex work. It is trully &ldquo;Meaningful Work&rdquo;. But&hellip; If we do it right! Java has allowed us to adventure into all kinds of new technologies, while improving our core knowledge. But how does the ever changing technology landscape and things like Cloud Computing, Internet of Things, BigData and DevOps impact our ability to deliver? This talk will take a look at the abilities of the Future [Java] Developer, and how open source, startups and containers play a role into our future careers.</p></blockquote></li>
<li><p><strong>20 Years of Java</strong> by <a href="https://twitter.com/lagergren">Marcus Lagergren</a>. <strong>Keynote</strong></p>

<blockquote><p>This keynote will be a historical trip down memory lane - going through 20 years of Java and JVM implementations. This will be partly from Marcus’s own perspective as one of the architects behind JRockit, with plenty of stories from the trenches, like the benchmarking competitions between BEA/Oracle, Sun and IBM. We will see how Java and the JVM turned into the robust high performance server side platform that it is today, partly through personal observations and partly through a more objective “what a long strange trip this has been”. He will take you back to 1995 in a time machine and slowly bring you to 2014, going over the major Java releases and the runtime innovations made in the JVM side to get us here. Finally, we will do a short trip into the future, even though the future is always fuzzy, to explore what might be coming next. With Java 8, the biggest release in Java history, Java is more vibrant and alive than ever before. This is an evolution that won’t be stopped.</p></blockquote></li>
<li><p><strong>Brand new proximus microservices architecture in production</strong> by <a href="https://twitter.com/andreasevers">Andreas Evers</a> (<a href="https://speakerdeck.com/krosan/lessons-learned-testimonial-of-a-brand-new-microservices-architecture-in-production-javaday-kiev">slides</a>)</p>

<blockquote><p>At a major telco company in Belgium we have designed and implemented a cutting-edge architecture using microservices and hypermedia (REST level 3 / hateoas) for the entire customer- and business-facing web portfolio. During this talk we will shed a light on the migration path we went through to get Spring Cloud microservices based on Netflix deployed to production. Migrating from a monolith to containerized microservices doesn&rsquo;t always go smoothly in a rigid regulated enterprise. This is not your regular microservice talk. This is a journey through our struggles to reform both technically and culturally (reverse Conway&rsquo;s law) towards a devops distributed architecture which actually runs on production. E.g. gradually evolving from a manual infrastructure deploying on JBoss and using dedicated apache load balancers, to a PaaS private cloud solution.</p></blockquote></li>
<li><p><strong>One VM To Rule Them All</strong> by <a href="http://www.wuerthinger.net/">Thomas Wuerthinger</a> (<a href="http://www.slideshare.net/ThomasWuerthinger/jazoon2014-slides">slides</a>)</p>

<blockquote><p>Running a multitude of programming languages is a common requirement for large scale applications. This talk presents a virtual machine architecture that allows to handle different programming languages and their interoperability while not sacrificing performance. It bases on partial evaluation of AST interpreters to automatically derive compiled code. A prototype of this architecture has been developed as part of the Graal OpenJDK project (<a href="http://openjdk.java.net/projects/graal/">http://openjdk.java.net/projects/graal/</a>) as well as the TruffleRuby, ZipPy, and FastR open source projects. The talk will be about the general principles behind our VM, special aspects of the Ruby, Python, and R implementations, and our vision for making language interoperability work efficiently.</p></blockquote></li>
<li><p><strong>Microservices Design Patterns for Java Application</strong> by <a href="https://twitter.com/arungupta">Arun Gupta</a> (<a href="https://dzone.com/refcardz/getting-started-with-microservices">DZone Refcard</a>)</p>

<blockquote><p>Microservices allow to decompose a monolithic application into cohesive and multiple decoupled services. Each service is running in its own process and communicate using lightweight mechanisms, such as HTTP API. These services are built around business capabilities or functional decomposition. Microservice also enables true polyglot architecture – both in terms of language and data. It truly allows you to employ the right tool for the right job. Each service is independently deployable and lends very well to fully automated deployment machinery. Can you take an existing Java EE application and decompose it into microservices? What tools are required to enable CI/CD? What are different design patterns for microservices? What tools do you need to manage such services? Is the complexity being pushed around from service implementation to orchestration? This talk will explain some of these concerns and provide guidance on how to leverage microservices in your Java applications.</p></blockquote></li>
<li><p><strong>Scaling Wix with microservices architecture and multi-cloud platform</strong> by <a href="http://www.aviransplace.com/">Aviran Mordo</a> (<a href="http://www.slideshare.net/aviranwix/scaling-wix-with-microservices-and-multi-cloud-2015">slides</a>)</p>

<blockquote><p>Many small startups build their systems on top of a traditional toolset like Tomcat, Hibernate, and MySQL. These systems are used because they facilitate easy development and fast progress, but many of them are monolithic and have limited scalability. So as a startup grows, the team is confronted with the problem of how to evolve the system and make it scalable. Facing the same dilemma, Wix.com grew from 0 to 70 million users in just a few years. Facing some interesting challenges, like performance and availability. Traditional performance solutions, such as caching, would not help due to a very long tail problem which causes caching to be highly inefficient. And because every minute of downtime means customers lose money, the product needed to have near 100% availability. Solving these issues required some interesting and out-of-the-box thinking, and this talk will discuss some of these strategies: building a highly preformant, highly available and highly scalable system; and leveraging microservices architecture and multi-cloud platforms to help build a very efficient and cost-effective system.</p></blockquote></li>
<li><p><strong>From CRUD to Hypermedia APIs with Spring</strong> by <a href="https://twitter.com/flushdia">Vladimir Tsukur</a></p>

<blockquote><p>Typical way to design and expose HTTP API today is a so called CRUD approach: come up with URL templates for resources, map create-read-update-delete operations to HTTP verbs and serialize domain model as JSON. Nice and easy, isn&rsquo;t it? This talk will present limitations of CRUD style APIs and how to address them using &ldquo;real&rdquo; REST and hypermedia, HAL and ALPS. We&rsquo;ll take a look how a set of libraries and tools from Spring helps building these APIs. All the talking is not worth it without an example, so Spring-based application will be our guide. Amazon, PayPal, GitHub and other API providers have already started embracing hypermedia and linking by enhancing their HTTP interfaces. Are you next? #rest #hypermedia #http #api #design #spring #spring-hateoas #java #hal #alps</p></blockquote></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="https://speakerdeck.com/krosan/spring-rest-docs-documenting-restful-apis-using-your-tests">Spring REST Docs - Documenting RESTful APIs using your tests by Andreas Evers</a></li>
<li>Graal Compiler <a href="http://www.slideshare.net/ThomasWuerthinger/2015-cgo-graal">slides</a></li>
<li><a href="http://blog.arungupta.me/microservice-design-patterns/">Microservice Design Patterns</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Netflix Eureka via Webapp Runner?]]></title>
    <link href="http://halyph.com/blog/2015/10/21/using-webrunner/"/>
    <updated>2015-10-21T00:20:21+03:00</updated>
    <id>http://halyph.com/blog/2015/10/21/using-webrunner</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/java.png"></p>

<p>Some time ago I had to run <a href="https://github.com/Netflix/eureka">Netflix Eureka server</a> (to be more specific itwas version 1.1.151) not using Spring Boot.</p>

<p>There were several ways:</p>

<ul>
<li>simply deploy <strong>eureka-server.war</strong> into Tomcat</li>
<li>use <a href="http://www.eclipse.org/jetty/documentation/current/runner.html">Jetty runner</a>.

<blockquote><p>The idea of the jetty-runner is extremely simple – run a webapp directly from the command line using a single jar and as much default configuration as possible. Of course, if your webapp is not so straightforward, the jetty-runner has command line options which allow you to customize the execution environment.</p></blockquote></li>
<li>use <a href="https://github.com/jsimone/webapp-runner">Webapp Runner</a>.

<blockquote><p>Webapp runner is designed to allow you to launch an exploded or compressed war that is on your filesystem into a tomcat container with a simple java -jar command.</p></blockquote></li>
</ul>


<p>I decided to go with <em>Webapp Runner</em>.</p>

<p>So, here is the list of steps:</p>

<ol>
<li>Download <strong>eureka-server</strong> war from maven central (e.g. <a href="http://mvnrepository.com/artifact/com.netflix.eureka/eureka-server/1.1.151">http://mvnrepository.com/artifact/com.netflix.eureka/eureka-server/1.1.151</a>). Also, we can clone the Netflix Eureka github repo and perform build locally. But, our intent is just get ready to use war file as quick as possible.</li>
<li>Rename <strong>eureka-server-1.1.151.war</strong> to <strong>eureka-server.war</strong>.</li>
<li>Download <strong>webapp-runnner</strong> jar from maven central (e.g. <a href="http://mvnrepository.com/artifact/com.github.jsimone/webapp-runner/8.0.24.0">http://mvnrepository.com/artifact/com.github.jsimone/webapp-runner/8.0.24.0</a>)</li>
<li>I assume that <strong>eureka-server.war</strong> and <strong>webapp-runner-8.0.24.0.jar</strong> are located in the same directory. Now we can simply run the <em>eureka-server</em> on port 4000 via <code>runme.bat</code> file:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat runme.bat
</span><span class='line'>java -jar webapp-runner-8.0.24.0.jar eureka.war --path /eureka --port 4000</span></code></pre></td></tr></table></div></figure>


<p>Local directory should have the next files/folders:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dir /b
</span><span class='line'>eureka-server-1.1.151.war
</span><span class='line'>eureka.war
</span><span class='line'>runme.bat
</span><span class='line'>target/
</span><span class='line'>webapp-runner-8.0.24.0.jar</span></code></pre></td></tr></table></div></figure>


<p>The server is up and running: check Eureka UI <a href="http://localhost:4000/eureka/">http://localhost:4000/eureka/</a> or registered apps <a href="http://localhost:4000/eureka/v2/apps/">http://localhost:4000/eureka/v2/apps/</a> XML output.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li>Github <a href="https://github.com/jsimone/webapp-runner">Webapp Runner</a></li>
<li>Github <a href="https://github.com/Netflix/eureka">Netflix Eureka</a></li>
<li><a href="https://github.com/heroku/devcenter-jetty-runner">Deploy a Java Web Application that launches with Jetty Runner</a></li>
<li><a href="https://devcenter.heroku.com/articles/java-webapp-runner">Deploying Tomcat-based Java Web Applications with Webapp Runner</a></li>
<li><a href="http://www.java-allandsundry.com/2015/02/standing-up-local-netflix-eureka.html">Standing up a local Netflix Eureka</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distribute Application as Native Single Binary]]></title>
    <link href="http://halyph.com/blog/2015/09/25/programming-languages-to-native-code/"/>
    <updated>2015-09-25T01:51:25+03:00</updated>
    <id>http://halyph.com/blog/2015/09/25/programming-languages-to-native-code</id>
    <content type="html"><![CDATA[<div align="center"><span style="align: center; font-size: 64pt">~</span></div>


<p>Some time ago I had a pleasure to implement Ruby-based tool which theoretically must be easy to install and have no or limited dependencies.
I&rsquo;ve picked <code>JRuby</code> and packed/distribute the application as a <code>jar</code>. I.e. JRE was the single dependency I had. In general it was very nice distribution model despite the fact that non-Java users must install JRE (Java SE Runtime Environment) to run the application.</p>

<p>All other approaches like Ruby, Python, Perl, etc. were not acceptable as they requires additional user&rsquo;s efforts for tool installation and/or package distribution.</p>

<p>The idea was/is to have single native binary for all major platforms which requires no dependencies. Simply copy and run.</p>

<p>Now, the question: did I have other alternatives to implement this tool? Could it be implemented as native static binary? - Answer - YES. But, at that time there were only two mature solutions (acceptable for me): C and C++. And neither of them were very good for tool implementation and prototyping at the same time. Also, as far as I know, it&rsquo;s not a simple task to implement really cross-platform app, at least for Windows/Linux/OSX in C/C++. It adds additional maintenance efforts which I tried to avoid.</p>

<p>Looking now at this task I can say that this king of application is nice to implement in <a href="https://golang.org">Go</a>. Go has everything I need for really cross-platform application development and single static binary output which is awesome for tools/utilities writers.</p>

<p>I decided to look around and understand which other popular languages support compilation/packaging to native (semi-)single static binary. The term <em>&ldquo;semi-single&rdquo;</em> static binary will be explained later.</p>

<a name="Compilers"></a>
<h2>Compilers</h2>

<p>Quick googling give us the next languages:</p>

<ul>
<li><a href="https://www.rust-lang.org">Rust</a></li>
<li><a href="https://www.haskell.org">Haskell</a></li>
<li><a href="https://ocaml.org/">OCaml</a></li>
<li><a href="http://www.cliki.net/creating%20executables">Lisp</a>

<ul>
<li><a href="http://www.sbcl.org/">SBCL</a></li>
<li><a href="http://ccl.clozure.com/">Clozure CL</a></li>
</ul>
</li>
<li><a href="http://dlang.org/">D</a></li>
</ul>


<p><strong>Haskell</strong>, <strong>OCaml</strong> and <strong>Lisp</strong> are not widely used. And these langs should be picked carefully due to language specific learning curve.</p>

<p><strong>D</strong> language is not young and has small community. But it&rsquo;s much simpler and clean compared to C++, IMHO.</p>

<p><strong>Rust</strong> is the new hype along with <strong>Go</strong>. I guess it will be good alternative to C/C++. Also, the language is much more powerful compared to <strong>Go</strong>, it might be additional selling point.</p>

<a name="Dynamic.Languages"></a>
<h2>Dynamic Languages</h2>

<p>There is no direct compilation from interpret/dynamic language to native static binary. But, it&rsquo;s possible to pack application with language runtime into &ldquo;archive&rdquo;/executable to behave like static native binary.</p>

<ul>
<li>Python <a href="http://docs.python-guide.org/en/latest/shipping/freezing/">freezing</a> (To <em>&ldquo;Freeze&rdquo;</em> your code is to distribute to end-users as an executable which includes a bundled Python interpreter)

<ul>
<li><a href="https://pypi.python.org/pypi/bbfreeze">bbFreeze</a></li>
<li><a href="http://www.py2exe.org">py2exe</a></li>
<li><a href="http://www.pyinstaller.org">pyInstaller</a></li>
<li><a href="http://cx-freeze.sourceforge.net">cx_Freeze</a></li>
<li><a href="https://pythonhosted.org/py2app/">py2app</a></li>
</ul>
</li>
<li>Perl

<ul>
<li><a href="http://search.cpan.org/~rschupp/PAR-Packer-1.026/lib/pp.pm">PAR Packager</a></li>
<li><a href="http://www.indigostar.com/perl2exe.php">Perl2Exe</a></li>
</ul>
</li>
<li>Node.js, Here is <a href="https://github.com/nwjs/nw.js/wiki/how-to-package-and-distribute-your-apps">sample approaches</a></li>
<li>Ruby:

<ul>
<li><a href="http://www.erikveen.dds.nl/rubyscript2exe/">RubyScript2Exe</a></li>
<li><a href="http://ocra.rubyforge.org/">OCRA</a></li>
</ul>
</li>
</ul>


<p>Based on the list above, <strong>Python</strong> has many alternatives to accomplish single distribution artifact task. I.e. it&rsquo;s better to pick Python than other alternatives. Also, it looks like <strong>Ruby</strong> has limited and poor choices, i.e. it&rsquo;s not suitable for this kind of task.</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>IMHO, <strong>Go</strong> has the most appealing tool chain for accomplish this task.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDay - Lviv, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/09/20/jday-lviv-2015-report/"/>
    <updated>2015-09-20T23:14:46+03:00</updated>
    <id>http://halyph.com/blog/2015/09/20/jday-lviv-2015-report</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/posts/conf/jday.png"></p>

<p><em>September 19, 2015</em> I visited <a href="http://www.jday.com.ua">JDay Lviv</a> Java conference. This report is for myself just to keep track talks I&rsquo;ve attended.</p>

<ul>
<li><p><strong>Put Your Thinking CAP On</strong> by <a href="https://twitter.com/tomerg">Tomer Gabel</a> (<a href="http://www.slideshare.net/holograph/scaling-out-data-stores-and-the-cap-theorem">slides</a>)</p>

<blockquote><p>Consistency, availability and partition tolerance: these seemingly innocuous concepts have been giving engineers and researchers of distributed systems headaches for over 15 years. But despite how important they are to the design and architecture of modern software, they are still poorly understood by many engineers. This session covers the definition and practical ramifications of the CAP theorem; you may think that this has nothing to do with you because you &ldquo;don&rsquo;t work on distributed systems&rdquo;, or possibly that it doesn&rsquo;t matter because you &ldquo;run over a local network.&rdquo; Yet even traditional enterprise CRUD applications must obey the laws of physics, which are exactly what the CAP theorem describes. Know the rules of the game and they&rsquo;ll serve you well, or ignore them at your own peril&hellip;</p></blockquote></li>
<li><p><strong>Microservices and Modularity or the difference between treatment and cure!</strong> by <a href="https://twitter.com/milendyankov">Milen Dyankov</a> (<a href="http://www.slideshare.net/MilenDyankov1/microservices-and-modularity">slides</a>)</p>

<blockquote><p>Everyone is talking about microservices these days! So the question is should you also jump on that bandwagon and why those somewhat older colleagues of yours (yep, those that still remember the EJB 2 revolution) are not that enthusiastic? To help you make the right decisions, this talk will first focus on explaining complexity - the problem microservices claim to solve. It then will concentrate on modular architecture and how it compares to what most people understand by microservices! Live demo will present multiple ways to modularize existing JEE application going from &ldquo;monolithic&rdquo; Glassfish EJB/JSF style app through SpringBoot and OSGi to reach a distributed system with a portal as front-end.</p></blockquote></li>
<li><p><strong>The modern view on implementation of classic design patterns in Java</strong> by <a href="https://twitter.com/xpinjection">Mikalai Alimenkou</a> (<a href="http://www.slideshare.net/alimenkou/the-modern-view-on-implementation-of-classic-design-patterns-in-java">slides</a>, <a href="https://github.com/xpinjection/design-patterns">github</a>)</p>

<blockquote><p>Almost every developer heard about design patterns. They was introduced long time ago to solve particular set of repeating problems in systems of different complexity level and size. But there is an opinion that many design patters just filled holes in the OOP languages of that time. Java as one of them has transformed and improved significantly in the last 10 years. So may be we could review design patterns implementation in modern Java world? Some of them are now may be easily replaced with language idioms, some others may be covered with existing libraries and frameworks. I&rsquo;m sure you know some design patterns that are dead now or became anti-patterns in their initial implementation. Lets make this fun and useful review together!</p></blockquote></li>
<li><p><strong>Functional programming concepts in Java 8: Lambdas &amp;&amp; Monads</strong> by <a href="https://twitter.com/pivovarit">Grzegorz Piwowarek</a> (<a href="http://www.slideshare.net/pivovarit/confitura2015grzegorzpiwowareklambdasmonads">slides</a>)</p>

<blockquote><p>The aim of this presentation is to introduce listener to a functional programming concepts that were introduced in Java 8. Presentation covers lambda expressions, an imperative-programmer-friendly definition of a monad and an application of Java 8 monads in everyday java developer life.</p></blockquote></li>
<li><p><strong>Handling 10k req/sec with 1 core or how you could get even more?</strong> by <a href="https://github.com/doom369">Dmitriy Dumanskiy</a></p>

<blockquote><p>For the past 5 years I have been working on highly-loaded systems, solving problems and optimizing them. In my talk I will explain how the IoT has changed the understanding of high-load and why this trend changes the rules. What are asynchronous sockets and how they work. What are the solutions up to date and why Netty has no competitors? How does Netty work, what are its strengths, weaknesses, pitfalls? How to get the most, out of your code, where to look and what to do? And many other tips and advices on how to optimize your code ranging from simple cases up to choosing a JDBC pool.</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails 2.x Best Practices Collection]]></title>
    <link href="http://halyph.com/blog/2015/07/20/grails-best-practices-collection/"/>
    <updated>2015-07-20T23:52:19+03:00</updated>
    <id>http://halyph.com/blog/2015/07/20/grails-best-practices-collection</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/grails.jpg"></p>

<p>Recently, I had a pleasure to look into several Grails v.2.3+ projects. Despite the fact that I&rsquo;m not a Grails developer I discovered some anti-patterns.
Then I started looking around to find some <em>Grails projects best practices</em>. And  they are well known and people still doing mistakes.
However, I&rsquo;ve found several nice resources and I&rsquo;m (<em>going to quate</em>) quoting them here. I keep references back to original source and use &ldquo;copy-paste&rdquo; approach to have aggregated post in single place.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://grails.github.io/grails-howtos/en/pluginDevelopmentBestPractices.html">Grails Plugin Development Best Practices</a></li>
<li><a href="https://objectpartners.com/2013/10/15/what-i-wish-i-knew-about-grails-before-my-first-grails-project/">What I wish I knew about Grails before my first Grails Project</a></li>
<li><a href="http://tech-my-talk.blogspot.com/2013/04/groovy-grails-design-best-practices.html">Groovy &amp; Grails Design Best Practices</a> very detailed

<ul>
<li><a href="http://tutorials.techmytalk.com/2013/04/01/groovy-grails-design-best-practices-2/">Grails Design Best Practices, 2013, by Nitin Kumar</a></li>
</ul>
</li>
<li><a href="https://dzone.com/articles/grails-best-practices">Grails Best Practices, 2013, by Nitin Kumar</a></li>
<li><a href="https://earlyandoften.wordpress.com/2011/10/11/grails-best-practice-resources/">Grails Best Practice Resources, 2011</a></li>
<li><a href="http://grails.1312388.n4.nabble.com/Best-practices-with-services-and-controllers-td4410927.html">Best practices with services and controllers, 2012</a></li>
<li><a href="http://www.infoq.com/articles/grails-best-practices">InfoQ - Grails Best Practices, 2012</a></li>
<li><a href="http://stackoverflow.com/questions/6226759/best-practices-to-be-followed-while-developing-grails-application">SO - Best Practices to be followed while developing Grails Application, 2011</a></li>
<li><a href="https://www.catalysts.cc/en/diskussion/grails-in-large-projects-part-2/">Grails in large projects – Part 2, 2013 by Klaus Lehner</a></li>
<li><a href="http://www.ygrails.com/2013/09/08/grails-best-practices/">Grails best practices, 2013 by Ashish Joseph</a></li>
<li><a href="http://talldave.net/2013/06/05/grails-best-practices-presentation/">Grails Best Practices presentation, 2013</a></li>
</ul>


<a name="Videos"></a>
<h3>Videos</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=LZQ-1f9RGqg">Cut your Grails application to pieces - build feature plugins</a></li>
<li><a href="https://www.youtube.com/watch?v=-izTlOpZ7VA">Greach 2014 - Hexagonal Architecture in Grails by David Dawson</a></li>
<li><a href="https://www.youtube.com/watch?v=nx8XMY7evbA">Philosophical Architecture in Grails by David Dawson</a></li>
<li><a href="https://www.youtube.com/watch?v=wF8gjfh0Kyw">Experiences Using Grails in a Micro Service Architecture</a></li>
<li><a href="https://www.youtube.com/watch?v=4wuRuC4_G7w">Application architectures with Grails</a></li>
</ul>


<p>Interesting Grails people
<a href="http://www.anyware.co.uk/2005/2011/09/12/optimising-your-application-with-grails-resources-plugin/">http://www.anyware.co.uk/2005/2011/09/12/optimising-your-application-with-grails-resources-plugin/</a>
<a href="http://www.bobbywarner.com/">http://www.bobbywarner.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevoxxPL - Krakow, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/06/29/devoxxpl/"/>
    <updated>2015-06-29T13:00:51+03:00</updated>
    <id>http://halyph.com/blog/2015/06/29/devoxxpl</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/posts/2015-06/Devoxx-Poland-2015.png"></p>

<p>This summer I&rsquo;ve decided to attend my 1<sup>st</sup> foreign conference - <a href="http://devoxx.pl">DevoxxPL - Krakow, Poland, 22-25 June 2015</a>. It was very important experience, because I wanted to compare it with our local Ukrainian conferences. Long story short - the quality is equal. Any conference is based on speakers (I&rsquo;d like to be &ldquo;Captain Obvious&rdquo;). And even awesome conference location can&rsquo;t make conference <strong>great</strong>.</p>

<p>So, I&rsquo;ve attended the next talks:</p>

<a name="Day.1"></a>
<h2>Day 1</h2>

<ul>
<li><strong>&ldquo;The Silver Bullet Syndrome&rdquo;</strong> by <a href="http://hadihariri.com/">Hadi Hariri</a></li>
<li><strong>&ldquo;Tips and tricks for clean relational db schemas&rdquo;</strong> by <a href="https://twitter.com/clementd">Clément Delafargue</a></li>
<li><strong>&ldquo;JRebel under the covers - how is it even possible?&rdquo;</strong> by <a href="https://twitter.com/sjmaple">Simon Maple</a></li>
<li><strong>&ldquo;Corporate startup and Scala&rdquo;</strong> by <a href="https://plus.google.com/114974986229567009127/posts">Filip Rogaczewski</a> from <a href="spartez.com">Spartez</a>

<ul>
<li>It was really nice case study about building project with Scala. Pros&amp;cons were &ldquo;honestly&rdquo; highlighted.</li>
</ul>
</li>
<li><strong>&ldquo;Refactoring to Functional&rdquo;</strong> by <a href="http://hadihariri.com/">Hadi Hariri</a></li>
<li><strong>&ldquo;You&rsquo;re an Architect&hellip;Now What?&rdquo;</strong> by <a href="https://twitter.com/ntschutta">Nathaniel Schutta</a></li>
</ul>


<a name="Day.2"></a>
<h2>Day 2</h2>

<ul>
<li><strong>&ldquo;Why software developers should care about deployment and monitoring&rdquo;</strong> by <a href="http://allegrotech.io/authors/michal.kosmulski/">Michał Kosmulski</a> from Allegro Group</li>
<li><strong>&ldquo;Modern Java Component Design with Spring 4.2&rdquo;</strong> by <a href="https://twitter.com/springjuergen">Juergen Hoeller</a> from Pivotal</li>
<li><strong>&ldquo;Make sense of your (BIG) data!&rdquo;</strong> by <a href="https://twitter.com/dadoonet">David Pilato</a> from ElasticSearch

<ul>
<li><a href="http://david.pilato.fr">Blog</a></li>
</ul>
</li>
<li><strong>&ldquo;Building an Asynchronous Reactive NoSQL SDK with RxJava&rdquo;</strong> by <a href="https://about.me/simonbasle">Simon Baslé</a> from Couchbase</li>
<li><strong>&ldquo;Lazy Evaluations&rdquo;</strong> by <a href="https://twitter.com/venkat_s">Venkat Subramaniam</a>

<ul>
<li><a href="http://blog.agiledeveloper.com/2015/06/lazy-in-java_24.html">Blogpost - Lazy in Java</a></li>
</ul>
</li>
<li><strong>&ldquo;Get Past the Syntax, The Real Scare is in the Semantics&rdquo;</strong> by <a href="https://twitter.com/venkat_s">Venkat Subramaniam</a></li>
</ul>


<a name="Day.3"></a>
<h2>Day 3</h2>

<ul>
<li><strong>&ldquo;PubSub++ - few tips that make your life with kafka easier&rdquo;</strong> by <a href="https://twitter.com/DebskiChris">Krzysztof Debski</a> from Allegro Group</li>
<li><strong>&ldquo;Deep dive into Reactive Java&rdquo;</strong> by <a href="https://twitter.com/tkowalcz">Tomasz Kowalczewski</a> from Codewise:

<ul>
<li><a href="http://www.slideshare.net/tkowalcz/deep-dive-reactive-java-devoxxpl">Slides</a></li>
<li><a href="https://github.com/tkowalcz/presentations">Github</a></li>
</ul>
</li>
<li><strong>&ldquo;Event Sourcing &amp; Functional Programming - a pair made in heaven&rdquo;</strong> by <a href="https://twitter.com/rabbitonweb">Paweł Szulc</a>

<ul>
<li><a href="http://www.rabbitonweb.com/">Blog</a></li>
</ul>
</li>
<li><strong>&ldquo;Functional Programming: Technical Reasons to Adapt&rdquo;</strong> by <a href="https://twitter.com/venkat_s">Venkat Subramaniam</a></li>
<li><strong>&ldquo;Why I love Logstash and you should too&rdquo;</strong> by <a href="https://twitter.com/jsvd">João Duarte</a> from ElasticSearch</li>
</ul>


<a name="Summary"></a>
<h2>Summary</h2>

<p>This conference had a huge buzz around microservices. I&rsquo;ve been inspired by some talks and planning to look deeper into:</p>

<ul>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
<li><a href="https://www.elastic.co/products/logstash">Logstash</a></li>
<li><a href="https://www.elastic.co/products/kibana">Kibana</a></li>
<li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li>
<li>and OMG ;-) <a href="http://www.scala-lang.org/">Scala</a></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li>Allegro

<ul>
<li><a href="http://allegrotech.io/open-source/">Open Source</a></li>
<li><a href="http://allegrotech.io/">Tech blog</a></li>
</ul>
</li>
<li><a href="https://www.elastic.co">Elastic</a>

<ul>
<li><a href="https://www.elastic.co/blog">Blog</a></li>
<li>Products:

<ul>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
<li><a href="https://www.elastic.co/products/logstash">Logstash</a></li>
<li><a href="https://www.elastic.co/products/kibana">Kibana</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://babun.github.io/">Babun - a windows shell you will love</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JEEConf - Kiev, 2015 - Report]]></title>
    <link href="http://halyph.com/blog/2015/05/25/jeeconf-kiev/"/>
    <updated>2015-05-25T00:45:51+03:00</updated>
    <id>http://halyph.com/blog/2015/05/25/jeeconf-kiev</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/jeeconf.png"></p>

<p>It happened again - I attend <a href="http://jeeconf.com">JEEConf</a>, May 22-23, 2015. And as usual it was inspiring. Also, I can say that <a href="http://www.scala-lang.org/">&ldquo;Scala&rdquo;</a> was the most dominated buzz word at this conference.</p>

<p>So, I attended the next talks:</p>

<ul>
<li><p><strong>Pragmatic Functional Refactoring with Java 8, by Richard Warburton</strong> Java 8 functional features were introduced here. And were shown how we can refactor OOP program in functional way. I can say it&rsquo;s still a new way of thinking for Java developers.</p></li>
<li><p><strong>Just what are you doing, HotSpot? by Gleb Smirnov</strong> - Gleb gave us several advices for understanding tricky HotSpot behavior and why we should read HotSpot sources.</p></li>
<li><p><strong>Lessons from Implementing a Modern B2C System in Scala, by Yuriy Guts</strong> It was a case study talk about starting new project with Scala. The most interesting  was the issues appeared during project development, team&rsquo;s relationship with Scala, and Scala influences on non-Scala developers.</p></li>
<li><p><strong>Spring Puzzlers, by Evgeny Borisov and Baruch Sadogursky</strong> - We can say that this topic is unique. At least I&rsquo;m not aware of similar talks on other Java conferences. Spring Puzzlers is a variation of classic Java puzzlers, but in Spring. It&rsquo;s really great collection of tricky Spring parts.</p></li>
<li><p><strong>JVM Languages Q&amp;A Panel with Jacek Laskowski, Baruch Sadogursky, Dmytro Mantula, Alexander Podkhalyuzin, Tomer Gabel</strong> We can say that this panel was Groovy vs Scala. There are no other &ldquo;languages&rdquo; on this talk.</p></li>
<li><p><strong>Building an Enterprise-less online bank, Anton Keks</strong> - Anton doesn&rsquo;t love bloated Spring and likes simple and clean solution. He doesn&rsquo;t use Play Framework 2 on Scala because of slow compilation. Instead of this, he told us about his banking platform implemented on <em>Play 1.3</em> and <em>Java 8</em>, and all other items included in his stack.</p></li>
<li><p><strong>Everything you wanted to know about writing async, high-concurrency HTTP applications in Java, but were afraid to ask, by Baruch Sadogursky</strong> - Baruch shared his experience about implementing asynchronous file downloader in Java.</p></li>
<li><p><strong>Scala Rock-Painting, by Dmytro Mantula</strong> - This talk was like Scala puzzlers and/or Scala tricky parts. Speaker also gave us several suggesting how we can learn Scala more effectively via practicing <em>code katas</em> and/or <a href="http://ankisrs.net">Anki</a> flesh cards. This talk highlighted the &ldquo;dark&rdquo; side of Scala. Really, recommend it.</p></li>
<li><p><strong>Groovy under Macroscope, by Sergei Egorov and Baruch Sadogursky</strong> - Sergei demoed us very hacky Groovy library <a href="https://github.com/bsideup/MacroGroovy">MacroGroovy</a>. It&rsquo;s nice to see true Groovy hacker and his creature.</p></li>
<li><p><strong>About concurrency abstractions with Observable’s, Future’s, Akka (actors) in Scala, by Jacek Laskowski</strong> - Jacek did Scala concurrency overview talk and highlighted other non-Akka libraries. It&rsquo;s nice to know that there are other <em>&ldquo;good&rdquo;</em> way to do concurrency without Akka.</p></li>
<li><p><strong>Node.js and Evented I/O Alternatives on the JVM, by Niko Köbler</strong> - I definitely heard about <a href="https://avatar-js.java.net">Avatar.js</a>, but Niko told us that <a href="http://blog.n-k.de/2015/01/is-oracles-avatar-dead.html">Avatar.js is dead</a> and  <a href="http://blog.n-k.de/2015/02/current-status-of-oracles-project-avatar.html">Oracle put development of Avatar on hold</a>, i.e. full stop. As alternative were mentioned two solutions: <strong><a href="http://dynjs.org">DynJS</a></strong> an ECMAScript runtime for the JVM and <strong><a href="http://nodyn.io/">Nodyn</a></strong> - Node.js compatible framework on JVM. It&rsquo;s very interesting to see what will happen with them. <em>Nodyn</em> has strong RedHat support. Let&rsquo;s hope it&rsquo;s much stronger than Avatar.js had from  Oracle.</p></li>
<li><p><strong>Do we need JMS in 21st century? by Mikalai Alimenkou</strong> - The simple statements can be extracted from this talk: a) there are other non-JMS Message queues (MQs); b) we don&rsquo;t need bloated JMS for every tasks; c) use right MQ for right job</p></li>
</ul>


<a name="Summary"></a>
<h2>Summary</h2>

<ul>
<li><p>JEEConf has dedicated JVM track: 50% of this track was occupied by Scala (7 talks). As for me this is the sign ;-) Scala bandwagon reached Ukraine.</p></li>
<li><p><em>Microservices</em> everywhere. If you are not doing <em>microservices</em> - you should :-)</p></li>
</ul>


<p>Yes, JEEConf is simply the best. <a href="http://xpinjection.com/">XP Injection</a> did amazing work.</p>

<p><strong>Have fun, love Java!</strong></p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://halyph.com/2014/05/jeeconf-kiev-2014-report.html">JEEConf - Kiev, 2014 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2013/05/jeeconf-kiev-2013-report.html">JEEConf - Kiev, 2013 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2012/05/this-year-we-had-second-jeeconf.html">JEEConf - Kiev, 2012 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2011/05/jeeconf-kiev-2011-report.html">JEEConf - Kiev, 2011 - Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails 2.5.0 Debug in IntelliJ IDEA]]></title>
    <link href="http://halyph.com/blog/2015/05/19/grails-2-dot-5-0-debug-in-intellij-idea/"/>
    <updated>2015-05-19T17:48:59+03:00</updated>
    <id>http://halyph.com/blog/2015/05/19/grails-2-dot-5-0-debug-in-intellij-idea</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/grails.jpg"></p>

<p>I&rsquo;ve been using Grails v.2.5.0 and tried to debug Grails app via traditional Intellij IDEA 14 Debug with no success.</p>

<p><em>To be short</em>: using IDEA <em>Debug</em> allows us debug Grails build system <strong>only</strong>. Why?</p>

<blockquote><p>Forked execution is configured via the <code>grails-app/conf/BuildConfig.groovy</code> file. The following is the default configuration:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">grails</span><span class="o">.</span><span class="na">project</span><span class="o">.</span><span class="na">fork</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'> <span class="o">...</span>
</span><span class='line'>   <span class="nl">run:</span> <span class="o">[</span><span class="nl">maxMemory:</span> <span class="mi">768</span><span class="o">,</span> <span class="nl">minMemory:</span> <span class="mi">64</span><span class="o">,</span> <span class="nl">debug:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">maxPerm:</span> <span class="mi">256</span><span class="o">],</span> <span class="c1">// configure settings for the run-app JVM</span>
</span><span class='line'> <span class="o">...</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Based on this we should create two IDEA Run/Debug Configurations:</em></p>

<ul>
<li>Create simple Grails <em>Run</em> configuration with <code>--debug-fork</code> parameter: <code>run-app --debug-fork</code>.
E.g.</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-05-19/idea1.png">
And run this Configuration. We should get the next output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Listening</span> <span class="k">for</span> <span class="n">transport</span> <span class="n">dt_socket</span> <span class="n">at</span> <span class="nl">address:</span> <span class="mi">5005</span>
</span><span class='line'><span class="o">|</span><span class="n">Server</span> <span class="n">running</span><span class="o">.</span> <span class="n">Browse</span> <span class="n">to</span> <span class="nl">http:</span><span class="c1">//localhost:8080/TekDays</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This socket address will be used for <em>Remote</em> connection.</p>

<ul>
<li>Create IDEA <code>Remote</code> Configuration (<em>Run/Debug Configuration</em> -> <em>Remote</em>)</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-05-19/idea2.png">
And run this Configuation. Now, we are able to <em>debug</em> our application.</p>

<p>The main idea is that we should have two running <em>Configurations</em>!</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://mrhaki.blogspot.com/2013/12/grails-goodness-debugging-app-in-forked.html">Grails Goodness: Debugging App in Forked Mode</a></li>
<li><a href="http://grails.github.io/grails-doc/2.5.0/guide/single.html#forkedMode">Grails 2.5 Forked Execution</a></li>
<li><a href="http://stackoverflow.com/questions/19247944/intellij-idea-debugger-isnt-working-on-a-grails-project">Stackoverflow - IntelliJ IDEA Debugger isn&rsquo;t working on a Grails Project</a></li>
<li><a href="http://grails.io/post/43484836985/road-to-grails-2-3-forked-execution">Road to Grails 2.3: Forked Execution</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Presentation Tool]]></title>
    <link href="http://halyph.com/blog/2015/05/18/golang-presentation-tool/"/>
    <updated>2015-05-18T23:52:50+03:00</updated>
    <id>http://halyph.com/blog/2015/05/18/golang-presentation-tool</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/gopher.png"></p>

<p>Have you ever noticed how Go community presents Go-related talks? Their slides are very simple and without any fancy animation features: see <a href="http://talks.golang.org">Go talks</a>. You might say that they are no so feature-rich as <a href="https://github.com/hakimel/reveal.js/">Reveal.js</a>. And it&rsquo;s true. But, simplicity is beauty, as for me. Also, it&rsquo;s very well aligned with Go language philosophy.</p>

<p>So, here is listed steps required to <em>setup</em> and <em>run</em> Go <strong>present</strong> tool.</p>

<a name="Install.Go"></a>
<h2>Install Go</h2>

<p>I use Mac OS X in this tutorial (see the next <a href="https://golang.org/doc/install">article</a> to install Go on other <em>OS</em>es).</p>

<p>Install Go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install <span class="nv">go</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://homebrew.bintray.com/bottles/go-1.4.2.yosemite.bottle.1.
</span><span class='line'><span class="c">######################################################################## 100.0%</span>
</span><span class='line'><span class="o">==</span>&gt; Pouring go-1.4.2.yosemite.bottle.1.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Caveats
</span><span class='line'>As of go 1.2, a valid GOPATH is required to use the <span class="sb">`</span>go get<span class="sb">`</span> <span class="nb">command</span>:   https://golang.org/doc/code.html#GOPATH
</span><span class='line'>
</span><span class='line'>You may wish to add the GOROOT-based install location to your PATH:
</span><span class='line'>  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/opt/go/libexec/bin
</span><span class='line'><span class="o">==</span>&gt; Summary
</span><span class='line'>🍺  /usr/local/Cellar/go/1.4.2: <span class="m">4566</span> files, 155M
</span></code></pre></td></tr></table></div></figure>


<a name="Define.Go.workspace"></a>
<h2>Define Go workspace</h2>

<p>Let&rsquo;s assume that our Go language workspace will be located at <code>/Users/halyph/Projects/go</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir go
</span><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>/Users/halyph/Projects/go
</span></code></pre></td></tr></table></div></figure>


<a name="Configure..code.PATH..code..variable"></a>
<h3>Configure <code>PATH</code> variable</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat .bash_profile
</span><span class='line'>
</span><span class='line'><span class="c">#Golang settings</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/opt/go/libexec/bin
</span><span class='line'><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/Projects/go  <span class="c">#/Users/halyph/Projects/go</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$GOPATH</span>/bin
</span></code></pre></td></tr></table></div></figure>


<a name="Install.Go.present.tool"></a>
<h2>Install Go present tool</h2>

<p><strong>present</strong> tool is located in separate package <code>golang.org/x/tools</code> which depends on <code>golang.org/x/net</code> package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>go get golang.org/x/net
</span><span class='line'><span class="nv">$ </span>go get golang.org/x/tools
</span><span class='line'><span class="nv">$ </span>go install golang.org/x/tools/cmd/present
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can find <strong>present</strong> tool here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which present
</span><span class='line'>/Users/halyph/Projects/go/bin/present
</span></code></pre></td></tr></table></div></figure>


<a name="Run.present.tool"></a>
<h2>Run present tool</h2>

<p>The easiest way to test <strong>present</strong> tool is to render some slides:</p>

<ul>
<li>Create sample <code>slide</code> file (see <code>.slide</code> <a href="http://godoc.org/golang.org/x/tools/present">file format</a>) in any folder:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat sample.slide
</span><span class='line'>
</span><span class='line'>Title of document
</span><span class='line'>Subtitle of document
</span><span class='line'>15:04 <span class="m">2</span> Jan 2006
</span><span class='line'>Tags: foo, bar, baz
</span><span class='line'>
</span><span class='line'>Author Name
</span><span class='line'>Job title, Company
</span><span class='line'>joe@example.com
</span><span class='line'>http://url/
</span><span class='line'>@twitter_name
</span><span class='line'>Some Text
</span><span class='line'>
</span><span class='line'>* Title of slide or section <span class="o">(</span>must have asterisk<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Some Text
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run <strong>present</strong> in this folder:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>present
</span><span class='line'>2015/05/19 00:55:33 Open your web browser and visit http://127.0.0.1:3999
</span></code></pre></td></tr></table></div></figure>


<p>You should see something like this:</p>

<p><img src="http://halyph.com/images/posts/2015-05-19/pic1.png"></p>

<p><img src="http://halyph.com/images/posts/2015-05-19/pic2.png"></p>

<p>Go <strong>present</strong> works and you are ready to produce <em>Go-fashion</em> slides.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://godoc.org/golang.org/x/tools/present">Go present package documentation</a></li>
<li><a href="https://github.com/hakimel/reveal.js/">Reveal.js - The HTML Presentation Framework</a></li>
<li><a href="http://talks.golang.org">Go talks - slides</a></li>
<li><a href="https://github.com/cmars/represent">Go tool Represent - Static slide presentation and article pages, generated from text</a></li>
<li><a href="https://www.youtube.com/watch?v=83JBmS8WpHM">Video - go present - create html slides with extractable, executable go code</a></li>
<li><a href="https://pythonadventures.wordpress.com/2014/02/14/using-gos-present-with-python-code-snippets/">Using Go’s present with Python code snippets</a> and <a href="https://groups.google.com/forum/#!topic/golang-nuts/BdgXMRqjGqk">Go-nuts discussion - how to embed runnable code snippets in a presentation</a></li>
<li><a href="http://blog.joshsoftware.com/2014/03/10/how-do-i-create-a-presentation-using-go/">How Do I Create A Presentation Using Go?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Full Stack Web Framework]]></title>
    <link href="http://halyph.com/blog/2015/04/06/java-full-stack-web-framework/"/>
    <updated>2015-04-06T23:43:10+03:00</updated>
    <id>http://halyph.com/blog/2015/04/06/java-full-stack-web-framework</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/java.png"></p>

<p><ul>
 <li>
 <ul>
  <li><a href="#Overview">Overview</a></li>
  <li><a href="#Grails">Grails</a></li>
  <li><a href="#Play.Framework.2">Play Framework 2</a></li>
  <li><a href="#Code.Generation.Frameworks">Code Generation Frameworks</a>
  <ul>
   <li><a href="#Spring.Roo">Spring Roo</a></li>
   <li><a href="#JBoss.Forge">JBoss Forge</a></li>
   <li><a href="#AppFuse">AppFuse</a></li>
   <li><a href="#JHipster">JHipster</a></li>
  </ul>
  </li>
  <li><a href="#Domain-driven.Frameworks">Domain-driven Frameworks</a></li>
  <li><a href="#Others">Others</a></li>
  <li><a href="#Summary">Summary</a></li>
  <li><a href="#References">References</a></li>
 </ul>
 </li>
</ul>

</p>

<p>I believe that everybody knows the most popular full-stack web framework - <a href="http://rubyonrails.org">Ruby on Rails</a>. Of course there are other frameworks for Ruby language, but Rails is the number one. Now, the question: how many full-stack web frameworks exist for Java?</p>

<a name="Overview"></a>
<h2>Overview</h2>

<p>Let&rsquo;s define the desired items for full-stack web framework:</p>

<ul>
<li>CoC - <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a></li>
<li>MVC - <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-view-controller</a></li>
<li>DRY - <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don&rsquo;t repeat yourself</a></li>
<li>Scaffolding (<em>it was one of the major selling point on the early stage of Rails</em>)

<ul>
<li>Easy prototyping</li>
</ul>
</li>
<li>Data/Persistent Layer / ORM</li>
<li>DB schema migration</li>
<li>URI Routing</li>
<li>HTML Rendering / Template engines</li>
<li>Testing</li>
<li>REST API</li>
<li>Security</li>
<li>Caching</li>
<li>Request Filtering</li>
<li>Session Management</li>
<li>Form Validation</li>
<li>i18n/l10n</li>
</ul>


<a name="Grails"></a>
<h2>Grails</h2>

<p>I think  <a href="https://grails.org">Grails</a> was and is the single &ldquo;true&rdquo; Rails reincarnation on JVM. Grails is based on <a href="http://www.groovy-lang.org/">Groovy</a> language. It support all concepts Rails supports. It&rsquo;s based on Spring/Hibernate and Gradle since v.3.0 (Grails v.3.0.0 was released on <strong>Mar 31, 2015</strong>).</p>

<p>Grails v.3 is build on <a href="http://projects.spring.io/spring-boot/">Spring Boot</a>.</p>

<p>Some people arguing that Grails v.3 acts as simple wrapper on top of Spring Boot and now it does not worth any investments. But, we must not agree as CoC and DRY principles are very vague.</p>

<a name="Play.Framework.2"></a>
<h2>Play Framework 2</h2>

<p><a href="https://www.playframework.com/">Play Framework 2</a> is a special player. It has two implementations: Java and Scala. Actually Java version is not as powerful as Scala due to Java, as a language, &ldquo;limitation&rdquo;. This framework lives under <a href="http://typesafe.com/">Typesafe</a> umbrella, aka <strong>&ldquo;Typesafe Reactive Platform&rdquo;</strong>.</p>

<p>Play is just different. It&rsquo;s not Servlet-based and is built on <a href="http://netty.io/">Netty</a> async framework. A lot of people claiming that Play is very cool and productive. I haven&rsquo;t tried it yet. But it looks promising and interesting.</p>

<a name="Code.Generation.Frameworks"></a>
<h2>Code Generation Frameworks</h2>

<p>I decided to define the special category &ldquo;Code Generation&rdquo;. Frameworks which are related  to this category are not full stack, but can be called as RAD (Rapid Application Development) frameworks.</p>

<a name="Spring.Roo"></a>
<h3>Spring Roo</h3>

<p><a href="http://projects.spring.io/spring-roo/">Spring Roo</a> was very popular some time ago and had a lot of investments from VMWare (former Spring stack owner). Later, the ownership was transferred to <a href="http://www.disid.com">DISIG</a>.</p>

<p>Spring Roo is code generation framework, built on top of Spring stack. It&rsquo;s useful for quick prototyping.</p>

<a name="JBoss.Forge"></a>
<h3>JBoss Forge</h3>

<p><a href="http://forge.jboss.org/">JBoss Forge</a> is conceptually equal to Spring Roo, but linked to Java EE stack (like <a href="http://wildfly.org/">Wildfly</a>, <a href="http://tomee.apache.org/apache-tomee.html">TomEE</a>) and Maven. It&rsquo;s relly cool if you work with Java EE a lot. Forge is shine in prototyping and code generation. Community looks vibrant and active.</p>

<a name="AppFuse"></a>
<h3>AppFuse</h3>

<p><a href="http://appfuse.org/">AppFuse</a> can be called as ramp-up framework. The main goal is to quickly generate project with pre-onfigured functionality (see <code>mvn archetype:generate</code>).</p>

<a name="JHipster"></a>
<h3>JHipster</h3>

<p><a href="https://jhipster.github.io/">JHipster</a> is brand new and based on Spring Boot and Angular.js v.1.x. Classical code generation like in Forge or Spring Roo. But, code generation is build on top of node.js tool <a href="http://yeoman.io/">Yeoman</a>. Concept is very interesting, especially when it uses so hipster&rsquo;s technologies ;-).
It can generate both back-end (REST endpoint) and front-end (Angular.js Single-page application), even <a href="http://www.liquibase.org/">Liquibase</a> migrations (which is cool too).</p>

<a name="Domain-driven.Frameworks"></a>
<h2>Domain-driven Frameworks</h2>

<p>There is a very special category Domain-driven frameworks. For this category I&rsquo;ve selected two most popular frameworks: <a href="http://www.openxava.org/">OpenXava</a> and <a href="http://isis.apache.org/">Apache Isis</a>. The main idea is that they can generate views and RESTs based on domain entities. Both frameworks have active community. They have &ldquo;own&rdquo; concepts and no hipsters technologies. The usage domain is very narrow, I guess they can be easily used to quickly general application&rsquo;s back-offices (aka admin pages) and prototyping.</p>

<a name="Others"></a>
<h2>Others</h2>

<p>There are several others frameworks <a href="http://www.ninjaframework.org/">Ninja</a>, <a href="http://javalite.io/">Javalight</a>, <a href="http://joddframework.org/">Jodd</a>, <a href="http://jooby.org/">Jobby</a> and <a href="https://github.com/airlift/airlift">airlift</a>. They are build by small communities (or my single developer) and have some applications. But, it&rsquo;s risky to invest in them. You can look into because of curiosity, but not more. As for me it&rsquo;s much safe to use Play/Grails than some unpopular frameworks.</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>So, Java ecosystem has two full stack frameworks which use Java language minimally: <strong>Grails</strong> (Groovy/Java) and <strong>Play</strong> (Scala/Java). Also, we have a bunch of code generation frameworks and domain-driven frameworks (which occupy really special niche).</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li>Full stack

<ul>
<li><a href="https://grails.org/">Grails</a></li>
<li><a href="https://www.playframework.com/">Play Framework 2</a></li>
</ul>
</li>
<li>Code Generation

<ul>
<li><a href="http://projects.spring.io/spring-roo/">Spring Roo</a></li>
<li><a href="http://forge.jboss.org/">JBoss Forge</a></li>
<li><a href="http://appfuse.org/">AppFuse</a></li>
<li><a href="https://jhipster.github.io/">JHipster</a></li>
</ul>
</li>
<li>DD Frameworks

<ul>
<li><a href="http://www.openxava.org/">OpenXava</a></li>
<li><a href="https://www.cuba-platform.com">Cuba-platform</a> - CUBA Platform is free for applications with up to 5 concurrent sessions.</li>
<li><a href="http://isis.apache.org/">Apache Isis</a></li>
</ul>
</li>
<li>Others

<ul>
<li><a href="http://www.ninjaframework.org/">Ninja</a></li>
<li><a href="http://javalite.io/">Javalight</a></li>
<li><a href="http://jodd.org/">Jodd</a> and <a href="http://joddframework.org/">Jodd µicro frameworks</a></li>
<li><a href="http://jooby.org/">Jobby</a></li>
<li><a href="https://github.com/airlift/airlift">airlift</a></li>
<li><a href="http://www.web4j.com/">Web4j</a></li>
<li><a href="http://rifers.org/">Rife</a> - dead</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Architecture and Scalability]]></title>
    <link href="http://halyph.com/blog/2015/04/04/rails-architecture-and-scalability-issues/"/>
    <updated>2015-04-04T19:17:12+03:00</updated>
    <id>http://halyph.com/blog/2015/04/04/rails-architecture-and-scalability-issues</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/ruby.png"></p>

<p><ul>
 <li>
 <ul>
  <li><a href="#Rails.deployment.architecture">Rails deployment architecture</a>
  <ul>
   <li><a href="#Simple.Rails.Setup">Simple Rails Setup</a></li>
   <li><a href="#Typical.Rails.Setup">Typical Rails Setup</a></li>
   <li><a href="#Application.server..Phusion.Passenger.">Application server (Phusion Passenger)</a></li>
  </ul>
  </li>
  <li><a href="#Recommended.Rails.Application.Setups">Recommended Rails Application Setups</a>
  <ul>
   <li><a href="#Small.Site">Small Site</a></li>
   <li><a href="#Medium.Site">Medium Site</a></li>
   <li><a href="#Large.Site">Large Site</a></li>
  </ul>
  </li>
  <li><a href="#Scale.up.Traditional.Rails.Application">Scale up Traditional Rails Application</a>
  <ul>
   <li><a href="#Caching">Caching</a></li>
   <li><a href="#Long-runnint.task.scaling">Long-runnint task scaling</a></li>
  </ul>
  </li>
  <li><a href="#Rails.moving.towards.SOA.and.micro.services">Rails moving towards SOA and micro services</a>
  <ul>
   <li><a href="#Splitting.application.into.small.pieces">Splitting application into small pieces</a></li>
   <li><a href="#Reference..sample..service.orienter...micro.service.architecture">Reference (sample) service orienter / micro service architecture</a>
   <ul>
    <li><a href="#Groupon">Groupon</a></li>
    <li><a href="#Flipcart">Flipcart</a></li>
    <li><a href="#Gilt">Gilt</a>
</li>
   </ul>
   </li>
  </ul>
  </li>
  <li><a href="#Conclusion">Conclusion</a></li>
  <li><a href="#Rails.related.tech.components">Rails related tech components</a>
  <ul>
   <li><a href="#Web.Servers...Proxy">Web Servers / Proxy</a></li>
   <li><a href="#Application.Servers">Application Servers</a></li>
   <li><a href="#Libraries...Tools">Libraries / Tools</a></li>
  </ul>
  </li>
  <li><a href="#References">References</a></li>
 </ul>
 </li>
</ul>

</p>

<p>Everybody know when this <em>&ldquo;Rails doesn&rsquo;t scale&rdquo;</em> has been begun:</p>

<ul>
<li><strong>2009</strong> <a href="http://www.artima.com/scalazine/articles/twitter_on_scala.html">Twitter message queue back-end moved from Ruby to Scala</a></li>
<li><strong>2011</strong> <a href="https://blog.twitter.com/2011/twitter-search-now-3x-faster">Twitter Search is Now 3x Faster</a></li>
</ul>


<blockquote><p>Panic, we must not use <strong>Ruby on Rails</strong> because Twitter had scalability problems.</p></blockquote>

<p>I&rsquo;m a Java developer who love Ruby language, but don&rsquo;t write anything in Rails. Despite this I&rsquo;ve decided to look into this famous <em>&ldquo;Rails doesn&rsquo;t scale&rdquo;</em> statement deeper to understand the root cause of this problem.</p>

<p>So, I <a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">collected</a> public available Ruby on Rails architecture and scalability case studies (videos of conference talks, reports and blog posts) and tried to extract the general patterns of architecture and scalability issues.</p>

<p>There are two type of scalability issues:</p>

<ol>
<li><strong>Application performance</strong> - when web application can&rsquo;t handle huge traffic</li>
<li><strong>Delivery velocity</strong> - when it&rsquo;s become hard to make changes in big Rails application, run quick tests, deploy it and manage big team</li>
</ol>


<p><em>Note</em>: You are not another &ldquo;twitter&rdquo; to worry about scalability issues right from beginning of the project (there are fewer web apps on the Internet to get enough traffic to even care about scalability). Your goal is to push your product as quick as possible.
But, in the same time you&rsquo;d like to use Rails (due to it&rsquo;s productivity) and make you potentially application scalable (in all possible terms)</p>

<p>The most interesting that scalability is about architecture, databases, caching, event queues, disk IO and less about Rails framework.</p>

<a name="Rails.deployment.architecture"></a>
<h2>Rails deployment architecture</h2>

<p>Let&rsquo;s review the common Rails deployment approaches (see <a href="http://www.slideshare.net/jweiss/deployment-with-ruby-on-rails">Deployment with Ruby on Rails</a>)</p>

<a name="Simple.Rails.Setup"></a>
<h3>Simple Rails Setup</h3>

<p>One Rails instance handles all requests. Rails is single-threaded: There is only one concurrent request.</p>

<p><img src="http://halyph.com/images/posts/2015-04-04/pic1.jpg"></p>

<a name="Typical.Rails.Setup"></a>
<h3>Typical Rails Setup</h3>

<ul>
<li>A load-balancer distributes the incoming requests</li>
<li>Some load-balancers will deliver static requests themselves</li>
<li>Several Rails instances handle all requests</li>
<li>Number of concurrent requests equals number of Rails instances</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-04-04/pic2.jpg"></p>

<a name="Application.server..Phusion.Passenger."></a>
<h3>Application server (Phusion Passenger)</h3>

<ul>
<li>Involving Phusion Passenger application server</li>
<li>Makes setup easier on the single machine level</li>
<li>Multiple servers still require load balancer</li>
<li>Suitable for mass-hosting</li>
<li>upcoming standard way of deploying Rails</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-04-04/pic3.jpg"></p>

<a name="Recommended.Rails.Application.Setups"></a>
<h2>Recommended Rails Application Setups</h2>

<a name="Small.Site"></a>
<h3>Small Site</h3>

<p>Apache with mod_rails/Phusion Passenger</p>

<p><img src="http://halyph.com/images/posts/2015-04-04/pic4.jpg"></p>

<a name="Medium.Site"></a>
<h3>Medium Site</h3>

<ul>
<li>Apache/Nginx as frontend proxy</li>
<li>Passanger as backend</li>
<li>Deliver static files with Apache/Nginx</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-04-04/pic5.jpg"></p>

<a name="Large.Site"></a>
<h3>Large Site</h3>

<ul>
<li>Redundant load-ballancer</li>
<li>Redundant proxy</li>
<li>Phusion Passenger/mod_rails</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-04-04/pic6.jpg"></p>

<a name="Scale.up.Traditional.Rails.Application"></a>
<h2>Scale up Traditional Rails Application</h2>

<a name="Caching"></a>
<h3>Caching</h3>

<p>There might be the cases when it&rsquo;s not enought and in this case we should start looking in &ldquo;cashing&rdquo; direction via involving Memcahed and/or Redis <em>(based on Konstantin’s Gredeskoul slides)</em></p>

<p><img src="http://halyph.com/images/posts/2015-04-04/pic7.jpg"></p>

<a name="Long-runnint.task.scaling"></a>
<h3>Long-runnint task scaling</h3>

<p><em>(based on Konstantin’s Gredeskoul slides)</em></p>

<ul>
<li>Background jobs with Reques (it sits on top of Redis)</li>
<li>Use Solr/Elasticsearch instead of doing complex joins</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-04-04/pic8.jpg"></p>

<a name="Rails.moving.towards.SOA.and.micro.services"></a>
<h2>Rails moving towards SOA and micro services</h2>

<p>The shown above architectures are related to <strong>Monolith Architecture</strong>. This type of architecture has some problems:</p>

<ul>
<li>Development pain points:</li>
<li>effective controllers and models have a lot of logic

<ul>
<li>~1000 Models/Controllers, 200K LOC, 100s of jobs</li>
</ul>
</li>
<li>Merge issues arise in big team (20-30+)</li>
<li>Lots of contributors and no ownership</li>
<li>Difficult deployments with long integration cycles</li>
<li>Tests are not green, it&rsquo;s really hard to support stable test quality</li>
</ul>


<p>The monolithic Rails app should evolve into ecosystems of connected services. It&rsquo;s becoming quite common for Rails apps to be working mainly as <a href="https://github.com/halyph/architecture-case-study/blob/master/rails-as-an-soa-client-by-pete-hodgson.md">clients</a> to other services.</p>

<a name="Splitting.application.into.small.pieces"></a>
<h3>Splitting application into small pieces</h3>

<ul>
<li>Split into smaller applications (based on Konstantin&rsquo;s Gredeskoul <a href="http://www.slideshare.net/kigster/enterprise-architectures-with-ruby-and-rails">slides</a>)

<ul>
<li>Contains web UI, logic and data

<ul>
<li>Extract look and feel into gem to share across apps</li>
</ul>
</li>
<li>May combine with other apps</li>
<li>May rely on common libraries</li>
<li>Typically run in their own Ruby VM</li>
</ul>
</li>
<li>Extract services and create APIs

<ul>
<li>Create client API wrapper gems for consumers</li>
</ul>
</li>
<li>Extract libraries (gems)

<ul>
<li>Create shared based client gem library</li>
</ul>
</li>
</ul>


<p><img src="http://halyph.com/images/posts/2015-04-04/pic9.jpg"></p>

<a name="Reference..sample..service.orienter...micro.service.architecture"></a>
<h3>Reference (sample) service orienter / micro service architecture</h3>

<p>Now, we have more than one Rails application and many service which are communicating using messaging, distributed cashed, etc.</p>

<a name="Groupon"></a>
<h4><a href="https://github.com/halyph/architecture-case-study/blob/master/groupon.md">Groupon</a></h4>

<p><img src="http://halyph.com/images/posts/2015-04-04/pic10.png"></p>

<a name="Flipcart"></a>
<h4><a href="https://github.com/halyph/architecture-case-study/blob/master/flipcart.md">Flipcart</a></h4>

<p><img src="http://halyph.com/images/posts/2015-04-04/pic11.jpg"></p>

<a name="Gilt"></a>
<h4><a href="https://github.com/halyph/architecture-case-study/blob/master/gilt.md">Gilt</a></h4>

<p><img src="http://halyph.com/images/posts/2015-04-04/pic12.jpg"></p>

<p>I&rsquo;ve collect much more case studies, see <a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">here</a>.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Moving Monolith Rails application to micro service architecture it&rsquo;s not one shot action. It&rsquo;s long run with lots of trade offs. And more over, micro service architecture is not silver bullet, it&rsquo;s just one alternative way to scale your application (see [Recommended Rails Application Setups][#Recommended.Rails.Application.Setups]).</p>

<p>The key idea is to develop your application with <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP (Single responsibility principle)</a> in mind. The more modular your application the more scalable it&rsquo;s.</p>

<p>I&rsquo;m planning to add more architecture case studies to my <a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">collection</a> (not only Rails related). Stay tuned.</p>

<a name="Rails.related.tech.components"></a>
<h2>Rails related tech components</h2>

<p>Collection of major technology components mentioned in case studies.</p>

<a name="Web.Servers...Proxy"></a>
<h3>Web Servers / Proxy</h3>

<ul>
<li><a href="http://httpd.apache.org/">Apache</a></li>
<li><a href="http://nginx.org/">Nginx</a></li>
<li><a href="http://www.haproxy.org/">HAProxy</a></li>
</ul>


<a name="Application.Servers"></a>
<h3>Application Servers</h3>

<ul>
<li><a href="http://unicorn.bogomips.org/">Unicorn</a></li>
<li><a href="https://www.phusionpassenger.com">Phusion Passenger</a></li>
<li><a href="http://puma.io/">Puma</a></li>
<li><a href="http://code.macournoyer.com/thin/">Thin</a></li>
</ul>


<a name="Libraries...Tools"></a>
<h3>Libraries / Tools</h3>

<ul>
<li><a href="http://redis.io/">Redis</a></li>
<li><a href="http://memcached.org/">Memcached</a></li>
<li><a href="https://github.com/resque/resque">Reque</a></li>
<li><a href="http://sidekiq.org/">Sidekiq</a></li>
<li><a href="http://lucene.apache.org/solr/">Solr</a></li>
<li><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="https://github.com/halyph/architecture-case-study#ruby-on-rails-architecture-case-studies">Collection of Ruby on Rails Architecture Case Studies</a>

<ul>
<li><a href="http://www.slideshare.net/jweiss/deployment-with-ruby-on-rails">Deployment with Ruby on Rails</a></li>
<li><a href="http://www.slideshare.net/kigster/enterprise-architectures-with-ruby-and-rails">Enterprise Architectures with Ruby (and Rails)</a></li>
</ul>
</li>
<li><a href="http://www.quora.com/Does-Ruby-on-Rails-scale">Does Ruby on Rails scale</a> - Quora</li>
<li>&ldquo;Keeping Your Massive Rails App From Turning Into a S#!t Show with Benjamin Smith&rdquo; (see <a href="https://vimeo.com/76094344">video</a> and <a href="https://speakerdeck.com/benjaminleesmith/keeping-your-massive-rails-app-from-turning-into-a-s-number-t-show-windycityrails-2013">slides</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Download Jars From Maven Central]]></title>
    <link href="http://halyph.com/blog/2015/03/17/how-to-download-jars-from-maven-central/"/>
    <updated>2015-03-17T18:00:00+02:00</updated>
    <id>http://halyph.com/blog/2015/03/17/how-to-download-jars-from-maven-central</id>
    <content type="html"><![CDATA[<center>
<img src="http://halyph.com/images/blog/java.png">
<img src="http://halyph.com/images/blog/ivy.png">
<img src="http://halyph.com/images/blog/maven.png">
</center>


<p>We know how to download Java libraries with it&rsquo;s dependencies (transitive included) via Maven <em>pom.xml</em>, Ant/Ivy <em>build.xml</em> script, Gradle <em>build.gradle</em> script etc.
But what if we need to download them without these scripts.</p>

<p>There are several ways to do this.
Assume that we&rsquo;d like to download <code>spark-core</code> library (<code>groupId=com.sparkjava, artifactId=spark-core, version=2.1</code>) with all dependencies from <a href="http://search.maven.org/#artifactdetails%7Ccom.sparkjava%7Cspark-core%7C2.1%7Cjar">Maven Central</a> into <code>lib</code> folder.</p>

<a name="Use.Maven3.dependency.plugin"></a>
<h2>Use Maven3 dependency plugin</h2>

<p>Here is there variants for lib download:</p>

<figure class='code'><figcaption><span>Download library with all dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Specify repoUrl (it&#39;s optional)</span>
</span><span class='line'>mvn dependency:get -DrepoUrl<span class="o">=</span>http://download.java.net/maven/2/ -DgroupId<span class="o">=</span>com.sparkjava -DartifactId<span class="o">=</span>spark-core -Dversion<span class="o">=</span>2.1
</span><span class='line'>
</span><span class='line'><span class="c"># OR use default repoUrl</span>
</span><span class='line'>mvn dependency:get -DgroupId<span class="o">=</span>com.sparkjava -DartifactId<span class="o">=</span>spark-core -Dversion<span class="o">=</span>2.1
</span><span class='line'>
</span><span class='line'><span class="c"># OR use parameter artifact as groupId:artifactId:version</span>
</span><span class='line'>mvn dependency:get -Dartifact<span class="o">=</span>com.sparkjava:spark-core:2.1
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to copy just downloaded artifacts in our working directory:</p>

<figure class='code'><figcaption><span>Copy jars from local maven repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn dependency:copy-dependencies -f <span class="nv">$HOME</span>/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.pom -DoutputDirectory<span class="o">=</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/lib
</span><span class='line'><span class="c"># the previous command doesn&#39;t copy spark-core-x.x.jar, that&#39;s why we should copy it manually</span>
</span><span class='line'>cp <span class="nv">$HOME</span>/.m2/repository/com/sparkjava/spark-core/2.1/spark-core-2.1.jar <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/lib
</span></code></pre></td></tr></table></div></figure>


<a name="Use.standalone.Ivy"></a>
<h2>Use standalone Ivy</h2>

<p>We can use Ivy as standalone jar to download Maven dependencies without creating Ant build file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 1. Download the latest ivy jar (currently it&#39;s v.2.4.0)</span>
</span><span class='line'>curl -L -O http://search.maven.org/remotecontent?filepath<span class="o">=</span>org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar
</span><span class='line'>
</span><span class='line'><span class="c"># 2. Run ivy.jar to retrieve all dependencies</span>
</span><span class='line'>java -jar ivy-2.4.0.jar -dependency com.sparkjava spark-core 2.1 -retrieve <span class="s2">&quot;lib/[artifact]-[revision](-[classifier]).[ext]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see Ivy downloads approach is much simpler. The only cons (or pros, it depends) that <strong>ivy.jar</strong> should be additionally downloaded.</p>

<a name="Calling.Ivy.from.Groovy.or.Java"></a>
<h2>Calling Ivy from Groovy or Java</h2>

<p>Here I&rsquo;ve decided to store <a href="http://makandracards.com/evgeny-goldin/5817-calling-ivy-from-groovy-or-java">Evgeny&rsquo;s Goldin</a> code snippet as a reference for myself. Programmatic artifacts downloads is not a common operation. It&rsquo;s alway nice to know the general concept how it can be done. Especially when Ivy documentation is not very informative.</p>

<figure class='code'><figcaption><span>Groovy snippet of calling Ivy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.Ivy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.core.module.descriptor.DefaultDependencyDescriptor</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.core.module.id.ModuleRevisionId</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.core.resolve.ResolveOptions</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.core.settings.IvySettings</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.plugins.resolver.URLResolver</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.core.report.ResolveReport</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorWriter</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">File</span> <span class="nf">resolveArtifact</span><span class="o">(</span><span class="n">String</span> <span class="n">groupId</span><span class="o">,</span> <span class="n">String</span> <span class="n">artifactId</span><span class="o">,</span> <span class="n">String</span> <span class="n">version</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//creates clear ivy settings</span>
</span><span class='line'>        <span class="n">IvySettings</span> <span class="n">ivySettings</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IvySettings</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//url resolver for configuration of maven repo</span>
</span><span class='line'>        <span class="n">URLResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URLResolver</span><span class="o">();</span>
</span><span class='line'>        <span class="n">resolver</span><span class="o">.</span><span class="na">setM2compatible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">resolver</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="err">&#39;</span><span class="n">central</span><span class="err">&#39;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//you can specify the url resolution pattern strategy</span>
</span><span class='line'>        <span class="n">resolver</span><span class="o">.</span><span class="na">addArtifactPattern</span><span class="o">(</span>
</span><span class='line'>            <span class="err">&#39;</span><span class="nl">http:</span><span class="c1">//repo1.maven.org/maven2/[organisation]/[module]/[revision]/[artifact](-[revision]).[ext]&#39;);</span>
</span><span class='line'>        <span class="c1">//adding maven repo resolver</span>
</span><span class='line'>        <span class="n">ivySettings</span><span class="o">.</span><span class="na">addResolver</span><span class="o">(</span><span class="n">resolver</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//set to the default resolver</span>
</span><span class='line'>        <span class="n">ivySettings</span><span class="o">.</span><span class="na">setDefaultResolver</span><span class="o">(</span><span class="n">resolver</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">//creates an Ivy instance with settings</span>
</span><span class='line'>        <span class="n">Ivy</span> <span class="n">ivy</span> <span class="o">=</span> <span class="n">Ivy</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">ivySettings</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">File</span> <span class="n">ivyfile</span> <span class="o">=</span> <span class="n">File</span><span class="o">.</span><span class="na">createTempFile</span><span class="o">(</span><span class="err">&#39;</span><span class="n">ivy</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">.</span><span class="na">xml</span><span class="err">&#39;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ivyfile</span><span class="o">.</span><span class="na">deleteOnExit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">dep</span> <span class="o">=</span> <span class="o">[</span><span class="n">groupId</span><span class="o">,</span> <span class="n">artifactId</span><span class="o">,</span> <span class="n">version</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DefaultModuleDescriptor</span> <span class="n">md</span> <span class="o">=</span>
</span><span class='line'>                <span class="n">DefaultModuleDescriptor</span><span class="o">.</span><span class="na">newDefaultInstance</span><span class="o">(</span><span class="n">ModuleRevisionId</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">dep</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span>
</span><span class='line'>                <span class="n">dep</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="err">&#39;</span><span class="o">-</span><span class="n">caller</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">working</span><span class="err">&#39;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DefaultDependencyDescriptor</span> <span class="n">dd</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultDependencyDescriptor</span><span class="o">(</span><span class="n">md</span><span class="o">,</span>
</span><span class='line'>                <span class="n">ModuleRevisionId</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">dep</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">dep</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">dep</span><span class="o">[</span><span class="mi">2</span><span class="o">]),</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">md</span><span class="o">.</span><span class="na">addDependency</span><span class="o">(</span><span class="n">dd</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//creates an ivy configuration file</span>
</span><span class='line'>        <span class="n">XmlModuleDescriptorWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">md</span><span class="o">,</span> <span class="n">ivyfile</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">confs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="k">default</span><span class="err">&#39;</span><span class="o">];</span>
</span><span class='line'>        <span class="n">ResolveOptions</span> <span class="n">resolveOptions</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ResolveOptions</span><span class="o">().</span><span class="na">setConfs</span><span class="o">(</span><span class="n">confs</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//init resolve report</span>
</span><span class='line'>        <span class="n">ResolveReport</span> <span class="n">report</span> <span class="o">=</span> <span class="n">ivy</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">ivyfile</span><span class="o">.</span><span class="na">toURL</span><span class="o">(),</span> <span class="n">resolveOptions</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//so you can get the jar library</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">jarArtifactFile</span> <span class="o">=</span> <span class="n">report</span><span class="o">.</span><span class="na">getAllArtifactsReports</span><span class="o">()[</span><span class="mi">0</span><span class="o">].</span><span class="na">getLocalFile</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">jarArtifactFile</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">resolveArtifact</span><span class="o">(</span> <span class="err">&#39;</span><span class="n">log4j</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">log4j</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">16</span><span class="err">&#39;</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/15450383/using-maven-to-download-dependencies-to-a-directory-on-the-command-line/15456621">Using Maven to download dependencies to a directory on the command line - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/15598612/simplest-ivy-code-to-programmatically-retrieve-dependency-from-maven-central">Simplest Ivy code to programmatically retrieve dependency from Maven Central - Stack Overflow</a></li>
<li><a href="http://makandracards.com/evgeny-goldin/5817-calling-ivy-from-groovy-or-java">Calling Ivy from Groovy or Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Octopress on Windows?]]></title>
    <link href="http://halyph.com/blog/2015/02/17/how-to-install-octopress-on-windows/"/>
    <updated>2015-02-17T18:53:27+02:00</updated>
    <id>http://halyph.com/blog/2015/02/17/how-to-install-octopress-on-windows</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/ruby.png"></p>

<p>I&rsquo;ve been using <a href="http://octopress.org/">Octopress</a> on Mac OS X (i.e. have no problem). But, recently I&rsquo;ve decided to run my blog on Windows machine and felt pain. Ahh, <a href="http://octopress.org/">Octopress</a> uses bunch of native extentions which actually cause a lot of cross-platform issues. My first attempt was to try <a href="http://jruby.org/">JRuby</a> due to his better Windows support, but got this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install
</span><span class='line'>Fetching gem metadata from https://rubygems.org/.........
</span><span class='line'>Installing rake (10.4.2)
</span><span class='line'>Installing RedCloth (4.2.9)
</span><span class='line'>Using blankslate (2.1.2.4)
</span><span class='line'>Installing hitimes (1.2.2)
</span><span class='line'>Installing timers (4.0.1)
</span><span class='line'>Installing celluloid (0.16.0)
</span><span class='line'>Installing chunky_png (1.3.3)
</span><span class='line'>Installing fast-stemmer (1.0.2) with native extensions
</span><span class='line'>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension
</span><span class='line'>.
</span><span class='line'>        D:/Tools/JRuby/jruby-1.7.0/bin/jruby.exe extconf.rb NotImplementedError: C extension support is not enabled. Pass -Xcext.enabled=true to JRuby or set JRUBY_OPTS or modify .jrubyrc to enable.
</span><span class='line'>
</span><span class='line'>   (root) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/mkmf.rb:8  require at org/jruby/RubyKernel.java:1019
</span><span class='line'>   (root) at D:/Tools/JRuby/jruby-1.7.0/lib/ruby/shared/rubygems/custom_require.rb:1
</span><span class='line'>   (root) at extconf.rb:1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Gem files will remain installed in D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2 for inspection.
</span><span class='line'>Results logged to D:/Tools/JRuby/jruby-1.7.0/lib/ruby/gems/shared/gems/fast-stemmer-1.0.2/ext/gem_make.out
</span><span class='line'>An error occurred while installing fast-stemmer (1.0.2), and Bundler cannot continue.
</span><span class='line'>Make sure that `gem install fast-stemmer -v '1.0.2'` succeeds before bundling.</span></code></pre></td></tr></table></div></figure>


<p>There is JRuby version of <code>fast-stemmer</code> gem called <a href="https://github.com/caius/jruby-stemmer"><code>jruby-stemmer</code></a>. But, I&rsquo;m not ready to maitain this. That&rsquo;s why I&rsquo;ve decided to use <a href="http://rubyinstaller.org/">RubyInstaller</a>.</p>

<a name="Install.Ruby.on.Windows.and.SSL.issues"></a>
<h2>Install Ruby on Windows and SSL issues</h2>

<ol>
<li><p>Download (<code>rubyinstaller-2.1.5-x64.exe</code> in my case) and install <a href="http://rubyinstaller.org/">RubyInstaller</a>. I installed in <code>d:\Tools\Ruby\Ruby21-x64\</code> folder.</p></li>
<li><p>Check <code>rubygems</code> via running <code>gem update</code> and you should get the next error:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem update
</span><span class='line'>Updating installed gems
</span><span class='line'>ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)
</span><span class='line'>    SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://api.rubygems.org/specs.4.8.gz)</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s well known <code>rubygems</code> issues with ready to use <a href="https://gist.github.com/luislavena/f064211759ee0f806c88">solution</a>:</p>

<ul>
<li>Step 1: Obtain the new trust certificate, download it <a href="https://raw.githubusercontent.com/rubygems/rubygems/master/lib/rubygems/ssl_certs/AddTrustExternalCARoot-2048.pem">AddTrustExternalCARoot-2048.pem</a> in some temp folder</li>
<li>Step 2: Locate RubyGems certificate directory in your installation (in my case it&rsquo;s <code>D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/</code> )</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem which rubygems
</span><span class='line'>D:/Tools/Ruby/Ruby21-x64/lib/ruby/2.1.0/rubygems.rb</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Step 3: Copy new trust certificate into <code>D:\Tools\Ruby\Ruby21-x64\lib\ruby\2.1.0\rubygems\ssl_certs</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ copy AddTrustExternalCARoot-2048.pem D:\Tools\Ruby\Ruby21-x64\lib\ruby\2.1.0\rubygems\ssl_certs</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Step 4: Now You should be able to run gem update without any issues</li>
</ul>


<a name="Prepapre.environment.for.Octopress"></a>
<h2>Prepapre environment for Octopress</h2>

<p>Now it&rsquo;s time to clone <a href="http://octopress.org/">Octopress</a> blog and run it. Unfortunatelly, there are some minor issues which still must be fixed.</p>

<a name="Fix..Octopress..native.extentions.issues"></a>
<h3>Fix <a href="http://octopress.org/">Octopress</a> native extentions issues</h3>

<p>We know that <a href="http://octopress.org/">Octopress</a> uses native extentions thats why we have to additionally install <a href="http://cdn.rubyinstaller.org/archives/devkits/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">Development Kit</a></p>

<ul>
<li>Download and unpack it in adjacent to Ruby install folder (<code>d:\Tools\Ruby\DevKit_2.1_x64\</code> in my case)</li>
<li>Link <a href="http://cdn.rubyinstaller.org/archives/devkits/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">Development Kit</a> installation to previously installed Ruby

<ul>
<li>Go to <a href="http://cdn.rubyinstaller.org/archives/devkits/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">Development Kit</a> install folder <code>d:\Tools\Ruby\DevKit_2.1_x64\</code></li>
<li>Run <code>ruby dk.rb init</code> which generate <code>config.yml</code>. Open <code>config.yml</code> and add <code>- D:/Tools/Ruby/Ruby21-x64</code> to the end of this file.</li>
<li>Run <code>ruby dk.rb install</code></li>
</ul>
</li>
</ul>


<p>See my <em>Development Kit</em> <code>config.yml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This configuration file contains the absolute path locations of all
</span><span class='line'># installed Rubies to be enhanced to work with the DevKit. This config
</span><span class='line'># file is generated by the 'ruby dk.rb init' step and may be modified
</span><span class='line'># before running the 'ruby dk.rb install' step. To include any installed
</span><span class='line'># Rubies that were not automagically discovered, simply add a line below
</span><span class='line'># the triple hyphens with the absolute path to the Ruby root directory.
</span><span class='line'>#
</span><span class='line'># Example:
</span><span class='line'>#
</span><span class='line'># ---
</span><span class='line'># - C:/ruby19trunk
</span><span class='line'># - C:/ruby192dev
</span><span class='line'>#
</span><span class='line'>---
</span><span class='line'>- D:/Tools/Ruby/Ruby21-x64</span></code></pre></td></tr></table></div></figure>


<a name="Install.Python"></a>
<h3>Install Python</h3>

<p>The default syntax highlighting engine in Octopress/Jekyll is <a href="http://pygments.org/">Pygments</a>. It&rsquo;s requires Python v.2.7.x. Simply download <a href="https://www.python.org/downloads/release/python-278/">Python v.2.7.8</a> and add it on system <code>PATH</code>.</p>

<a name="Final.steps"></a>
<h3>Final steps</h3>

<p>I assume that blog was previously cloned. Now, we should perform &ldquo;traditional&rdquo; Ruby project ceremony:</p>

<ul>
<li>Install <code>budler</code> via <code>gem install bundler</code></li>
<li>Setup all required gems <code>bundle install</code></li>
<li>Run <a href="http://octopress.org/">Octopress</a> preview <code>rake preview</code></li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://blog.zerosharp.com/setting-up-octopress-on-windows/">Octopress on Windows and GitHub</a></li>
<li><a href="http://thaiat.github.io/blog/2014/03/13/how-to-install-and-use-octopress-on-windows/">How to Install and Use Octopress on Windows</a></li>
<li><a href="http://octopress.org/">Octopress</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Flow for Simple App Creation]]></title>
    <link href="http://halyph.com/blog/2015/02/13/maven-flow-for-simple-app-creation/"/>
    <updated>2015-02-13T00:18:30+02:00</updated>
    <id>http://halyph.com/blog/2015/02/13/maven-flow-for-simple-app-creation</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png"></p>

<p>I provided my reflections about <em>&ldquo;Java for Everything&rdquo;</em> in the previous <a href="http://halyph.com/blog/2015/02/13/do-we-need-java-for-everything">post</a>.
Here we will review other implementation of this concept.</p>

<p>I have the next concerns about any Java application (big or small):</p>

<ul>
<li>library dependency management must be simple</li>
<li>it&rsquo;s very bad practice to distribute sources along with libraries (dependency management tools must be used instead: Ivy, Maven, Gradle, etc.)</li>
<li>small application might have a little bit different project layout (not equals to traditional Maven layout)</li>
<li>we should be able to setup IDE (in my case <a href="https://www.jetbrains.com/idea/">Intellij IDEA</a>) as quick a possible. I hate editing Java programs in plain text editor</li>
<li>it must be a convenient way to run Java application with different arguments in <em>production</em> and <em>development</em> modes</li>
</ul>


<a name="Use.Case"></a>
<h2>Use Case</h2>

<p>We have to create simple and small REST application based on <a href="https://github.com/perwendel/spark">Spark Java framework</a> (A Sinatra inspired framework for Java).</p>

<p>Here is the source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">spark</span><span class="o">.</span><span class="na">Spark</span><span class="o">.</span><span class="na">get</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">spark</span><span class="o">.</span><span class="na">SparkBase</span><span class="o">.</span><span class="na">port</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">NumberFormatException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">arg:</span> <span class="n">args</span><span class="o">)</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;&gt; %s&quot;</span><span class="o">,</span> <span class="n">arg</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here is the list of issues:</p>

<ul>
<li>get Spark dependency with all transitive dependencies</li>
<li>pass command-line arguments into the app</li>
<li>use this application in development mode and in &ldquo;production&rdquo; (packed in jar)</li>
</ul>


<a name="Traditional.Maven.Way"></a>
<h2>Traditional Maven Way</h2>

<ul>
<li>Generate empty project via Maven archetype</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn archetype:generate <span class="se">\</span>
</span><span class='line'>-DgroupId<span class="o">=</span>com.halyph <span class="se">\ </span>
</span><span class='line'>-DartifactId<span class="o">=</span>sparkblog <span class="se">\ </span>
</span><span class='line'>-Dpackage<span class="o">=</span>com.halyph.blog <span class="se">\ </span>
</span><span class='line'>-Dversion<span class="o">=</span>1.0-SNAPSHOT <span class="se">\</span>
</span><span class='line'>-DarchetypeGroupId<span class="o">=</span>org.apache.maven.archetypes <span class="se">\ </span>
</span><span class='line'>-DarchetypeArtifactId<span class="o">=</span>maven-archetype-quickstart <span class="se">\</span>
</span><span class='line'>-DinteractiveMode<span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Open this in IDEA (I don&rsquo;t use other IDEs) via &ldquo;Open File or Project&rdquo; and select folder with generated <strong>pom.xml</strong> file. We don&rsquo;t need tests, so we can delete <em>src->test</em> folder and remove junit dependency from <strong>pom.xml</strong> file. Now, we can easily run our application via IDE.</p></li>
<li><p>Add Spark framework dependency to <strong>pom.xml</strong> and update our <strong>App</strong> class</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.halyph<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>sparkblog<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>sparkblog<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>com.sparkjava<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>spark-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;target&gt;</span>1.8<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source&gt;</span>1.8<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">halyph</span><span class="o">.</span><span class="na">blog</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">spark</span><span class="o">.</span><span class="na">Spark</span><span class="o">.</span><span class="na">get</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">NumberFormatException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">myArgs</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;&gt; %s&quot;</span><span class="o">,</span> <span class="n">arg</span><span class="o">);</span>
</span><span class='line'>            <span class="n">myArgs</span> <span class="o">+=</span> <span class="n">arg</span> <span class="o">+</span> <span class="s">&quot; : &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">finalMyArgs</span> <span class="o">=</span> <span class="n">myArgs</span><span class="o">;</span>
</span><span class='line'>        <span class="n">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Hello World!\n args = &quot;</span> <span class="o">+</span> <span class="n">finalMyArgs</span><span class="o">;</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This application can be easily run via IDE, but lets run it via Maven</p>

<ul>
<li>We should use <a href="http://mojo.codehaus.org/exec-maven-plugin/usage.html">Exec Maven Plugin</a> to run the app with all dependencies</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn clean compile <span class="nb">exec</span>:java -Dexec.mainClass<span class="o">=</span><span class="s2">&quot;com.halyph.blog.App&quot;</span>  -Dexec.args<span class="o">=</span><span class="s2">&quot;9090 one 1 2&quot;</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Scanning <span class="k">for</span> projects...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Building sparkblog 1.0-SNAPSHOT
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-clean-plugin:2.4.1:clean <span class="o">(</span>default-clean<span class="o">)</span> @ sparkblog ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Deleting d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-resources-plugin:2.5:resources <span class="o">(</span>default-resources<span class="o">)</span> @ sparkblog ---
</span><span class='line'><span class="o">[</span>debug<span class="o">]</span> execute contextualize
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Using <span class="s1">&#39;UTF-8&#39;</span> encoding to copy filtered resources.
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> skip non existing resourceDirectory d:<span class="se">\M</span>yProjects<span class="se">\s</span>parkblog<span class="se">\s</span>rc<span class="se">\m</span>ain<span class="se">\r</span>esources
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-compiler-plugin:3.1:compile <span class="o">(</span>default-compile<span class="o">)</span> @ sparkblog ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Changes detected - recompiling the module!
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Compiling <span class="m">1</span> <span class="nb">source </span>file to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\c</span>lasses
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> &gt;&gt;&gt; <span class="nb">exec</span>-maven-plugin:1.2.1:java <span class="o">(</span>default-cli<span class="o">)</span> @ sparkblog &gt;&gt;&gt;
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> <span class="o">&lt;&lt;&lt;</span> <span class="nb">exec</span>-maven-plugin:1.2.1:java <span class="o">(</span>default-cli<span class="o">)</span> @ sparkblog <span class="o">&lt;&lt;&lt;</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- <span class="nb">exec</span>-maven-plugin:1.2.1:java <span class="o">(</span>default-cli<span class="o">)</span> @ sparkblog ---
</span><span class='line'>&gt; 9090&gt; one&gt; 1&gt; 2
</span><span class='line'><span class="o">[</span>Thread-1<span class="o">]</span> INFO spark.webserver.SparkServer - <span class="o">==</span> Spark has ignited ...
</span><span class='line'><span class="o">[</span>Thread-1<span class="o">]</span> INFO spark.webserver.SparkServer - &gt;&gt; Listening on 0.0.0.0:4567
</span><span class='line'><span class="o">[</span>Thread-1<span class="o">]</span> INFO org.eclipse.jetty.server.Server - jetty-9.0.2.v20130417
</span><span class='line'><span class="o">[</span>Thread-1<span class="o">]</span> INFO org.eclipse.jetty.server.ServerConnector - Started ServerConnector@4afe75c9<span class="o">{</span>HTTP/1.1<span class="o">}{</span>0.0.0.0:4567<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case the application run configurations is persistent (&ldquo;main&rdquo; class and CLI arguments are changing rarely) we can configure it in <strong>pom.xml</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      ...
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>exec-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>              <span class="nt">&lt;goal&gt;</span>java<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;mainClass&gt;</span>com.halyph.blog.App<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>          <span class="nt">&lt;arguments&gt;</span>
</span><span class='line'>            <span class="nt">&lt;argument&gt;</span>9090<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>            <span class="nt">&lt;argument&gt;</span>one<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>            <span class="nt">&lt;argument&gt;</span>1<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>            <span class="nt">&lt;argument&gt;</span>2<span class="nt">&lt;/argument&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/arguments&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>It&rsquo;s nice idea to use <code>mvn exec:java</code>, but it might be a little bit slow. So, we might decide to use some shell script which increase compiled application ramp up time. The problem is that the application have dependencies (which have transitive dependencies). I.e. <code>java</code> classpath have to be configured somehow.</li>
</ul>


<p>Well, I borrowed the ideas from &ldquo;<a href="http://saltnlight5.blogspot.com/2012/08/a-better-java-shell-script-wrapper.html">A better java shell script wrapper</a>&rdquo; script. Here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Copyright 2012 Zemian Deng</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># A wrapper script that run any Java application in unix/cygwin bash env.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This script is assumed to be located in an application&#39;s &quot;bin&quot; directory. It will</span>
</span><span class='line'><span class="c"># auto resolve its directory location relative to the application path (which is one</span>
</span><span class='line'><span class="c"># parent up from the script.) Therefore, this script can be run any where in the file</span>
</span><span class='line'><span class="c"># system and it will still reference the same application directory.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># This script will by default auto setup a Java classpath that picks up any &quot;config&quot;</span>
</span><span class='line'><span class="c"># and &quot;lib&quot; directories under the application directory. It also will also add a</span>
</span><span class='line'><span class="c"># any typical Maven project output directories such as &quot;target/test-classes&quot;,</span>
</span><span class='line'><span class="c"># &quot;target/classes&quot;, and &quot;target/dependency&quot; into classpath. This can be disable by</span>
</span><span class='line'><span class="c"># setting RUN_JAVA_NO_AUTOCP=1.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># If the &quot;Default parameters&quot; section bellow doesn&#39;t match to user&#39;s env, then user</span>
</span><span class='line'><span class="c"># may override these variables in their terminal session or preset them in shell&#39;s</span>
</span><span class='line'><span class="c"># profile startup script. The values of all path should be in cygwin/unix path,</span>
</span><span class='line'><span class="c"># and this script will auto convert them into Windows path where is needed.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># User may customize the Java classpath by setting RUN_JAVA_CP, which will prefix to existing</span>
</span><span class='line'><span class="c"># classpath, or use the &quot;-cp&quot; option, which will postfix to existing classpath.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Usage:</span>
</span><span class='line'><span class="c">#   run-java [java_opts] &lt;java_main_class&gt; [-cp /more/classpath] [-Dsysprop=value]</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Example:</span>
</span><span class='line'><span class="c">#   run-java example.Hello</span>
</span><span class='line'><span class="c">#   run-java example.Hello -Dname=World</span>
</span><span class='line'><span class="c">#   run-java org.junit.runner.JUnitCore example.HelloTest -cp &quot;$HOME/apps/junit/lib/*&quot;</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Created by: Zemian Deng 03/09/2012</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This run script dir (resolve to absolute path)</span>
</span><span class='line'><span class="nv">SCRIPT_DIR</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="nb">pwd</span><span class="k">)</span>    <span class="c"># This dir is where this script live.</span>
</span><span class='line'><span class="nv">APP_DIR</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="nv">$SCRIPT_DIR</span>/.. <span class="o">&amp;&amp;</span> <span class="nb">pwd</span><span class="k">)</span>      <span class="c"># Assume the application dir is one level up from script dir.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Default parameters</span>
</span><span class='line'><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="k">${</span><span class="nv">JAVA_HOME</span><span class="p">:=</span><span class="nv">$HOME</span><span class="p">/apps/jdk</span><span class="k">}</span>     <span class="c"># This is the home directory of Java development kit.</span>
</span><span class='line'><span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="k">${</span><span class="nv">RUN_JAVA_CP</span><span class="p">:=</span><span class="nv">$CLASSPATH</span><span class="k">}</span>     <span class="c"># A classpath prefix before -classpath option, default to $CLASSPATH</span>
</span><span class='line'><span class="nv">RUN_JAVA_OPTS</span><span class="o">=</span><span class="k">${</span><span class="nv">RUN_JAVA_OPTS</span><span class="p">:=</span><span class="k">}</span>           <span class="c"># Java options (-Xmx512m -XX:MaxPermSize=128m etc)</span>
</span><span class='line'><span class="nv">RUN_JAVA_DEBUG</span><span class="o">=</span><span class="k">${</span><span class="nv">RUN_JAVA_DEBUG</span><span class="p">:=</span><span class="k">}</span>         <span class="c"># If not empty, print the full java command line before executing it.</span>
</span><span class='line'><span class="nv">RUN_JAVA_NO_PARSE</span><span class="o">=</span><span class="k">${</span><span class="nv">RUN_JAVA_NO_PARSE</span><span class="p">:=</span><span class="k">}</span>   <span class="c"># If not empty, skip the auto parsing of -D and -cp options from script arguments.</span>
</span><span class='line'><span class="nv">RUN_JAVA_NO_AUTOCP</span><span class="o">=</span><span class="k">${</span><span class="nv">RUN_JAVA_NO_AUTOCP</span><span class="p">:=</span><span class="k">}</span> <span class="c"># If not empty, do not auto setup Java classpath</span>
</span><span class='line'><span class="nv">RUN_JAVA_DRY</span><span class="o">=</span><span class="k">${</span><span class="nv">RUN_JAVA_DRY</span><span class="p">:=</span><span class="k">}</span>             <span class="c"># If not empty, do not exec Java command, but just print</span>
</span><span class='line'>
</span><span class='line'><span class="c"># OS specific support.  $var _must_ be set to either true or false.</span>
</span><span class='line'><span class="nv">CYGWIN</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;`uname`&quot;</span> in
</span><span class='line'>  CYGWIN*<span class="o">)</span> <span class="nv">CYGWIN</span><span class="o">=</span><span class="nb">true</span> <span class="p">;;</span>
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Define where is the java executable is</span>
</span><span class='line'><span class="nv">JAVA_CMD</span><span class="o">=</span>java
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$JAVA_HOME&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">JAVA_CMD</span><span class="o">=</span><span class="s2">&quot;$JAVA_HOME/bin/java&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Auto setup applciation&#39;s Java Classpath (only if they exists)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$RUN_JAVA_NO_AUTOCP&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$APP_DIR/config&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_CP:$APP_DIR/config&quot;</span> <span class="p">;</span> <span class="k">fi</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$APP_DIR/target/test-classes&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_CP:$APP_DIR/target/test-classes&quot;</span> <span class="p">;</span> <span class="k">fi</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$APP_DIR/target/classes&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_CP:$APP_DIR/target/classes&quot;</span> <span class="p">;</span> <span class="k">fi</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$APP_DIR/target/dependency&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_CP:$APP_DIR/target/dependency/*&quot;</span> <span class="p">;</span> <span class="k">fi</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$APP_DIR/lib&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_CP:$APP_DIR/lib/*&quot;</span> <span class="p">;</span> <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ARGS</span><span class="o">=</span><span class="s2">&quot;$@&quot;</span>
</span><span class='line'><span class="c"># Parse addition &quot;-cp&quot; and &quot;-D&quot; after the Java main class from script arguments</span>
</span><span class='line'><span class="c">#   This is done for convenient sake so users do not have to export RUN_JAVA_CP and RUN_JAVA_OPTS</span>
</span><span class='line'><span class="c">#   saparately, but now they can pass into end of this run-java script instead.</span>
</span><span class='line'><span class="c">#   This can be disable by setting RUN_JAVA_NO_PARSE=1.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$RUN_JAVA_NO_PARSE&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="c"># Prepare variables for parsing</span>
</span><span class='line'>  <span class="nv">FOUND_CP</span><span class="o">=</span>
</span><span class='line'>  NEW_ARGS<span class="o">[</span>0<span class="o">]=</span><span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="nv">IDX</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'>  <span class="c"># Parse all arguments and look for &quot;-cp&quot; and &quot;-D&quot;</span>
</span><span class='line'>  <span class="k">for</span> ARG in <span class="s2">&quot;$@&quot;</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">[[</span> -n <span class="nv">$FOUND_CP</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>          <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_CP:$ARG&quot;</span>
</span><span class='line'>          <span class="nv">FOUND_CP</span><span class="o">=</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">case</span> <span class="nv">$ARG</span> in
</span><span class='line'>          <span class="s1">&#39;-cp&#39;</span><span class="o">)</span>
</span><span class='line'>              <span class="nv">FOUND_CP</span><span class="o">=</span>1
</span><span class='line'>              <span class="p">;;</span>
</span><span class='line'>          <span class="s1">&#39;-D&#39;</span>*<span class="o">)</span>
</span><span class='line'>              <span class="nv">RUN_JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;$RUN_JAVA_OPTS $ARG&quot;</span>
</span><span class='line'>              <span class="p">;;</span>
</span><span class='line'>          *<span class="o">)</span>
</span><span class='line'>              NEW_ARGS<span class="o">[</span><span class="nv">$IDX</span><span class="o">]=</span><span class="s2">&quot;$ARG&quot;</span>
</span><span class='line'>              <span class="nb">let </span><span class="nv">IDX</span><span class="o">=</span><span class="nv">$IDX</span>+1
</span><span class='line'>              <span class="p">;;</span>
</span><span class='line'>          <span class="k">esac</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  <span class="nv">ARGS</span><span class="o">=</span><span class="s2">&quot;${NEW_ARGS[@]}&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Convert Windows Java Classpath</span>
</span><span class='line'><span class="k">if</span> <span class="nv">$CYGWIN</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">RUN_JAVA_CP</span><span class="o">=</span><span class="k">$(</span>cygpath -mp <span class="nv">$RUN_JAVA_CP</span><span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Display full Java command.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$RUN_JAVA_DEBUG&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> -n <span class="s2">&quot;$RUN_JAVA_DRY&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;$JAVA_CMD&quot;</span> <span class="nv">$RUN_JAVA_OPTS</span> -cp <span class="s2">&quot;$RUN_JAVA_CP&quot;</span> <span class="nv">$ARGS</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Run Java Main class</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$RUN_JAVA_DRY&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="s2">&quot;$JAVA_CMD&quot;</span> <span class="nv">$RUN_JAVA_OPTS</span> -cp <span class="s2">&quot;$RUN_JAVA_CP&quot;</span> <span class="nv">$ARGS</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main idea is to run <code>mvn dependency:copy-dependencies</code>, this will generate all the jar files into <code>target/dependency</code> folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn dependency:copy-dependencies
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Scanning <span class="k">for</span> projects...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Building sparkblog 1.0-SNAPSHOT
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-dependency-plugin:2.1:copy-dependencies <span class="o">(</span>default-cli<span class="o">)</span> @ sparkblog ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying spark-core-2.1.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\s</span>park-core-2.1.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-http-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-http-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-io-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-io-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-security-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-security-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-server-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-server-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-servlet-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-servlet-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-util-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-util-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-webapp-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-webapp-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying jetty-xml-9.0.2.v20130417.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>etty-xml-9.0.2.v20130417.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying javax.servlet-3.0.0.v201112011016.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\j</span>avax.servlet-3.0.0.v201112011016.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying slf4j-api-1.7.7.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\s</span>lf4j-api-1.7.7.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Copying slf4j-simple-1.7.7.jar to d:<span class="se">\M</span>yProjects<span class="se">\j</span>wrapper<span class="se">\b</span>loggg<span class="se">\s</span>parkblog<span class="se">\t</span>arget<span class="se">\d</span>ependency<span class="se">\s</span>lf4j-simple-1.7.7.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> BUILD SUCCESS
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Total <span class="nb">time</span>: 2.978s
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Finished at: Thu Feb <span class="m">12</span> 18:22:54 EET 2015
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Final Memory: 9M/243M
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can reuse the provided <em>above</em> script <strong>or</strong> use the provided <em>below</em> one-liner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -cp target<span class="se">\c</span>lasses<span class="p">;</span>target<span class="se">\d</span>ependency<span class="se">\*</span> com.halyph.blog.App <span class="m">9090</span> one <span class="m">1</span> 2
</span></code></pre></td></tr></table></div></figure>


<p>This one-liner is very simple and can be transformed to shell/batch scripts depending on the level of re-use you&rsquo;d like to implement.</p>

<ul>
<li>Now, it&rsquo;s time to created pre-packed application bundle which can be easily distributed. We will use <a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>     ...
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>appassembler-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.9<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">        This (executions) section can be omitted.</span>
</span><span class='line'><span class="c">        In case it&#39;s omitted we should call the next command to generate wrapper:</span>
</span><span class='line'><span class="c">        mvn package appassembler:assemble</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>              <span class="nt">&lt;goal&gt;</span>assemble<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;programs&gt;</span>
</span><span class='line'>            <span class="nt">&lt;program&gt;</span>
</span><span class='line'>              <span class="nt">&lt;mainClass&gt;</span>com.halyph.blog.App<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>              <span class="nt">&lt;id&gt;</span>app<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/program&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/programs&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The Application Assembler Plugin is a Maven plugin for generating scripts for starting java applications. All dependencies and the artifact of the project itself are placed in a generated Maven repository in a defined assemble directory. All artifacts (dependencies + the artifact from the project) are added to the classpath in the generated bin scripts.</p></blockquote>

<p><a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a> usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn package
</span><span class='line'><span class="nv">$ </span>target/appassembler/bin/app
</span></code></pre></td></tr></table></div></figure>


<blockquote><ul>
<li><p>All dependencies and the artifact itself are placed in the defined assemble directory (defaults to <code>$project.build.directory/appassembler</code>).</p></li>
<li><p>A <code>bin/</code> directory is created in the assemble directory and the generated bin scripts are placed in that directory (defaults to both unix shell scripts and Windows bat files).</p></li>
</ul>
</blockquote>

<p>Note: <a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a> have a lot of customization options, just check the documentation.</p>

<a name="Summary"></a>
<h2>Summary</h2>

<p>Here was shown that using such tool as Maven you can be productive and &ldquo;agile&rdquo; (use <a href="http://gradle.org">Gradle</a> if you&rsquo;d like to be in trend):</p>

<ul>
<li>generate project skeleton from scratch</li>
<li>open it in IDE without ceremony</li>
<li>call the app via Maven plugin</li>
<li>call it as plain CLI application, but with small ceremony (need to run <em>dependency:copy-dependencies</em>)</li>
<li>package the app for further distribution</li>
</ul>


<p>Yes, it&rsquo;s not a simple <em>write-one</em> Java &ldquo;script&rdquo;, but it&rsquo;s flexible enough to feel like it is.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://halyph.com/blog/2015/02/13/do-we-need-java-for-everything">Do We Need Java for Everything?</a></li>
<li><a href="http://saltnlight5.blogspot.com/2012/08/a-better-java-shell-script-wrapper.html">A better java shell script wrapper</a></li>
<li><a href="http://mojo.codehaus.org/exec-maven-plugin/usage.html">Exec Maven Plugin</a></li>
<li><a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html">Maven Application Assembler Plugin</a></li>
<li><a href="http://blog.plesslweb.ch/post/6628462331/wrapper-script-for-java-command-line-applications">Wrapper Script for Java Command-Line Applications</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do We Need Java for Everything?]]></title>
    <link href="http://halyph.com/blog/2015/02/13/do-we-need-java-for-everything/"/>
    <updated>2015-02-13T00:18:30+02:00</updated>
    <id>http://halyph.com/blog/2015/02/13/do-we-need-java-for-everything</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png"></p>

<p>Some time ago one guy wrote a post <a href="http://www.teamten.com/lawrence/writings/java-for-everything.html">Java for Everything</a>. The main idea is to use Java even for shell scripting.</p>

<blockquote><p>I’m even taking this to an extreme and using Java for shell scripts. I’ve found that anything other than a simple wrapper shell script eventually grows to the point where I’m looking up the arcane syntax for removing some middle element from an array in bash &hellip; Write it in Java to start with. If shelling out to run commands is clumsy, write a utility function to make it easy.
I’ve also written a <em>java_launcher</em> shell script that allows me to write this at the top of Java programs:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env java_launcher</span>
</span><span class='line'><span class="c"># vim:ft=java</span>
</span><span class='line'><span class="c"># lib:/home/lk/lib/teamten.jar</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>I can make the Java programs executable and drop the .java extension. The script strips the header, compiles and caches the class file, and runs the result with the specified jars. It provides one of the big advantages of Python: the lack of build scripts for simple one-off programs.</p></blockquote>

<p>Here is the actual source of <a href="https://github.com/lkesteloot/java_launcher">java_launcher</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Put this script in your path and write the following line at the top of an</span>
</span><span class='line'><span class="c"># executable Java source program:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   #!/usr/bin/env java_launcher</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Additional documentation here: https://github.com/lkesteloot/java_launcher</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Quit on error.</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="c"># Get the name of the script, which the shell passes to us automatically.</span>
</span><span class='line'><span class="nv">SOURCE_PATHNAME</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;java_launcher: Must supply name of script as first argument.&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Skip the script name.</span>
</span><span class='line'><span class="nb">shift</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Compute the MD5 of both the source file and this script.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f /sbin/md5 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="c"># Mac OS/X.</span>
</span><span class='line'>    <span class="nv">SUM</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span> <span class="nv">$0</span> <span class="p">|</span> md5<span class="k">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="c"># Linux.</span>
</span><span class='line'>    <span class="nv">SUM</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span> <span class="nv">$0</span> <span class="p">|</span> md5sum <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f1<span class="k">)</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">SOURCE_FILENAME</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">SOURCE_DIR</span><span class="o">=</span><span class="k">$(</span>dirname <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">CLASS_NAME</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$SOURCE_FILENAME</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/\.*//&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">CACHE_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/.java_launcher_cache
</span><span class='line'><span class="nv">CLASS_DIR</span><span class="o">=</span><span class="nv">$CACHE_DIR</span>/<span class="nv">$SUM</span>
</span><span class='line'><span class="nv">PROCESSED_SOURCE</span><span class="o">=</span><span class="nv">$CLASS_DIR</span>/<span class="k">${</span><span class="nv">SOURCE_FILENAME</span><span class="k">}</span>.java
</span><span class='line'><span class="nv">PROCESSED_CLASS</span><span class="o">=</span><span class="nv">$CLASS_DIR</span>/<span class="k">${</span><span class="nv">SOURCE_FILENAME</span><span class="k">}</span>.class
</span><span class='line'>
</span><span class='line'><span class="c"># Process source to find libs for classpath. Relative jars are made relative to the</span>
</span><span class='line'><span class="c"># source file.</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;BEGIN { CLASSPATH=&quot;&quot; } /^# lib:(.*)$/ { jar = substr($0, 7); if (substr(jar, 1, 1) != &quot;/&quot;) jar = SOURCE_DIR &quot;/&quot; jar; if (CLASSPATH != &quot;&quot;) CLASSPATH = CLASSPATH &quot;:&quot;; CLASSPATH = CLASSPATH jar } END { print CLASSPATH }&#39;</span> <span class="nv">SOURCE_DIR</span><span class="o">=</span><span class="s2">&quot;$SOURCE_DIR&quot;</span> &lt; <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Default libraries. Put default ones last.</span>
</span><span class='line'><span class="nv">SCRIPT_DIR</span><span class="o">=</span><span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">)</span>
</span><span class='line'><span class="nv">LIB_DIR</span><span class="o">=</span><span class="nv">$SCRIPT_DIR</span>/java_lib
</span><span class='line'><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$CLASSPATH</span>:<span class="nv">$LIB_DIR</span>/<span class="se">\*</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Compile if necessary.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$PROCESSED_CLASS&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="c"># Refresh the dir so that we know we&#39;ve used it recently.</span>
</span><span class='line'>    touch <span class="s2">&quot;$CLASS_DIR&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    mkdir -p <span class="s2">&quot;$CLASS_DIR&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Remove header. That&#39;s anything that starts with #. Replace the lines with</span>
</span><span class='line'>    <span class="c"># an empty line so the line numbers don&#39;t get thrown off.</span>
</span><span class='line'>    sed -e <span class="s1">&#39;s/^#.*//&#39;</span> &lt; <span class="s2">&quot;$SOURCE_PATHNAME&quot;</span> &gt; <span class="s2">&quot;$PROCESSED_SOURCE&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Compile real source to our cache.</span>
</span><span class='line'>    javac -d <span class="s2">&quot;$CLASS_DIR&quot;</span> <span class="s2">&quot;$PROCESSED_SOURCE&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Run the program, passing on arguments from command line.</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span><span class="nv">$CLASS_DIR</span>:<span class="nv">$CLASSPATH</span>
</span><span class='line'>java -Xmx1024m <span class="nv">$CLASS_NAME</span> <span class="nv">$*</span>
</span></code></pre></td></tr></table></div></figure>


<p>And suppose we&rsquo;d like to run <strong>helloworld</strong> Java &ldquo;script&rdquo; using different jars located in default library location (<strong>java_lib/</strong>) and custom (<strong>/home/username/mylib1.jar</strong> and <strong>/home/username/mylib2.jar</strong>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env java_launcher</span>
</span><span class='line'><span class="c"># vim:ft=java</span>
</span><span class='line'><span class="c"># lib:/home/username/mylib1.jar:/home/username/mylib2.jar</span>
</span><span class='line'>
</span><span class='line'>public class helloworld <span class="o">{</span>
</span><span class='line'>    public static void main<span class="o">(</span>String<span class="o">[]</span> args<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        System.out.println<span class="o">(</span><span class="s2">&quot;Hello world!&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It can be run like this: <code>$ ./helloworld</code></p>

<a name="So..how.does.java_launcher.work."></a>
<h3>So, how does java_launcher work?</h3>

<ol>
<li>This launcher script works on Linux/MacOSX only. We should have additional <strong>java_launcher.bat</strong> script for Windows (cygwin and msys are not native Windows solution).</li>
<li>It supports two types of CLASSPATH lib folders</li>
<li><em>default</em> <strong>$SCRIPT_DIR/java_lib</strong> located in the same folder where the actual Java script located</li>
<li><em>custom</em> libs, they should be listed at the head <strong>lib</strong> section of the script (see sample above). The script uses AWK to extract jars from <strong>lib</strong> section</li>
<li><strong>java_launcher</strong> uses MD5 hashing to track source changes and (re)compile the source script only when it has been changed. See MD5 calculated <code>SUM</code> variable above</li>
<li><em>launcher</em> has dedicated folder where it stores the processed and compiled script (based on MD5 hash changes). See the next variables: <code>CACHE_DIR</code>, <code>PROCESSED_SOURCE</code> and <code>PROCESSED_CLASS</code>.</li>
<li>Then it combines the <em>default</em> and <em>custom</em> libs in resulted CLASSPATH</li>
</ol>


<a name="Drawbacks"></a>
<h3>Drawbacks</h3>

<p>I see the next drawbacks:
- libs should be distributed along with actual &ldquo;script&rdquo;. The common use case is to have minimal required script, which downloads all required dependencies by yourself
- launcher is not cross-platform
- Java script requires additional configuration to be opened/edited in IDE (project file, adjust all dependencies, etc.)
- it&rsquo;s very hard to edit Java code in plain editor (Java language is verbose). Scripting in Java without IDE might be real pain</p>

<a name="Why.not.Groovy."></a>
<h2>Why not Groovy?</h2>

<p>I don&rsquo;t think that Java is &ldquo;good&rdquo; language for scripting (see drawbacks above). Groovy is much better language with nice scripting capabilities. Every Groovy script might be treated like a Java code snippet (with some exceptions <a href="http://groovy.codehaus.org/Differences+from+Java">[1]</a> and <a href="http://groovy-lang.org/differences.html">[2]</a>). But, the most important is that Groovy has build-in <a href="http://groovy-lang.org/grape.html">Grape dependency manager</a>:</p>

<blockquote><p>Grape (The Groovy Adaptable Packaging Engine or Groovy Advanced Packaging Engine) is the infrastructure enabling the grab() calls in Groovy, a set of classes leveraging Ivy to allow for a repository driven module system for Groovy. This allows a developer to write a script with an essentially arbitrary library requirement, and ship just the script. Grape will, at runtime, download as needed and link the named libraries and all dependencies forming a transitive closure when the script is run from existing repositories such as JCenter, Ibiblio, Codehaus, and java.net.</p></blockquote>

<p>Sample usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Grapes</span><span class="o">([</span>
</span><span class='line'>   <span class="nd">@Grab</span><span class="o">(</span><span class="n">group</span><span class="o">=</span><span class="s1">&#39;commons-primitives&#39;</span><span class="o">,</span> <span class="n">module</span><span class="o">=</span><span class="s1">&#39;commons-primitives&#39;</span><span class="o">,</span> <span class="n">version</span><span class="o">=</span><span class="s1">&#39;1.0&#39;</span><span class="o">),</span>
</span><span class='line'>   <span class="nd">@Grab</span><span class="o">(</span><span class="n">group</span><span class="o">=</span><span class="s1">&#39;org.ccil.cowan.tagsoup&#39;</span><span class="o">,</span> <span class="n">module</span><span class="o">=</span><span class="s1">&#39;tagsoup&#39;</span><span class="o">,</span> <span class="n">version</span><span class="o">=</span><span class="s1">&#39;0.9.7&#39;</span><span class="o">)])</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>One or more <code>groovy.lang.Grab</code> annotations can be added at any place that annotations are accepted to tell the compiler that this code relies on the specific library. This will have the effect of adding the library to the classloader of the groovy compiler. This annotation is detected and evaluated before any other resolution of classes in the script, so imported classes can be properly resolved by a @Grab annotation.</p></blockquote>

<p><strong>So, I have no idea why to reinvent the wheel.</strong> Use Groovy for scripting and Java for everything else.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://www.teamten.com/lawrence/writings/java-for-everything.html">Java for Everything</a></li>
<li>Some reflections to the original post <a href="http://www.teamten.com/lawrence/writings/java-for-everything.html">Java for Everything</a>:

<ul>
<li><a href="https://news.ycombinator.com/item?id=8677556">Hacker News</a></li>
<li><a href="http://www.reddit.com/r/programming/duplicates/2nvybk/java_for_everything">Reddit</a></li>
</ul>
</li>
<li><a href="https://github.com/lkesteloot/java_launcher">java_launcher</a> source code</li>
<li><a href="http://groovy.codehaus.org/Differences+from+Java">Groovy Differences from Java</a></li>
<li><a href="http://groovy-lang.org/grape.html">Grape dependency manager</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Generate PermGen Leak?]]></title>
    <link href="http://halyph.com/blog/2015/02/05/how-to-generate-permgen/"/>
    <updated>2015-02-05T00:05:30+02:00</updated>
    <id>http://halyph.com/blog/2015/02/05/how-to-generate-permgen</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png"></p>

<p>I&rsquo;m sure that a lot of Java developers experienced <code>java.lang.OutOfMemoryError: PermGen space</code> (OOME PermGen). It was very common to get this error after multiple WAR re-deploys on Tomcat v.6.x. Permanent generation (PermGen) region of memory is used to store the internal representation of loaded classes (and much more, see here [<a href="https://plumbr.eu/blog/what-is-a-permgen-leak">1</a>] and [<a href="https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation">2</a>]).</p>

<p>So, we can get <strong>OOME PermGen</strong> when ClassLoader whats to store class definition, but there is not enough space in PermGen - i.e. loaded too many classes.</p>

<p>Based on this <strong>OOME PermGen</strong> error can be generated via:</p>

<ul>
<li>decreasing PermGen size</li>
<li>loading huge amount of classes</li>
</ul>


<p>I highly recommend to read <a href="https://plumbr.eu/blog/what-is-a-permgen-leak">What is a PermGen leak?</a> post to get more info about this issue.</p>

<a name="Disclaimer"></a>
<h3>Disclaimer</h3>

<p>The current post is totally based on <a href="https://plumbr.eu/blog/how-not-to-create-a-permgen-leak">How (not) to create a permgen leak?</a></p>

<a name="Generate.PermGen.leak"></a>
<h2>Generate PermGen leak</h2>

<p>The main idea is dynamically create a lot of classes via byte code manipulation library. We are going to use <a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/">Javassist</a> as it&rsquo;s the simplest library with nice API.</p>

<ul>
<li>We assume that it&rsquo;s <code>maven</code> based project. So, let&rsquo;s add Javassist to <code>pom.xml</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.mycompany.app<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>my-app<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>my-app<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;skipTests&gt;</span>true<span class="nt">&lt;/skipTests&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.javassist<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>javassist<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>3.15.0-GA<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>appassembler-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.9<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;extraJvmArguments&gt;</span>-XX:PermSize=2M -XX:MaxPermSize=4M<span class="nt">&lt;/extraJvmArguments&gt;</span>
</span><span class='line'>          <span class="nt">&lt;programs&gt;</span>
</span><span class='line'>            <span class="nt">&lt;program&gt;</span>
</span><span class='line'>              <span class="nt">&lt;mainClass&gt;</span>com.mycompany.app.App<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>              <span class="nt">&lt;id&gt;</span>app<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/program&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/programs&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Also, we should set <strong>PermGen</strong> and <strong>MaxPermGen</strong> size to 2M and 4M respectively (it gives us a chance to get error as quickly as possible). Maven <code>Appassembler</code> plugin [<a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program-jvmsettings.html">3</a>] uses <code>extraJvmArguments</code> parameter while generating wrapper scripts: shell and batch (see <code>pom.xml</code> above, <code>&lt;extraJvmArguments&gt;-XX:PermSize=2M -XX:MaxPermSize=2M&lt;/extraJvmArguments&gt;</code>).</li>
</ul>


<blockquote><p>&ndash;XX:PermSize<size> - Set initial PermGen Size</p>

<p>&ndash;XX:MaxPermSize<size> - Set the maximum PermGen Size</p></blockquote>

<ul>
<li>Below is a simple application which dynamically creates 1000 classes to cause PermGem leak. Class creation is very simple and self explanatory. The main idea is that we should use byte code manipulation library to create classes dynamically.</li>
</ul>


<p>See additional comments in the next code snippet</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mycompany</span><span class="o">.</span><span class="na">app</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javassist.CannotCompileException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javassist.ClassPool</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Steps to build and run demo application: &lt;br /&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;mvn clean package appassembler:assemble</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;target/appassembler/bin/app</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * We should use static block for OutOfMemoryError &quot;initialization&quot;</span>
</span><span class='line'><span class="cm">     * It&#39;s very important to have it. In other case JVM won&#39;t be able to</span>
</span><span class='line'><span class="cm">     * throw (actually create new OutOfMemoryError) this exception because</span>
</span><span class='line'><span class="cm">     * there will be no free memory for this. That&#39;s why we creating it beforehand.</span>
</span><span class='line'><span class="cm">     * As you can see we intentionally added output to highlight that THIS error</span>
</span><span class='line'><span class="cm">     * was produces by us.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">OutOfMemoryError</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=====================&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Initialized/created OutOfMemoryError&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=====================&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Start dynamic class creation.....\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">createClass</span><span class="o">(</span><span class="s">&quot;MyClass&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// we use this output as indicator to see the rough number of created classes</span>
</span><span class='line'>            <span class="c1">// it&#39;s not necessary to print every single (just created) class</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">50</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Class</span> <span class="nf">createClass</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">CannotCompileException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ClassPool</span> <span class="n">pool</span> <span class="o">=</span> <span class="n">ClassPool</span><span class="o">.</span><span class="na">getDefault</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">pool</span><span class="o">.</span><span class="na">makeClass</span><span class="o">(</span><span class="n">className</span><span class="o">).</span><span class="na">toClass</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run the application</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span> <span class="n">mvn</span> <span class="n">clean</span> <span class="kn">package</span> <span class="nl">appassembler:</span><span class="n">assemble</span>
</span><span class='line'><span class="n">$</span> <span class="n">target</span><span class="o">/</span><span class="n">appassembler</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">app</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">OutOfMemoryError</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mycompany</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">App</span><span class="o">.&lt;</span><span class="n">clinit</span><span class="o">&gt;(</span><span class="n">App</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">15</span><span class="o">)</span>
</span><span class='line'><span class="o">=====================</span>
</span><span class='line'><span class="n">Initialized</span><span class="o">/</span><span class="n">created</span> <span class="n">OutOfMemoryError</span>
</span><span class='line'><span class="o">=====================</span>
</span><span class='line'><span class="n">Start</span> <span class="n">dynamic</span> <span class="kd">class</span> <span class="nc">creation</span><span class="o">.....</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass0</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass50</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass100</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass150</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass200</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass250</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass300</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass350</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass400</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass450</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass500</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyClass550</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;Reference Handler&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">OutOfMemoryError</span><span class="o">:</span> <span class="n">PermGen</span> <span class="n">space</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ref</span><span class="o">.</span><span class="na">Reference$ReferenceHandler</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Reference</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">140</span><span class="o">)</span>
</span><span class='line'><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&quot;main&quot;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">OutOfMemoryError</span><span class="o">:</span> <span class="n">PermGen</span> <span class="n">space</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javassist</span><span class="o">.</span><span class="na">ClassPool</span><span class="o">.</span><span class="na">toClass</span><span class="o">(</span><span class="n">ClassPool</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1089</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javassist</span><span class="o">.</span><span class="na">ClassPool</span><span class="o">.</span><span class="na">toClass</span><span class="o">(</span><span class="n">ClassPool</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1032</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javassist</span><span class="o">.</span><span class="na">ClassPool</span><span class="o">.</span><span class="na">toClass</span><span class="o">(</span><span class="n">ClassPool</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">990</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">javassist</span><span class="o">.</span><span class="na">CtClass</span><span class="o">.</span><span class="na">toClass</span><span class="o">(</span><span class="n">CtClass</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1125</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mycompany</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">App</span><span class="o">.</span><span class="na">createClass</span><span class="o">(</span><span class="n">App</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">36</span><span class="o">)</span>
</span><span class='line'>  <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">mycompany</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">App</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">App</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">29</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next command runs under the hood:
<code>java -XX:PermSize=2M -XX:MaxPermSize=4M -classpath "$CLASSPATH" com.mycompany.app.App</code></p>

<p>As you can see it was possible to create about 550 <code>MyClass</code> classes before we&rsquo;ve got an expected error.</p>

<a name="Tomcat.Leaks"></a>
<h3>Tomcat Leaks</h3>

<p>Tomcat team created a nice <a href="http://wiki.apache.org/tomcat/MemoryLeakProtection">wiki page</a> where listed and shown the situations where leaks can be detected and fixed.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="https://plumbr.eu/blog/what-is-a-permgen-leak">What is a PermGen leak?</a></li>
<li><a href="https://plumbr.eu/blog/how-not-to-create-a-permgen-leak">How (not) to create a permgen leak?</a></li>
<li><a href="http://www.infoq.com/articles/Java-PERMGEN-Removed">Where Has the Java PermGen Gone?</a> PermGen is replace with Metaspace in Java 8</li>
<li><a href="https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation">Presenting the Permanent Generation</a> General intro into the subject</li>
<li><a href="http://www.javaranch.com/journal/200711/creating_java_classes_runtime_expression_evaluation.html">Javassist - Creating Java classes at runtime for evaluating numerical expressions</a> Small article how to create Java classes dynamically</li>
<li><a href="http://wiki.apache.org/tomcat/MemoryLeakProtection">Tomcat Wiki MemoryLeakProtection</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scripting in Scala]]></title>
    <link href="http://halyph.com/blog/2015/02/02/scripting-in-scala/"/>
    <updated>2015-02-02T00:18:00+02:00</updated>
    <id>http://halyph.com/blog/2015/02/02/scripting-in-scala</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/scala.png"></p>

<p>Scala language compiles sources code to Java bytecode.  But, it has some nice scripting facilities. Let&rsquo;s review them.</p>

<p>So, the <code>scala</code> command is also a shell-script wrapper around the java command.</p>

<p>According to official <a href="http://www.scala-lang.org/files/archive/nightly/docs-2.10.1/manual/html/scala.html">scala utility</a> documentation (here highlighted only post-related notes):</p>

<blockquote><p><code>scala [ &lt;option&gt; ]... [ &lt;torun&gt; &lt;argument&gt;... ]</code></p>

<p>The <code>scala</code> utility runs Scala code using a Java runtime environment.</p>

<p>If a <strong>script</strong> file is specified to run, then the file is read and all Scala statements and declarations in the file are processed in order. Any arguments specified will be available via the argsvariable.</p>

<p>Script files may have an <strong>optional header</strong> that is ignored if present. There are two ways to format the header: either beginning with #! and ending with !#, or beginning with ::#! and ending with ::!#.</p>

<p>Such a header must have each header boundary start at the beginning of a line. Headers can be used to make stand-alone script files, as shown in the examples below.</p>

<p>Here is a complete Scala script (<strong>check.sh</strong>) for Unix:</p>

<pre><code>#!/bin/sh
exec scala "$0" "$@"
!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre>

<p>Here is a complete Scala script (<strong>check.bat</strong>) for MS Windows:</p>

<pre><code>::#!
@echo off
call scala %0 %*
goto :eof
::!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre>

<p>If you want to use the compilation cache to speed up multiple executions of the script (<strong>check.sh</strong>), then add <strong>-savecompiled</strong> to the scala command:</p>

<pre><code>#!/bin/sh
exec scala -savecompiled "$0" "$@"
!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre></blockquote>

<p>These tricks give us an ability to run Scala script as plain shell script. Also, based on the setting above this script can have input parameters and <em>almost</em> cross-platform (see script header differences for Linux <strong>.vs.</strong> Windows).</p>

<p>Now, we should save the mentioned above code snippet in some file (e.g. <strong>check.sh</strong>) and make it executable. This script can be run as any Linux shell script <code>./check.sh</code> (<code>check.bat</code> - Windows).</p>

<a name="Scala.utility.internals"></a>
<h2>Scala utility internals</h2>

<a name="Linux"></a>
<h3>Linux</h3>

<p>Linux script header uses the next items:</p>

<ul>
<li><code>#!</code> it&rsquo;s <a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> interpreter directive</li>
<li><code>exec</code> is used to run <code>scala</code> without creation new process. Commands which go right after <code>exec</code> will not be executed</li>
<li><code>!#</code> is simple marker for <code>scala</code> utility (see notes below)</li>
</ul>


<p>E.g.
This script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>echo Header
</span><span class='line'>exec echo
</span><span class='line'>!#
</span><span class='line'>echo Body</span></code></pre></td></tr></table></div></figure>


<p>will have the next output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./test.sh
</span><span class='line'>Header</span></code></pre></td></tr></table></div></figure>


<p>We will get error in case <code>exec</code> is removed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>echo Header
</span><span class='line'>!#
</span><span class='line'>echo Body</span></code></pre></td></tr></table></div></figure>


<p>Output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./test.sh
</span><span class='line'>Header
</span><span class='line'>./test.sh: line 4: !#: command not found
</span><span class='line'>Body
</span></code></pre></td></tr></table></div></figure>


<a name="Windows"></a>
<h3>Windows</h3>

<p>Windows batch script header uses the next items:</p>

<ul>
<li><code>::</code> is a remark without displaying or executing that line when the batch file is run (see <a href="http://www.computerhope.com/batch.htm">Information on batch files</a>).</li>
<li><code>::#!</code>  is simple marker for <code>scala</code> utility (see notes below)</li>
<li><code>@echo off</code> disable echo</li>
<li><code>call</code> calls one batch program from another.</li>
<li><code>goto :eof</code> go to end of file</li>
<li><code>::!#</code> is simple marker for <code>scala</code> utility (see notes below)</li>
</ul>


<p>The OS-specific script settings were identified, now let&rsquo;s dive deeper to understand how <code>scala</code> utility works.</p>

<a name="L.code.scala..code..internals"></a>
<h3><code>scala</code> internals</h3>

<p>This utility performs the next flow to run script:</p>

<ol>
<li>Run <code>scala.tools.nsc.MainGenericRunner#process</code> and identify run target &ldquo;as Script&rdquo; (there are other targets) <code>ScriptRunner.runScriptAndCatch(settings, thingToRun, command.arguments)</code></li>
<li><code>ScriptRunner</code> creates temp file <code>File.makeTemp("scalacmd", ".scala")</code></li>
<li>Run compiler and clean script header</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ScriptRunner extends HasCompileSocket {
</span><span class='line'>...
</span><span class='line'>  private def withCompiledScript(
</span><span class='line'>      settings: GenericRunnerSettings,
</span><span class='line'>      scriptFile: String)
</span><span class='line'>      (handler: String =&gt; Boolean): Boolean =
</span><span class='line'>    {
</span><span class='line'>      def mainClass = scriptMain(settings)
</span><span class='line'>  
</span><span class='line'>         val compiler = newGlobal(settings, reporter)
</span><span class='line'>         new compiler.Run compile List(scriptFile)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Global
</span><span class='line'>    /** If this compilation is scripted, convert the source to a script source. */
</span><span class='line'>    private def scripted(s: SourceFile) = s match {
</span><span class='line'>      case b: BatchSourceFile if settings.script.isSetByUser =&gt; ScriptSourceFile(b)
</span><span class='line'>      case _ =&gt; s
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** Compile abstract file until `globalPhase`, but at least
</span><span class='line'>     *  to phase "namer".
</span><span class='line'>     */
</span><span class='line'>    def compileLate(file: AbstractFile) {
</span><span class='line'>      if (!compiledFiles(file.path))
</span><span class='line'>        compileLate(new CompilationUnit(scripted(getSourceFile(file))))
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Cleanup shell script (remove header) via <code>SourceFile</code>. Now, it&rsquo;s clear why script&rsquo;s header have such <em>strange</em> closing markers (see line 21, <code>content drop headerLen</code> - actual header remove)</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object ScriptSourceFile {
</span><span class='line'>  /** Length of the script header from the given content, if there is one.
</span><span class='line'>   *  The header begins with "#!" or "::#!" and ends with a line starting
</span><span class='line'>   *  with "!#" or "::!#".
</span><span class='line'>   */
</span><span class='line'>  def headerLength(cs: Array[Char]): Int = {
</span><span class='line'>    val headerPattern = Pattern.compile("""((?m)^(::)?!#.*|^.*/env .*)(\r|\n|\r\n)""")
</span><span class='line'>    val headerStarts  = List("#!", "::#!")
</span><span class='line'>
</span><span class='line'>    if (headerStarts exists (cs startsWith _)) {
</span><span class='line'>      val matcher = headerPattern matcher cs.mkString
</span><span class='line'>      if (matcher.find) matcher.end
</span><span class='line'>      else throw new IOException("script file does not close its header with !# or ::!#")
</span><span class='line'>    }
</span><span class='line'>    else 0
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  def apply(file: AbstractFile, content: Array[Char]) = {
</span><span class='line'>    val underlying = new BatchSourceFile(file, content)
</span><span class='line'>    val headerLen = headerLength(content)
</span><span class='line'>    val stripped = new ScriptSourceFile(underlying, content drop headerLen, headerLen)
</span><span class='line'>
</span><span class='line'>    stripped
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<a name="Add.libraries.to.Scala.script"></a>
<h2>Add libraries to Scala script</h2>

<p>Scala script libraries (<strong>jar</strong>s) can be added in script&rsquo;s header section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>exec scala -classpath "lib/lib.1.jar:lib/lib.2.jar" "$0" "$@"
</span><span class='line'>!#</span></code></pre></td></tr></table></div></figure>


<a name="Summary"></a>
<h2>Summary</h2>

<p>There is nothing magical in Scala interpretation. Every single peace of code must be compiled. Such interesting <em>scripting</em> approach can be applied to Java as well.</p>

<p>Unfortunately, Scala is not looks like nice scripting language (because it&rsquo;s <strong>not</strong> designed for this use case). It will be uncomfortable &ldquo;scripting&rdquo; in Scala without IDE.</p>

<a name="References"></a>
<h2>References</h2>

<ul>
<li><a href="http://timperrett.com/2011/08/01/system-scripting-with-scala/">System Scripting with Scala</a></li>
<li><a href="http://www.scala-lang.org/files/archive/nightly/docs-2.10.1/manual/html/scala.html">scala utility</a></li>
<li><a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></li>
<li><a href="http://www.computerhope.com/batch.htm">Information on batch files</a></li>
<li>Scala Sources:

<ul>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/compiler/scala/tools/nsc/ScriptRunner.scala#">ScriptRunner.scala</a></li>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/reflect/scala/reflect/internal/util/SourceFile.scala">SourceFile.scala</a></li>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/compiler/scala/tools/nsc/Global.scala">Global.scala</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Embedded H2 With Web Console?]]></title>
    <link href="http://halyph.com/blog/2015/01/22/how-to-use-embedded-h2-with-h2-console/"/>
    <updated>2015-01-22T00:55:03+02:00</updated>
    <id>http://halyph.com/blog/2015/01/22/how-to-use-embedded-h2-with-h2-console</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png"></p>

<p>There are several Java SQL databases which supports both server and embedded modes: <a href="http://www.h2database.com/">H2</a>, <a href="http://hsqldb.org/">HSQLDB</a> and <a href="http://db.apache.org/derby/">Derby</a>. The most interesting for me is H2 with own web <a href="http://www.h2database.com/html/quickstart.html#h2_console">Console</a>.</p>

<p>The aim of this post is to show how to connect from H2 Console to embedded in-memory H2.</p>

<blockquote><p>H2 currently supports three servers: a web server (for the H2 Console), a TCP server (for client/server connections) and an PG server (for PostgreSQL clients). <strong>Please note that only the web server supports browser connections.</strong> The servers can be started in different ways, one is using the Server tool. Starting the server doesn&rsquo;t open a database - databases are opened as soon as a client connects.</p></blockquote>

<p>The next steps have to be performed to connect to embedded DB and populate initial data:</p>

<ol>
<li>Load DB driver</li>
<li>Get <code>Connection</code></li>
<li>Create <code>Statement</code> and <code>executeUpate</code> queries</li>
<li>Create TCP <code>Server</code>. <em>We should start serve to make in-memory DB available for another process</em></li>
</ol>


<a name="Let.s.try.to.implement.this:"></a>
<h3>Let&rsquo;s try to implement this:</h3>

<ul>
<li>Run sample application</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DBNAME</span> <span class="o">=</span> <span class="s">&quot;mytest&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">SQLException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// open the in-memory database within a VM</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="o">);</span> <span class="c1">// (1)</span>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">conn</span>
</span><span class='line'>          <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="s">&quot;jdbc:h2:mem:&quot;</span> <span class="o">+</span> <span class="n">DBNAME</span><span class="o">,</span> <span class="s">&quot;sa&quot;</span><span class="o">,</span> <span class="s">&quot;sa&quot;</span><span class="o">);</span> <span class="c1">// (2)</span>
</span><span class='line'>        <span class="c1">// username:password are very important and must be used for connecting via H2 Console</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Statement</span> <span class="n">stat</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span> <span class="c1">// (3)</span>
</span><span class='line'>        <span class="n">stat</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">&quot;create table mytbl(id int primary key, name varchar(255))&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stat</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">&quot;insert into mytbl values(1, &#39;Hello&#39;)&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stat</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">&quot;insert into mytbl values(2, &#39;World&#39;)&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Verify that sample data was really inserted</span>
</span><span class='line'>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stat</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="s">&quot;select * from mytbl&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ResultSet output:&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&gt; &quot;</span> <span class="o">+</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// start a TCP server</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Server</span><span class="o">.</span><span class="na">createTcpServer</span><span class="o">().</span><span class="na">start</span><span class="o">();</span> <span class="c1">// (4)</span>
</span><span class='line'>        <span class="c1">// .. use in embedded mode ..</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// or use it from another process:</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server started and connection is open.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;URL: jdbc:h2:&quot;</span> <span class="o">+</span> <span class="n">server</span><span class="o">.</span><span class="na">getURL</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/mem:&quot;</span> <span class="o">+</span> <span class="n">DBNAME</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;now start the H2 Console in another process using:\n&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;$ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Press [Enter] to stop.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Stopping server and closing the connection&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server is STOPPED&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Output for previous run:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ResultSet</span> <span class="nl">output:</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">Hello</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">World</span>
</span><span class='line'><span class="n">Server</span> <span class="n">started</span> <span class="n">and</span> <span class="n">connection</span> <span class="n">is</span> <span class="n">open</span><span class="o">.</span>
</span><span class='line'><span class="nl">URL:</span> <span class="nl">jdbc:h2:tcp:</span><span class="c1">//192.168.1.100:9092/mem:mytest</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">now</span> <span class="n">start</span> <span class="n">the</span> <span class="n">H2</span> <span class="n">Console</span> <span class="n">in</span> <span class="n">another</span> <span class="n">process</span> <span class="nl">using:</span>
</span><span class='line'><span class="n">$</span> <span class="n">cd</span> <span class="n">h2</span><span class="o">/</span><span class="n">bin</span><span class="o">;</span> <span class="n">java</span> <span class="o">-</span><span class="n">cp</span> <span class="n">h2</span><span class="o">-</span><span class="mf">1.4</span><span class="o">.</span><span class="mi">185</span><span class="o">.</span><span class="na">jar</span> <span class="n">org</span><span class="o">.</span><span class="na">h2</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">Console</span> <span class="o">-</span><span class="n">web</span> <span class="o">-</span><span class="n">browser</span>
</span><span class='line'><span class="n">Press</span> <span class="o">[</span><span class="n">Enter</span><span class="o">]</span> <span class="n">to</span> <span class="n">stop</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>We assume that h2 installation bundle (zip file) was downloaded (from <a href="http://www.h2database.com/html/download.html">http://www.h2database.com/html/download.html</a>) beforehand and unpacked in some folder</li>
<li>Go into H2 &ldquo;install/unpack&rdquo; folder and run the next command <code>cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser</code></li>
<li>Now we should copy URL (from sample App output) and credentials sa/sa to login into Console

<ul>
<li><strong>URL:</strong> jdbc:h2:tcp://192.168.1.100:9092/mem:mytest</li>
<li><strong>Username:</strong> sa</li>
<li><strong>Password:</strong> sa</li>
</ul>
</li>
<li>Login window (opened from shell by <code>org.h2.tools.Console</code>)
<img class="left" src="http://halyph.com/images/posts/h2console_login.png"></li>
</ul>


<p>Verify that our custom table contains just inserted values
<img class="left" src="http://halyph.com/images/posts/h2console_sqlwindow.png"></p>

<a name="Add.Embedded.TCP.and.Web.Servers"></a>
<h3>Add Embedded TCP and Web Servers</h3>

<p>Now, it&rsquo;s time to add small improvements.
The idea is to switch <em>on</em> H2 Console <strong>Web Server</strong> and <strong>TCP Server</strong> to have external access.
We should add/update item (4) in previous code snippets like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DBNAME</span> <span class="o">=</span> <span class="s">&quot;mytest&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">SQLException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Server</span> <span class="n">webServer</span> <span class="o">=</span> <span class="n">Server</span><span class="o">.</span><span class="na">createWebServer</span><span class="o">(</span><span class="s">&quot;-webAllowOthers&quot;</span><span class="o">,</span><span class="s">&quot;-webPort&quot;</span><span class="o">,</span><span class="s">&quot;8082&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span> <span class="c1">// (4a)</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Server</span><span class="o">.</span><span class="na">createTcpServer</span><span class="o">(</span><span class="s">&quot;-tcpAllowOthers&quot;</span><span class="o">,</span><span class="s">&quot;-tcpPort&quot;</span><span class="o">,</span><span class="s">&quot;9092&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>    <span class="c1">// (4b)</span>
</span><span class='line'>        <span class="c1">// .. use in embedded mode ..</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">webServer</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server is STOPPED&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>After this we can access to Web Console without running external service

<ul>
<li>Simply use URL in  browser (access to <strong>Web Server</strong>): <a href="http://localhost:8082/">http://localhost:8082/</a></li>
</ul>
</li>
<li>Use any JDBC client (see IntelliJ IDEA as a sample below)

<ul>
<li>access to <strong>TCP Server</strong>
<img class="left" src="http://halyph.com/images/posts/h2console_idea.png"></li>
</ul>
</li>
</ul>


<a name="References"></a>
<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/5077584/h2-database-in-memory-mode-cannot-be-accessed-by-console">H2 database in memory mode cannot be accessed by Console</a></li>
<li><a href="http://www.h2database.com/html/tutorial.html">Official H2 Tutorial</a></li>
<li><a href="http://h2database.com/javadoc/org/h2/tools/Server.html">H2 Server methods</a></li>
<li><a href="https://github.com/halyph/tutorials/tree/master/h2-embedded-console">GitHub Sources</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix Textmate OSX Yosemite Ruby 1.8 Issues?]]></title>
    <link href="http://halyph.com/blog/2014/11/16/how-to-fix-textmate-osx-yosemite-ruby-1-dot-8-issues/"/>
    <updated>2014-11-16T17:40:32+02:00</updated>
    <id>http://halyph.com/blog/2014/11/16/how-to-fix-textmate-osx-yosemite-ruby-1-dot-8-issues</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/textmate.png">
Textmate 2.0 is using Ruby 1.8 in own bundles. OSX Yosemite dropped Ruby 1.8 as default Ruby implementation, now it&rsquo;s Ruby 2.0. Based on this all Textmate ruby-based (legacy) bundles do not work. It can be fixed in several steps:</p>

<ul>
<li>Install Ruby 1.8.x via some Ruby version manager (e.g. rvm)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install 1.8
</span><span class='line'>Warning! Requested ruby installation which requires another ruby available - installing ruby-1.8.7-p374 first.
</span><span class='line'>
</span><span class='line'>Checking requirements <span class="k">for</span> osx.
</span><span class='line'>Installing requirements <span class="k">for</span> osx.
</span><span class='line'>Updating system...........
</span><span class='line'>Installing required custom packages: homebrew/versions homebrew/versions.
</span><span class='line'>Installing required packages: libtool, gcc48, libyaml, libksba, openssl098.....-Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> are already up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /Users/halyph/.rvm/rubies/ruby-1.8.7-p374, this may take a <span class="k">while</span> depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#downloading ruby-1.8.7-p374, this may take a while depending on your connection...</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'><span class="m">100</span> 4150k  <span class="m">100</span> 4150k    <span class="m">0</span>     <span class="m">0</span>   279k      <span class="m">0</span>  0:00:14  0:00:14 --:--:--  326k
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#extracting ruby-1.8.7-p374 to /Users/halyph/.rvm/src/ruby-1.8.7-p374....</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/GH-488.patch.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#configuring...............................</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#post-configuration.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#compiling....................................................</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#installing.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#making binaries executable..</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#downloading rubygems-2.0.14</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'><span class="m">100</span>  329k  <span class="m">100</span>  329k    <span class="m">0</span>     <span class="m">0</span>   108k      <span class="m">0</span>  0:00:03  0:00:03 --:--:--  108k
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#extracting rubygems-2.0.14....</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#removing old rubygems.........</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#installing rubygems-2.0.14..................................|</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374@global</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems..............................................................</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#generating global wrappers........</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#generating default wrappers........</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span>
</span><span class='line'>Install of ruby-1.8.7-p374 - <span class="c">#complete</span>
</span><span class='line'>WARNING: Please be aware that you just installed a ruby that is no longer maintained <span class="o">(</span>2014-02-23<span class="o">)</span>, <span class="k">for</span> a list of maintained rubies visit:
</span><span class='line'>
</span><span class='line'>    http://bugs.ruby-lang.org/projects/ruby/wiki/ReleaseEngineering
</span><span class='line'>
</span><span class='line'>Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches.
</span><span class='line'>Ruby was built without documentation, to build it run: rvm docs generate-ri
</span><span class='line'>Checking requirements <span class="k">for</span> osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> are already up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /Users/halyph/.rvm/rubies/ruby-1.8.7-head, this may take a <span class="k">while</span> depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>Cloning from git://github.com/ruby/ruby.git, this may take a <span class="k">while</span> depending on your connection.
</span><span class='line'>HEAD is now at 2a9ea11 * lib/webrick/server.rb <span class="o">(</span>initialize<span class="o">)</span>: Initialize shutdown pipe here
</span><span class='line'>Branch ruby_1_8_7 <span class="nb">set </span>up to track remote branch ruby_1_8_7 from origin.
</span><span class='line'>Switched to a new branch <span class="s1">&#39;ruby_1_8_7&#39;</span>
</span><span class='line'>Copying from repo to src path...
</span><span class='line'>ruby-1.8.7-head - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#autoreconf.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#configuring...............................</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#post-configuration.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#compiling...................................................|</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#installing.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#making binaries executable..</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#downloading rubygems-2.0.14</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#extracting rubygems-2.0.14.....</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#removing old rubygems.........</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#installing rubygems-2.0.14..................................|</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head@global</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems..............................................................</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#generating global wrappers........</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#generating default wrappers........</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span>
</span><span class='line'>Install of ruby-1.8.7-head - <span class="c">#complete</span>
</span><span class='line'>Please be aware that you just installed a ruby that requires        <span class="m">3</span> patches just to be compiled on an up to date linux system.
</span><span class='line'>This may have known and unaccounted <span class="k">for</span> security vulnerabilities.
</span><span class='line'>Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches.
</span><span class='line'>Ruby was built without documentation, to build it run: rvm docs generate-ri
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Update Textmate preferences
<img src="http://halyph.com/images/posts/textmate_prefs_ruby.png"></p></li>
<li><p>Verify &ldquo;updated&rdquo; Textmate settings via some ruby-based bundles,
e.g. <code>Bundles-&gt;Text-&gt;Duplicate Line</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching to Textmate 2]]></title>
    <link href="http://halyph.com/blog/2014/10/20/switching-to-textmate-2/"/>
    <updated>2014-10-20T02:06:26+03:00</updated>
    <id>http://halyph.com/blog/2014/10/20/switching-to-textmate-2</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/textmate.png">
Recently I&rsquo;ve decided to switch from Sublime Text editor to <a href="http://macromates.com">TextMate 2</a>. At the beginning of <a href="http://rubyonrails.org/">Rails</a> &ldquo;era&rdquo; it was the sexiest text editor in the world. But, at that time, I was a Windows user ;-)</p>

<p>I was inspired by <a href="http://blog.agiledeveloper.com/">Venkat Subramaniam</a> to make this switch in 2014. Dr. Venkant is using Textmate during his conference live coding for years.</p>

<p>Additional argument for switching is the fact that Textmate 2 is <a href="https://github.com/textmate/textmate">open sourced</a>.</p>

<p>Here is the list of articles which I highly recommend for Textmate newcomers:</p>

<ul>
<li><a href="http://hiltmon.com/blog/2013/11/09/textmate-2-basics/">TextMate 2 Basics</a> it&rsquo;s basic tips for using TextMate</li>
<li><a href="http://hiltmon.com/blog/2014/01/20/more-textmate-2-basics/">More TextMate 2 Basics</a> additional usage tips</li>
<li><a href="http://hiltmon.com/blog/2013/04/15/my-textmate-2-setup/">My TextMate 2 Setup</a> shows how to tweak TextMate properties per user or per project</li>
<li><a href="http://nofluffjuststuff.com/blog/venkat_subramaniam/2007/10/tweaking_textmate_groovy_bundle">Tweaking TextMate Groovy Bundle</a> and <a href="http://nofluffjuststuff.com/blog/venkat_subramaniam/2008/02/tweaking_textmate_ruby_bundle_run_command">Tweaking TextMate Ruby Bundle Run Command</a> it&rsquo;s famous Dr. Venkat TextMate setting for showing program run results as tooltips (highly recommended settings). Also, you can see how to configure these setting in this screencast <a href="https://www.agilelearner.com/presentation/5">Running in TextMate</a></li>
<li><a href="http://manual.macromates.com/en/">TextMate Manual</a></li>
</ul>


<p>Don&rsquo;t forget to share your TextMate links, article, tips, hacks, etc.</p>
]]></content>
  </entry>
  
</feed>
