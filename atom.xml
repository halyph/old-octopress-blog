<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Knowledge Is Everything]]></title>
  <link href="http://halyph.com/atom.xml" rel="self"/>
  <link href="http://halyph.com/"/>
  <updated>2015-02-05T02:05:28+02:00</updated>
  <id>http://halyph.com/</id>
  <author>
    <name><![CDATA[Orest Ivasiv]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Generate PermGen Leak?]]></title>
    <link href="http://halyph.com/blog/2015/02/05/how-to-generate-permgen/"/>
    <updated>2015-02-05T00:05:30+02:00</updated>
    <id>http://halyph.com/blog/2015/02/05/how-to-generate-permgen</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png"></p>

<p>I&rsquo;m sure that a lot of Java developers experienced <code>java.lang.OutOfMemoryError: PermGen space</code> (OOME PermGen). It was very common to get this error after multiple WAR re-deploys on Tomcat v.6.x. Permanent generation (PermGen) region of memory is used to store the internal representation of loaded classes (and much more, see here [<a href="https://plumbr.eu/blog/what-is-a-permgen-leak">1</a>] and [<a href="https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation">2</a>]).</p>

<p>So, we can get <strong>OOME PermGen</strong> when ClassLoader whats to store class definition, but there is not enough space in PermGen - i.e. loaded too many classes.</p>

<p>Based on this <strong>OOME PermGen</strong> error can be generated via:</p>

<ul>
<li>decreasing PermGen size</li>
<li>loading huge amount of classes</li>
</ul>


<p>I highly recommend to read <a href="https://plumbr.eu/blog/what-is-a-permgen-leak">What is a PermGen leak?</a> post to get more info about this issue.</p>

<h3>Disclaimer</h3>

<p>The current post is totally based on <a href="https://plumbr.eu/blog/how-not-to-create-a-permgen-leak">How (not) to create a permgen leak?</a></p>

<h2>Generate PermGen leak</h2>

<p>The main idea is dynamically create a lot of classes via byte code manipulation library. We are going to use <a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/">Javassist</a> as it&rsquo;s the simplest library with nice API.</p>

<ul>
<li>We assume that it&rsquo;s <code>maven</code> based project. So, let&rsquo;s add Javassist to <code>pom.xml</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>
</span><span class='line'>  &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;my-app&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
</span><span class='line'>  &lt;packaging&gt;jar&lt;/packaging&gt;
</span><span class='line'>
</span><span class='line'>  &lt;name&gt;my-app&lt;/name&gt;
</span><span class='line'>  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
</span><span class='line'>
</span><span class='line'>  &lt;properties&gt;
</span><span class='line'>    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
</span><span class='line'>    &lt;skipTests&gt;true&lt;/skipTests&gt;
</span><span class='line'>  &lt;/properties&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependencies&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.javassist&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;javassist&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.15.0-GA&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>  &lt;/dependencies&gt;
</span><span class='line'>
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>    &lt;plugins&gt;
</span><span class='line'>      &lt;plugin&gt;
</span><span class='line'>        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class='line'>        &lt;artifactId&gt;appassembler-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>        &lt;version&gt;1.9&lt;/version&gt;
</span><span class='line'>        &lt;configuration&gt;
</span><span class='line'>          &lt;extraJvmArguments&gt;-XX:PermSize=2M -XX:MaxPermSize=4M&lt;/extraJvmArguments&gt;
</span><span class='line'>          &lt;programs&gt;
</span><span class='line'>            &lt;program&gt;
</span><span class='line'>              &lt;mainClass&gt;com.mycompany.app.App&lt;/mainClass&gt;
</span><span class='line'>              &lt;id&gt;app&lt;/id&gt;
</span><span class='line'>            &lt;/program&gt;
</span><span class='line'>          &lt;/programs&gt;
</span><span class='line'>        &lt;/configuration&gt;
</span><span class='line'>      &lt;/plugin&gt;
</span><span class='line'>    &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Also, we should set <strong>PermGen</strong> and <strong>MaxPermGen</strong> size to 2M and 4M respectively (it gives us a chance to get error as quickly as possible). Maven <code>Appassembler</code> plugin [<a href="http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program-jvmsettings.html">3</a>] uses <code>extraJvmArguments</code> parameter while generating wrapper scripts: shell and batch (see <code>pom.xml</code> above, <code>&lt;extraJvmArguments&gt;-XX:PermSize=2M -XX:MaxPermSize=2M&lt;/extraJvmArguments&gt;</code>).</li>
</ul>


<blockquote><p>&ndash;XX:PermSize<size> - Set initial PermGen Size</p>

<p>&ndash;XX:MaxPermSize<size> - Set the maximum PermGen Size</p></blockquote>

<ul>
<li>Below is a simple application which dynamically creates 1000 classes to cause PermGem leak. Class creation is very simple and self explanatory. The main idea is that we should use byte code manipulation library to create classes dynamically.</li>
</ul>


<p>See additional comments in the next code snippet</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mycompany</span><span class="o">.</span><span class="na">app</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javassist.CannotCompileException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javassist.ClassPool</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Steps to build and run demo application: &lt;br /&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;mvn clean package appassembler:assemble</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;target/appassembler/bin/app</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * We should use static block for OutOfMemoryError &quot;initialization&quot;</span>
</span><span class='line'><span class="cm">     * It&#39;s very important to have it. In other case JVM won&#39;t be able to</span>
</span><span class='line'><span class="cm">     * throw (actually create new OutOfMemoryError) this exception because</span>
</span><span class='line'><span class="cm">     * there will be no free memory for this. That&#39;s why we creating it beforehand.</span>
</span><span class='line'><span class="cm">     * As you can see we intentionally added output to highlight that THIS error</span>
</span><span class='line'><span class="cm">     * was produces by us.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">OutOfMemoryError</span><span class="o">().</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=====================&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Initialized/created OutOfMemoryError&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;=====================&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Start dynamic class creation.....\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">createClass</span><span class="o">(</span><span class="s">&quot;MyClass&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// we use this output as indicator to see the rough number of created classes</span>
</span><span class='line'>            <span class="c1">// it&#39;s not necessary to print every single (just created) class</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">50</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Class</span> <span class="nf">createClass</span><span class="o">(</span><span class="n">String</span> <span class="n">className</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">CannotCompileException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ClassPool</span> <span class="n">pool</span> <span class="o">=</span> <span class="n">ClassPool</span><span class="o">.</span><span class="na">getDefault</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">pool</span><span class="o">.</span><span class="na">makeClass</span><span class="o">(</span><span class="n">className</span><span class="o">).</span><span class="na">toClass</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run the application</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mvn clean package appassembler:assemble
</span><span class='line'>$ target/appassembler/bin/app
</span><span class='line'>java.lang.OutOfMemoryError
</span><span class='line'>  at com.mycompany.app.App.&lt;clinit&gt;(App.java:15)
</span><span class='line'>=====================
</span><span class='line'>Initialized/created OutOfMemoryError
</span><span class='line'>=====================
</span><span class='line'>Start dynamic class creation.....
</span><span class='line'>
</span><span class='line'>class MyClass0
</span><span class='line'>class MyClass50
</span><span class='line'>class MyClass100
</span><span class='line'>class MyClass150
</span><span class='line'>class MyClass200
</span><span class='line'>class MyClass250
</span><span class='line'>class MyClass300
</span><span class='line'>class MyClass350
</span><span class='line'>class MyClass400
</span><span class='line'>class MyClass450
</span><span class='line'>class MyClass500
</span><span class='line'>class MyClass550
</span><span class='line'>Exception in thread "Reference Handler" java.lang.OutOfMemoryError: PermGen space
</span><span class='line'>  at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:140)
</span><span class='line'>Exception in thread "main" java.lang.OutOfMemoryError: PermGen space
</span><span class='line'>  at javassist.ClassPool.toClass(ClassPool.java:1089)
</span><span class='line'>  at javassist.ClassPool.toClass(ClassPool.java:1032)
</span><span class='line'>  at javassist.ClassPool.toClass(ClassPool.java:990)
</span><span class='line'>  at javassist.CtClass.toClass(CtClass.java:1125)
</span><span class='line'>  at com.mycompany.app.App.createClass(App.java:36)
</span><span class='line'>  at com.mycompany.app.App.main(App.java:29)</span></code></pre></td></tr></table></div></figure>


<p>The next command runs under the hood:
<code>java -XX:PermSize=2M -XX:MaxPermSize=4M -classpath "$CLASSPATH" com.mycompany.app.App</code></p>

<p>As you can see it was possible to create about 550 <code>MyClass</code> classes before we&rsquo;ve got an expected error.</p>

<h3>Tomcat Leaks</h3>

<p>Tomcat team created a nice <a href="http://wiki.apache.org/tomcat/MemoryLeakProtection">wiki page</a> where listed and shown the situations where leaks can be detected and fixed.</p>

<h2>References</h2>

<ul>
<li><a href="https://plumbr.eu/blog/what-is-a-permgen-leak">What is a PermGen leak?</a></li>
<li><a href="https://plumbr.eu/blog/how-not-to-create-a-permgen-leak">How (not) to create a permgen leak?</a></li>
<li><a href="http://www.infoq.com/articles/Java-PERMGEN-Removed">Where Has the Java PermGen Gone?</a> PermGen is replace with Metaspace in Java 8</li>
<li><a href="https://blogs.oracle.com/jonthecollector/entry/presenting_the_permanent_generation">Presenting the Permanent Generation</a> General intro into the subject</li>
<li><a href="http://www.javaranch.com/journal/200711/creating_java_classes_runtime_expression_evaluation.html">Javassist - Creating Java classes at runtime for evaluating numerical expressions</a> Small article how to create Java classes dynamically</li>
<li><a href="http://wiki.apache.org/tomcat/MemoryLeakProtection">Tomcat Wiki MemoryLeakProtection</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scripting in Scala]]></title>
    <link href="http://halyph.com/blog/2015/02/02/scripting-in-scala/"/>
    <updated>2015-02-02T00:18:00+02:00</updated>
    <id>http://halyph.com/blog/2015/02/02/scripting-in-scala</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/scala.png"></p>

<p>Scala language compiles sources code to Java bytecode.  But, it has some nice scripting facilities. Let&rsquo;s review them.</p>

<p>So, the <code>scala</code> command is also a shell-script wrapper around the java command.</p>

<p>According to official <a href="http://www.scala-lang.org/files/archive/nightly/docs-2.10.1/manual/html/scala.html">scala utility</a> documentation (here highlighted only post-related notes):</p>

<blockquote><p><code>scala [ &lt;option&gt; ]... [ &lt;torun&gt; &lt;argument&gt;... ]</code></p>

<p>The <code>scala</code> utility runs Scala code using a Java runtime environment.</p>

<p>If a <strong>script</strong> file is specified to run, then the file is read and all Scala statements and declarations in the file are processed in order. Any arguments specified will be available via the argsvariable.</p>

<p>Script files may have an <strong>optional header</strong> that is ignored if present. There are two ways to format the header: either beginning with #! and ending with !#, or beginning with ::#! and ending with ::!#.</p>

<p>Such a header must have each header boundary start at the beginning of a line. Headers can be used to make stand-alone script files, as shown in the examples below.</p>

<p>Here is a complete Scala script (<strong>check.sh</strong>) for Unix:</p>

<pre><code>#!/bin/sh
exec scala "$0" "$@"
!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre>

<p>Here is a complete Scala script (<strong>check.bat</strong>) for MS Windows:</p>

<pre><code>::#!
@echo off
call scala %0 %*
goto :eof
::!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre>

<p>If you want to use the compilation cache to speed up multiple executions of the script (<strong>check.sh</strong>), then add <strong>-savecompiled</strong> to the scala command:</p>

<pre><code>#!/bin/sh
exec scala -savecompiled "$0" "$@"
!#
Console.println("Hello, world!")
argv.toList foreach Console.println
</code></pre></blockquote>

<p>These tricks give us an ability to run Scala script as plain shell script. Also, based on the setting above this script can have input parameters and <em>almost</em> cross-platform (see script header differences for Linux <strong>.vs.</strong> Windows).</p>

<p>Now, we should save the mentioned above code snippet in some file (e.g. <strong>check.sh</strong>) and make it executable. This script can be run as any Linux shell script <code>./check.sh</code> (<code>check.bat</code> - Windows).</p>

<h2>Scala utility internals</h2>

<h3>Linux</h3>

<p>Linux script header uses the next items:</p>

<ul>
<li><code>#!</code> it&rsquo;s <a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a> interpreter directive</li>
<li><code>exec</code> is used to run <code>scala</code> without creation new process. Commands which go right after <code>exec</code> will not be executed</li>
<li><code>!#</code> is simple marker for <code>scala</code> utility (see notes below)</li>
</ul>


<p>E.g.
This script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>echo Header
</span><span class='line'>exec echo
</span><span class='line'>!#
</span><span class='line'>echo Body</span></code></pre></td></tr></table></div></figure>


<p>will have the next output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./test.sh
</span><span class='line'>Header</span></code></pre></td></tr></table></div></figure>


<p>We will get error in case <code>exec</code> is removed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/sh
</span><span class='line'>echo Header
</span><span class='line'>!#
</span><span class='line'>echo Body</span></code></pre></td></tr></table></div></figure>


<p>Output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./test.sh
</span><span class='line'>Header
</span><span class='line'>./test.sh: line 4: !#: command not found
</span><span class='line'>Body
</span></code></pre></td></tr></table></div></figure>


<h3>Windows</h3>

<p>Windows batch script header uses the next items:</p>

<ul>
<li><code>::</code> is a remark without displaying or executing that line when the batch file is run (see <a href="http://www.computerhope.com/batch.htm">Information on batch files</a>).</li>
<li><code>::#!</code>  is simple marker for <code>scala</code> utility (see notes below)</li>
<li><code>@echo off</code> disable echo</li>
<li><code>call</code> calls one batch program from another.</li>
<li><code>goto :eof</code> go to end of file</li>
<li><code>::!#</code> is simple marker for <code>scala</code> utility (see notes below)</li>
</ul>


<p>The OS-specific script settings were identified, now let&rsquo;s dive deeper to understand how <code>scala</code> utility works.</p>

<h3><code>scala</code> internals</h3>

<p>This utility performs the next flow to run script:</p>

<ol>
<li>Run <code>scala.tools.nsc.MainGenericRunner#process</code> and identify run target &ldquo;as Script&rdquo; (there are other targets) <code>ScriptRunner.runScriptAndCatch(settings, thingToRun, command.arguments)</code></li>
<li><code>ScriptRunner</code> creates temp file <code>File.makeTemp("scalacmd", ".scala")</code></li>
<li>Run compiler and clean script header</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ScriptRunner extends HasCompileSocket {
</span><span class='line'>...
</span><span class='line'>  private def withCompiledScript(
</span><span class='line'>      settings: GenericRunnerSettings,
</span><span class='line'>      scriptFile: String)
</span><span class='line'>      (handler: String =&gt; Boolean): Boolean =
</span><span class='line'>    {
</span><span class='line'>      def mainClass = scriptMain(settings)
</span><span class='line'>  
</span><span class='line'>         val compiler = newGlobal(settings, reporter)
</span><span class='line'>         new compiler.Run compile List(scriptFile)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Global
</span><span class='line'>    /** If this compilation is scripted, convert the source to a script source. */
</span><span class='line'>    private def scripted(s: SourceFile) = s match {
</span><span class='line'>      case b: BatchSourceFile if settings.script.isSetByUser =&gt; ScriptSourceFile(b)
</span><span class='line'>      case _ =&gt; s
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /** Compile abstract file until `globalPhase`, but at least
</span><span class='line'>     *  to phase "namer".
</span><span class='line'>     */
</span><span class='line'>    def compileLate(file: AbstractFile) {
</span><span class='line'>      if (!compiledFiles(file.path))
</span><span class='line'>        compileLate(new CompilationUnit(scripted(getSourceFile(file))))
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Cleanup shell script (remove header) via <code>SourceFile</code>. Now, it&rsquo;s clear why script&rsquo;s header have such <em>strange</em> closing markers (see line 21, <code>content drop headerLen</code> - actual header remove)</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object ScriptSourceFile {
</span><span class='line'>  /** Length of the script header from the given content, if there is one.
</span><span class='line'>   *  The header begins with "#!" or "::#!" and ends with a line starting
</span><span class='line'>   *  with "!#" or "::!#".
</span><span class='line'>   */
</span><span class='line'>  def headerLength(cs: Array[Char]): Int = {
</span><span class='line'>    val headerPattern = Pattern.compile("""((?m)^(::)?!#.*|^.*/env .*)(\r|\n|\r\n)""")
</span><span class='line'>    val headerStarts  = List("#!", "::#!")
</span><span class='line'>
</span><span class='line'>    if (headerStarts exists (cs startsWith _)) {
</span><span class='line'>      val matcher = headerPattern matcher cs.mkString
</span><span class='line'>      if (matcher.find) matcher.end
</span><span class='line'>      else throw new IOException("script file does not close its header with !# or ::!#")
</span><span class='line'>    }
</span><span class='line'>    else 0
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  def apply(file: AbstractFile, content: Array[Char]) = {
</span><span class='line'>    val underlying = new BatchSourceFile(file, content)
</span><span class='line'>    val headerLen = headerLength(content)
</span><span class='line'>    val stripped = new ScriptSourceFile(underlying, content drop headerLen, headerLen)
</span><span class='line'>
</span><span class='line'>    stripped
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>Add libraries to Scala script</h2>

<p>Scala script libraries (<strong>jar</strong>s) can be added in script&rsquo;s header section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>exec scala -classpath "lib/lib.1.jar:lib/lib.2.jar" "$0" "$@"
</span><span class='line'>!#</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>There is nothing magical in Scala interpretation. Every single peace of code must be compiled. Such interesting <em>scripting</em> approach can be applied to Java as well.</p>

<p>Unfortunately, Scala is not looks like nice scripting language (because it&rsquo;s <strong>not</strong> designed for this use case). It will be uncomfortable &ldquo;scripting&rdquo; in Scala without IDE.</p>

<h2>References</h2>

<ul>
<li><a href="http://timperrett.com/2011/08/01/system-scripting-with-scala/">System Scripting with Scala</a></li>
<li><a href="http://www.scala-lang.org/files/archive/nightly/docs-2.10.1/manual/html/scala.html">scala utility</a></li>
<li><a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></li>
<li><a href="http://www.computerhope.com/batch.htm">Information on batch files</a></li>
<li>Scala Sources:

<ul>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/compiler/scala/tools/nsc/ScriptRunner.scala#">ScriptRunner.scala</a></li>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/reflect/scala/reflect/internal/util/SourceFile.scala">SourceFile.scala</a></li>
<li><a href="https://github.com/scala/scala/blob/v2.11.5/src/compiler/scala/tools/nsc/Global.scala">Global.scala</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Embedded H2 With Web Console?]]></title>
    <link href="http://halyph.com/blog/2015/01/22/how-to-use-embedded-h2-with-h2-console/"/>
    <updated>2015-01-22T00:55:03+02:00</updated>
    <id>http://halyph.com/blog/2015/01/22/how-to-use-embedded-h2-with-h2-console</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png"></p>

<p>There are several Java SQL databases which supports both server and embedded modes: <a href="http://www.h2database.com/">H2</a>, <a href="http://hsqldb.org/">HSQLDB</a> and <a href="http://db.apache.org/derby/">Derby</a>. The most interesting for me is H2 with own web <a href="http://www.h2database.com/html/quickstart.html#h2_console">Console</a>.</p>

<p>The aim of this post is to show how to connect from H2 Console to embedded in-memory H2.</p>

<blockquote><p>H2 currently supports three servers: a web server (for the H2 Console), a TCP server (for client/server connections) and an PG server (for PostgreSQL clients). <strong>Please note that only the web server supports browser connections.</strong> The servers can be started in different ways, one is using the Server tool. Starting the server doesn&rsquo;t open a database - databases are opened as soon as a client connects.</p></blockquote>

<p>The next steps have to be performed to connect to embedded DB and populate initial data:</p>

<ol>
<li>Load DB driver</li>
<li>Get <code>Connection</code></li>
<li>Create <code>Statement</code> and <code>executeUpate</code> queries</li>
<li>Create TCP <code>Server</code>. <em>We should start serve to make in-memory DB available for another process</em></li>
</ol>


<h3>Let&rsquo;s try to implement this:</h3>

<ul>
<li>Run sample application</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DBNAME</span> <span class="o">=</span> <span class="s">&quot;mytest&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">SQLException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// open the in-memory database within a VM</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;org.h2.Driver&quot;</span><span class="o">);</span> <span class="c1">// (1)</span>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">conn</span>
</span><span class='line'>          <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="s">&quot;jdbc:h2:mem:&quot;</span> <span class="o">+</span> <span class="n">DBNAME</span><span class="o">,</span> <span class="s">&quot;sa&quot;</span><span class="o">,</span> <span class="s">&quot;sa&quot;</span><span class="o">);</span> <span class="c1">// (2)</span>
</span><span class='line'>        <span class="c1">// username:password are very important and must be used for connecting via H2 Console</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Statement</span> <span class="n">stat</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span> <span class="c1">// (3)</span>
</span><span class='line'>        <span class="n">stat</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">&quot;create table mytbl(id int primary key, name varchar(255))&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stat</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">&quot;insert into mytbl values(1, &#39;Hello&#39;)&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stat</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">&quot;insert into mytbl values(2, &#39;World&#39;)&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Verify that sample data was really inserted</span>
</span><span class='line'>        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stat</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="s">&quot;select * from mytbl&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ResultSet output:&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&gt; &quot;</span> <span class="o">+</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// start a TCP server</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Server</span><span class="o">.</span><span class="na">createTcpServer</span><span class="o">().</span><span class="na">start</span><span class="o">();</span> <span class="c1">// (4)</span>
</span><span class='line'>        <span class="c1">// .. use in embedded mode ..</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// or use it from another process:</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server started and connection is open.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;URL: jdbc:h2:&quot;</span> <span class="o">+</span> <span class="n">server</span><span class="o">.</span><span class="na">getURL</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;/mem:&quot;</span> <span class="o">+</span> <span class="n">DBNAME</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;now start the H2 Console in another process using:\n&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;$ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Press [Enter] to stop.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Stopping server and closing the connection&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server is STOPPED&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Output for previous run:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ResultSet output:
</span><span class='line'>&gt; Hello
</span><span class='line'>&gt; World
</span><span class='line'>Server started and connection is open.
</span><span class='line'>URL: jdbc:h2:tcp://192.168.1.100:9092/mem:mytest
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>now start the H2 Console in another process using:
</span><span class='line'>$ cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser
</span><span class='line'>Press [Enter] to stop.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>We assume that h2 installation bundle (zip file) was downloaded (from <a href="http://www.h2database.com/html/download.html">http://www.h2database.com/html/download.html</a>) beforehand and unpacked in some folder</li>
<li>Go into H2 &ldquo;install/unpack&rdquo; folder and run the next command <code>cd h2/bin; java -cp h2-1.4.185.jar org.h2.tools.Console -web -browser</code></li>
<li>Now we should copy URL (from sample App output) and credentials sa/sa to login into Console

<ul>
<li><strong>URL:</strong> jdbc:h2:tcp://192.168.1.100:9092/mem:mytest</li>
<li><strong>Username:</strong> sa</li>
<li><strong>Password:</strong> sa</li>
</ul>
</li>
<li>Login window (opened from shell by <code>org.h2.tools.Console</code>)
<img class="left" src="http://halyph.com/images/posts/h2console_login.png"></li>
</ul>


<p>Verify that our custom table contains just inserted values
<img class="left" src="http://halyph.com/images/posts/h2console_sqlwindow.png"></p>

<h3>Add Embedded TCP and Web Servers</h3>

<p>Now, it&rsquo;s time to add small improvements.
The idea is to switch <em>on</em> H2 Console <strong>Web Server</strong> and <strong>TCP Server</strong> to have external access.
We should add/update item (4) in previous code snippets like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DBNAME</span> <span class="o">=</span> <span class="s">&quot;mytest&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">SQLException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Server</span> <span class="n">webServer</span> <span class="o">=</span> <span class="n">Server</span><span class="o">.</span><span class="na">createWebServer</span><span class="o">(</span><span class="s">&quot;-webAllowOthers&quot;</span><span class="o">,</span><span class="s">&quot;-webPort&quot;</span><span class="o">,</span><span class="s">&quot;8082&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span> <span class="c1">// (4a)</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Server</span><span class="o">.</span><span class="na">createTcpServer</span><span class="o">(</span><span class="s">&quot;-tcpAllowOthers&quot;</span><span class="o">,</span><span class="s">&quot;-tcpPort&quot;</span><span class="o">,</span><span class="s">&quot;9092&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>    <span class="c1">// (4b)</span>
</span><span class='line'>        <span class="c1">// .. use in embedded mode ..</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">webServer</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Server is STOPPED&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>After this we can access to Web Console without running external service

<ul>
<li>Simply use URL in  browser (access to <strong>Web Server</strong>): <a href="http://localhost:8082/">http://localhost:8082/</a></li>
</ul>
</li>
<li>Use any JDBC client (see IntelliJ IDEA as a sample below)

<ul>
<li>access to <strong>TCP Server</strong>
<img class="left" src="http://halyph.com/images/posts/h2console_idea.png"></li>
</ul>
</li>
</ul>


<h2>References</h2>

<ol>
<li><a href="http://stackoverflow.com/questions/5077584/h2-database-in-memory-mode-cannot-be-accessed-by-console">H2 database in memory mode cannot be accessed by Console</a></li>
<li><a href="http://www.h2database.com/html/tutorial.html">Official H2 Tutorial</a></li>
<li><a href="http://h2database.com/javadoc/org/h2/tools/Server.html">H2 Server methods</a></li>
<li><a href="https://github.com/halyph/tutorials/tree/master/h2-embedded-console">GitHub Sources</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix Textmate OSX Yosemite Ruby 1.8 Issues?]]></title>
    <link href="http://halyph.com/blog/2014/11/16/how-to-fix-textmate-osx-yosemite-ruby-1-dot-8-issues/"/>
    <updated>2014-11-16T17:40:32+02:00</updated>
    <id>http://halyph.com/blog/2014/11/16/how-to-fix-textmate-osx-yosemite-ruby-1-dot-8-issues</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/textmate.png">
Textmate 2.0 is using Ruby 1.8 in own bundles. OSX Yosemite dropped Ruby 1.8 as default Ruby implementation, now it&rsquo;s Ruby 2.0. Based on this all Textmate ruby-based (legacy) bundles do not work. It can be fixed in several steps:</p>

<ul>
<li>Install Ruby 1.8.x via some Ruby version manager (e.g. rvm)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rvm install 1.8
</span><span class='line'>Warning! Requested ruby installation which requires another ruby available - installing ruby-1.8.7-p374 first.
</span><span class='line'>
</span><span class='line'>Checking requirements <span class="k">for</span> osx.
</span><span class='line'>Installing requirements <span class="k">for</span> osx.
</span><span class='line'>Updating system...........
</span><span class='line'>Installing required custom packages: homebrew/versions homebrew/versions.
</span><span class='line'>Installing required packages: libtool, gcc48, libyaml, libksba, openssl098.....-Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> are already up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /Users/halyph/.rvm/rubies/ruby-1.8.7-p374, this may take a <span class="k">while</span> depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#downloading ruby-1.8.7-p374, this may take a while depending on your connection...</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'><span class="m">100</span> 4150k  <span class="m">100</span> 4150k    <span class="m">0</span>     <span class="m">0</span>   279k      <span class="m">0</span>  0:00:14  0:00:14 --:--:--  326k
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#extracting ruby-1.8.7-p374 to /Users/halyph/.rvm/src/ruby-1.8.7-p374....</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/GH-488.patch.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#configuring...............................</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#post-configuration.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#compiling....................................................</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#installing.</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#making binaries executable..</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#downloading rubygems-2.0.14</span>
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'><span class="m">100</span>  329k  <span class="m">100</span>  329k    <span class="m">0</span>     <span class="m">0</span>   108k      <span class="m">0</span>  0:00:03  0:00:03 --:--:--  108k
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#extracting rubygems-2.0.14....</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#removing old rubygems.........</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#installing rubygems-2.0.14..................................|</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374@global</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems..............................................................</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#generating global wrappers........</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-p374</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#generating default wrappers........</span>
</span><span class='line'>ruby-1.8.7-p374 - <span class="c">#adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span>
</span><span class='line'>Install of ruby-1.8.7-p374 - <span class="c">#complete</span>
</span><span class='line'>WARNING: Please be aware that you just installed a ruby that is no longer maintained <span class="o">(</span>2014-02-23<span class="o">)</span>, <span class="k">for</span> a list of maintained rubies visit:
</span><span class='line'>
</span><span class='line'>    http://bugs.ruby-lang.org/projects/ruby/wiki/ReleaseEngineering
</span><span class='line'>
</span><span class='line'>Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches.
</span><span class='line'>Ruby was built without documentation, to build it run: rvm docs generate-ri
</span><span class='line'>Checking requirements <span class="k">for</span> osx.
</span><span class='line'>Certificates in <span class="s1">&#39;/usr/local/etc/openssl/cert.pem&#39;</span> are already up to date.
</span><span class='line'>Requirements installation successful.
</span><span class='line'>Installing Ruby from <span class="nb">source </span>to: /Users/halyph/.rvm/rubies/ruby-1.8.7-head, this may take a <span class="k">while</span> depending on your cpu<span class="o">(</span>s<span class="o">)</span>...
</span><span class='line'>Cloning from git://github.com/ruby/ruby.git, this may take a <span class="k">while</span> depending on your connection.
</span><span class='line'>HEAD is now at 2a9ea11 * lib/webrick/server.rb <span class="o">(</span>initialize<span class="o">)</span>: Initialize shutdown pipe here
</span><span class='line'>Branch ruby_1_8_7 <span class="nb">set </span>up to track remote branch ruby_1_8_7 from origin.
</span><span class='line'>Switched to a new branch <span class="s1">&#39;ruby_1_8_7&#39;</span>
</span><span class='line'>Copying from repo to src path...
</span><span class='line'>ruby-1.8.7-head - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/stdout-rouge-fix.patch.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/1.8.7/no_sslv2.diff.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#applying patch /Users/halyph/.rvm/patches/ruby/ssl_no_ec2m.patch.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#autoreconf.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#configuring...............................</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#post-configuration.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#compiling...................................................|</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#installing.</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#making binaries executable..</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#downloading rubygems-2.0.14</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#extracting rubygems-2.0.14.....</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#removing old rubygems.........</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#installing rubygems-2.0.14..................................|</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head@global</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#importing gemset /Users/halyph/.rvm/gemsets/ruby/1.8.7/global.gems..............................................................</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#generating global wrappers........</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#gemset created /Users/halyph/.rvm/gems/ruby-1.8.7-head</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#importing gemsetfile /Users/halyph/.rvm/gemsets/default.gems evaluated to empty gem list</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#generating default wrappers........</span>
</span><span class='line'>ruby-1.8.7-head - <span class="c">#adjusting #shebangs for (gem irb erb ri rdoc testrb rake).</span>
</span><span class='line'>Install of ruby-1.8.7-head - <span class="c">#complete</span>
</span><span class='line'>Please be aware that you just installed a ruby that requires        <span class="m">3</span> patches just to be compiled on an up to date linux system.
</span><span class='line'>This may have known and unaccounted <span class="k">for</span> security vulnerabilities.
</span><span class='line'>Please consider upgrading to ruby-2.1.4 which will have all of the latest security patches.
</span><span class='line'>Ruby was built without documentation, to build it run: rvm docs generate-ri
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Update Textmate preferences
<img src="http://halyph.com/images/posts/textmate_prefs_ruby.png"></p></li>
<li><p>Verify &ldquo;updated&rdquo; Textmate settings via some ruby-based bundles,
e.g. <code>Bundles-&gt;Text-&gt;Duplicate Line</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching to Textmate 2]]></title>
    <link href="http://halyph.com/blog/2014/10/20/switching-to-textmate-2/"/>
    <updated>2014-10-20T02:06:26+03:00</updated>
    <id>http://halyph.com/blog/2014/10/20/switching-to-textmate-2</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/textmate.png">
Recently I&rsquo;ve decided to switch from Sublime Text editor to <a href="http://macromates.com">TextMate 2</a>. At the beginning of <a href="http://rubyonrails.org/">Rails</a> &ldquo;era&rdquo; it was the sexiest text editor in the world. But, at that time, I was a Windows user ;-)</p>

<p>I was inspired by <a href="http://blog.agiledeveloper.com/">Venkat Subramaniam</a> to make this switch in 2014. Dr. Venkant is using Textmate during his conference live coding for years.</p>

<p>Additional argument for switching is the fact that Textmate 2 is <a href="https://github.com/textmate/textmate">open sourced</a>.</p>

<p>Here is the list of articles which I highly recommend for Textmate newcomers:</p>

<ul>
<li><a href="http://hiltmon.com/blog/2013/11/09/textmate-2-basics/">TextMate 2 Basics</a> it&rsquo;s basic tips for using TextMate</li>
<li><a href="http://hiltmon.com/blog/2014/01/20/more-textmate-2-basics/">More TextMate 2 Basics</a> additional usage tips</li>
<li><a href="http://hiltmon.com/blog/2013/04/15/my-textmate-2-setup/">My TextMate 2 Setup</a> shows how to tweak TextMate properties per user or per project</li>
<li><a href="http://nofluffjuststuff.com/blog/venkat_subramaniam/2007/10/tweaking_textmate_groovy_bundle">Tweaking TextMate Groovy Bundle</a> and <a href="http://nofluffjuststuff.com/blog/venkat_subramaniam/2008/02/tweaking_textmate_ruby_bundle_run_command">Tweaking TextMate Ruby Bundle Run Command</a> it&rsquo;s famous Dr. Venkat TextMate setting for showing program run results as tooltips (highly recommended settings). Also, you can see how to configure these setting in this screencast <a href="https://www.agilelearner.com/presentation/5">Running in TextMate</a></li>
<li><a href="http://manual.macromates.com/en/">TextMate Manual</a></li>
</ul>


<p>Don&rsquo;t forget to share your TextMate links, article, tips, hacks, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Block Comments in Bash Script]]></title>
    <link href="http://halyph.com/blog/2014/10/09/bash-block-comments/"/>
    <updated>2014-10-09T22:39:25+03:00</updated>
    <id>http://halyph.com/blog/2014/10/09/bash-block-comments</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://halyph.com/images/blog/bash.png">
What is the simplest way to define block comment in Bash script?</p>

<p>I&rsquo;ve selected two approaches for myself:</p>

<ul>
<li>Use here document</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;before block comment&quot;</span>
</span><span class='line'>: <span class="s">&lt;&lt;&#39;END&#39;</span>
</span><span class='line'><span class="s">Some long </span>
</span><span class='line'><span class="s">myltiline </span>
</span><span class='line'><span class="s">text</span>
</span><span class='line'><span class="s">END</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;after block comment&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use <strong>&ldquo;if&rdquo;</strong> false block</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;before block comment&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>Some long
</span><span class='line'>myltiline
</span><span class='line'>text
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;after block comment&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migration to Octopress]]></title>
    <link href="http://halyph.com/blog/2014/09/07/migration-to-octopress/"/>
    <updated>2014-09-07T23:15:56+03:00</updated>
    <id>http://halyph.com/blog/2014/09/07/migration-to-octopress</id>
    <content type="html"><![CDATA[<h2>Objectives</h2>

<p>I&rsquo;ve been blogging for several years (2009-2014) using Google Blogger <a href="http://halyph.blogspot.com">My old blogspot blog</a>. It was a great experience. But, I always felt some discomfort.
I couldn&rsquo;t simply write without thinking how it will be rendered. I was distracted by blog engine.</p>

<h2>Moving away</h2>

<p>Additional inspiration for moving away came from the essay <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Blogging Like a Hacker</a>.
Finally, I made a decision to use GitHub Pages for blogging. There were two choices: <a href="http://jekyllrb.com/">Jekyll</a> or <a href="http://octopress.org/">Octopress</a>.
I picked Octopress because of the pre-bundled minimal required blogging features. <em>I.e.</em> it&rsquo;s not required the additional configuration to start blogging right away.</p>

<p>The official Octopress <a href="http://octopress.org/docs/">documentation</a> has step-by-step guide for blog setup. It&rsquo;s very convenient and transparent.</p>

<h2>Theme</h2>

<p>I didn&rsquo;t want to use the default Octopress theme (it&rsquo;s boring). Theme customization required some time. All others free themes are too complex, IMHO.</p>

<p>At the end I found this <a href="http://blog.justin.kelly.org.au/octopress-theme/">theme</a> and applied it to my <em>new</em> blog.</p>

<h2>Main features</h2>

<p>Here I selected the main features which I like the most:</p>

<ul>
<li>markdown for blogging</li>
<li>simple code snippets insertion</li>
<li>full blog customization</li>
<li>Ruby at the bottom (I love this language)</li>
<li>ability to use your favorite text editor (Textmate in my case) for blogging</li>
</ul>


<h3>Minor Issues</h3>

<p>I&rsquo;ve tried to migrate posts form my old blog to Octopress, tried different approaches. But, I had no success. Actually, I had ugly results, which should be manually fixed.</p>

<h3>P.S.</h3>

<p>There are tons of different Static Site Generators, see the next resources:</p>

<ul>
<li><a href="https://www.staticgen.com/">Top Open-Source Static Site Generators</a></li>
<li><a href="http://staticsitegenerators.net/">Static Site Generators, The definitive listing of Static Site Generators — all 298 of them!</a></li>
</ul>


<p>But, Jekyll and Octopress are at the top.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Notes: Pretty Print JSON From the Command Line]]></title>
    <link href="http://halyph.com/2014/08/groovy-notes-pretty-print-json-from.html"/>
    <updated>2014-08-13T21:28:00+03:00</updated>
    <id>http://halyph.com/2014/08/groovy-notes-pretty-print-json-from</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/groovy.png">
JSON pretty print it&rsquo;s common task while working with JSON from command line. There are many ways of doing this via Python, Ruby, node.js, but here I&rsquo;d like to concentrate on Groovy one-liner:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;foo&quot;: &quot;lorem&quot;, &quot;bar&quot;: &quot;ipsum&quot;}&#39;</span> <span class="p">|</span> groovy -e <span class="s1">&#39;import groovy.json.*; println JsonOutput.prettyPrint(System.in.text)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;foo&quot;</span>: <span class="s2">&quot;lorem&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;bar&quot;</span>: <span class="s2">&quot;ipsum&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can slightly improve this one-liner via adding shell alias:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">pp</span><span class="o">=</span><span class="s2">&quot;groovy -e &#39;import groovy.json.*; println JsonOutput.prettyPrint(System.in.text)&#39;&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;foo&quot;: &quot;lorem&quot;, &quot;bar&quot;: &quot;ipsum&quot;}&#39;</span> <span class="p">|</span> pp
</span></code></pre></td></tr></table></div></figure>


<p>Also, we might use Groovy script which might be handy for simple JSON validation also:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">$</span> <span class="n">cat</span> <span class="n">prettyJson</span><span class="o">.</span><span class="na">groovy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.json.*</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span> <span class="n">JsonOutput</span><span class="o">.</span><span class="na">prettyPrint</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">text</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JsonException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span> <span class="s2">&quot;ERROR: Not valid JSON&quot;</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">$</span> <span class="n">echo</span> <span class="s1">&#39;{&quot;foo: &quot;lorem&quot;, &#39;</span> <span class="o">|</span> <span class="n">groovy</span> <span class="n">prettyJson</span><span class="o">.</span><span class="na">groovy</span>
</span><span class='line'><span class="nl">ERROR:</span> <span class="n">Not</span> <span class="n">valid</span> <span class="n">JSON</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Disable Tomcat Session Serialization]]></title>
    <link href="http://halyph.com/2014/08/how-to-disable-tomcat-session.html"/>
    <updated>2014-08-12T12:57:00+03:00</updated>
    <id>http://halyph.com/2014/08/how-to-disable-tomcat-session</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/java.png">
Suppose you have the next error while restart/stop Tomcat (in my case Tomcat 7.x):</p>

<pre class="brush: java;">WARNING: Cannot serialize session attribute SPRING_SECURITY_CONTEXT for session 54DBA076EDC9B7A24C1AF76824DFD1EF
java.io.NotSerializableException: com.MyClass
 at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180)
 at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1528)
 at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1493)
 at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1416)
 at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174)
 at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:346)
 at java.util.ArrayList.writeObject(ArrayList.java:710)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:601)
 at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:975)
...
</pre>


<p>It means that Tomcat is trying to persist non-serializable objects which were added into the session. Tomcat uses Manager component which is used to create and maintain HTTP sessions for web application.</p>

<p>By default manager implementation configured to perform session persistence across restarts and we want to disable this functionality.</p>

<p>To disable this persistence feature, create a Context configuration file (<em>context.xml</em>) for your web application and add the following element there:</p>

<pre class="brush: xml;">&lt;Manager pathname="" /&gt;
</pre>


<p>You can add this context.xml file to:</p>

<ul>
<li>App.war:/META-INF/context.xml</li>
<li>TOMCAT_HOME/conf/Catalina/localhost/App.xml file</li>
<li>TOMCAT_HOME/cont/context.xml</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/manager.html#Disable_Session_Persistence">Disable Session Persistence </a></li>
<li><a href="http://tomcat.apache.org/tomcat-7.0-doc/cluster-howto.html">Clustering/Session Replication HOW-TO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Programming Groovy 2: Dynamic Productivity for the Java Developer]]></title>
    <link href="http://halyph.com/2014/07/review-programming-groovy-2-dynamic.html"/>
    <updated>2014-07-23T01:19:00+03:00</updated>
    <id>http://halyph.com/2014/07/review-programming-groovy-2-dynamic</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/posts/book_programming_groovy2.jpg"></p>

<p>This book is well balanced around Groovy language. I would say there is minimal required knowledge regarding the language. The author (Venkat Subramaniam) fluently covered every important aspect of Groovy. But this book is for experienced developer. The accents were made only in scope of Groovy language and totally avoided any &ldquo;intro&rdquo; programming talks, which is actually cool.</p>

<p>Here is the book&rsquo;s structure:</p>

<ul>
<li><strong>Beginning Groovy</strong> - this part is dedicated to Groovy language features, especially from Java perspective. Reading this part I was building the parallel to Ruby trying to compare these languages. The main difference which I found it&rsquo;s only syntax &ldquo;sugar&rdquo;. I.e. conceptually these two language are very similar.&nbsp;</li>
<li><strong>Using Groovy</strong> - this is a pragmatic part where were highlighted the next topics: Groovy GDK, XML Processing, working with DB, &nbsp;working with Java.</li>
<li><strong>Dynamic features (MOPing Groovy)</strong>&nbsp;- here were highlighted two main metaprogramming approaches: run-time and compile-time metaprogramming. Very interesting part. For me Groovy metaprogramming facilities are much clear comparison to Ruby metaprogramming.</li>
<li><strong>Using Metaprogramming</strong> - it&rsquo;s pragmatic part where were highlighted the applications for Groovy metaprogramming features. It&rsquo;s very important to note that Groovy contains many pre-bundled classes/modules which are really nice samples of metaprogramming Groovy&rsquo;s features.<div>I highly recommend this book to everybody who is interested in Groovy language. This book highlights Groovy dynamic features.</div></li>
</ul>


<h2>References:</h2>

<ul>
<li><a href="http://www.amazon.com/Programming-Groovy-Productivity-Developer-Pragmatic/dp/1937785300/">Programming Groovy 2: Dynamic Productivity for the Java Developer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JEEConf - Kiev, 2014 - Report]]></title>
    <link href="http://halyph.com/2014/05/jeeconf-kiev-2014-report.html"/>
    <updated>2014-05-25T23:41:00+03:00</updated>
    <id>http://halyph.com/2014/05/jeeconf-kiev-2014-report</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/jeeconf.png"></p>

<p>I attended the forth <a href="http://jeeconf.com">JEEConf</a>, May 23-24, 2014. The situation in my country (Ukraine) is difficult that’s why I was amazed to see so many foreign speakers. The organizers did really tremendous work.</p>

<p>This year I divided topics by the next directions:</p>

<h3>Spring</h3>

<ul>
<li><em>Spring 4, Java EE 7 or Both? by Ivar Grimstad</em> &ndash; The main idea of the talk was to show similar and different parts of Spring 4 and Java EE 7. And have an ability easily identify when to use one or another. There are trade-offs and we should be aware of them.</li>
<li><em>Spring configuration: how to do it right (experience report), Mikalai Alimenkou</em> &ndash; Mikalai shared his experience related to Spring configs. Nice talk. I&rsquo;m going to borrow some ideas ;-)</li>
<li><em>Spring the Ripper, by Evgeny Borisov</em> &ndash; It was the most dynamic talk at this conference. The presenter shown Spring life-cycle internals in action. Well done. It should be seen by every Spring dev :-)</li>
</ul>


<h3>Frameworks</h3>

<ul>
<li><em>Apache Lucene/Solr Internals, by Anatoliy Sokolenko</em> &ndash; I had no experience with these technologies. And it was really nice intro. Now I have some clue how it works.</li>
<li><em>Streamline your processes with jBPM 6, by Jiri Svitak</em> &ndash; It was an into talk into jBPM 6. I had small experience with competitor framework <a href="http://activiti.org/">Activiti</a>. It&rsquo;s always interesting to see the similar framework&rsquo;s features.</li>
</ul>


<h3>Java/JVM/Compiler</h3>

<ul>
<li><em>Java8: Stream Style, by Sergey Kuksenko</em> &ndash; It was Java 8 Stream introduction. There were shown different stream features and approaches.</li>
<li><em><a href="http://shipilev.net/blog/2014/heapdump-is-a-lie/">What Heap Dumps Are Lying To You About, by Aleksey Shipilёv</a></em> &ndash; It&rsquo;s a very special talk related to Java &ldquo;internals&rdquo;. Actually, this talk was about Java object size calculation and what happens under the hood.</li>
<li><em>Reflection Madness, by Heinz Kabutz</em> &ndash; The presenter told us about Java reflection magic, when to use it and why it&rsquo;s dangerous.</li>
</ul>


<h3>Miscellaneous</h3>

<ul>
<li><em>Tooling of a Test-Driven Developer, by Paweł Lipiński</em> &ndash; There were highlighted two very interesting libraries for TDD on top of JUnit: <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> and <a href="https://code.google.com/p/junitparams/">JUnitParams</a>.Very interesting libraries</li>
<li><em>Web Apps in LISP!? EWW!, by Anatoly Polinsky</em> &ndash; Here was shown different aspects of web development in Clojure for beginners. It&rsquo;s was real intro, but very interesting, especially when you&rsquo;d like to spread your mind into alternative JVM-related communities.</li>
</ul>


<p>It was very productive conference for me. I&rsquo;ve got new portion of inspiration, new knowledge and passion to ordinary things.</p>

<p><img class="center" src="http://halyph.com/images/posts/jeeconf2014.jpg"></p>

<h2>References</h2>

<ul>
<li><a href="http://halyph.blogspot.com/2013/05/jeeconf-kiev-2013-report.html">JEEConf - Kiev, 2013 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2012/05/this-year-we-had-second-jeeconf.html">JEEConf - Kiev, 2012 - Report</a></li>
<li><a href="http://halyph.blogspot.com/2011/05/jeeconf-kiev-2011-report.html">JEEConf - Kiev, 2011 - Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thor Notes]]></title>
    <link href="http://halyph.com/2014/04/thor-notes.html"/>
    <updated>2014-04-19T12:40:00+03:00</updated>
    <id>http://halyph.com/2014/04/thor-notes</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/blog/ruby.png"></p>

<p>Some time ago I used <a href="http://whatisthor.com/">Thor</a> for one <a href="http://en.wikipedia.org/wiki/Command-line_interface">CLI</a> application. I
investigated several tools, but picked Thor because of its simplicity
and easy to star. In general you would need only the <a href="http://whatisthor.com/">official
documentation</a>. But, I used <a href="http://bundler.io/">Bundler</a> as real sample of Thor
usage also.</p>

<p>Here is the list of articles, notes about Thor which might be helpful:</p>

<ul>
<li><a href="http://whatisthor.com/">Thor Getting Started</a></li>
<li><a href="http://blog.paracode.com/2012/05/17/building-your-tools-with-thor/">Building Your Tools With Thor</a> - Thor overview</li>
<li><a href="https://github.com/erikhuda/thor/wiki">Thor wiki</a></li>
<li><a href="http://stackoverflow.com/questions/9340754/how-do-i-register-a-thorgroup-as-a-subcommand-with-arguments">Thor::Group as a sub-command with arguments</a></li>
<li><a href="http://stackoverflow.com/questions/9339677/how-do-i-create-thorgroup-generators-as-args-of-my-command">Thor::Group generators as args of my_command</a></li>
<li><a href="http://stackoverflow.com/questions/5663519/namespacing-thor-commands-in-a-standalone-ruby-executable">Namespacing Thor commands in a standalone ruby executable</a></li>
<li><a href="http://stackoverflow.com/questions/5729071/how-to-compose-thor-tasks-in-separate-classes-modules-files">Packaging Thor commands in separate classes/modules/files</a></li>
<li><a href="http://stackoverflow.com/questions/6561912/ruby-thor-based-executable-with-namespaces">Ruby Thor based executable with namespaces</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Making Java Groovy]]></title>
    <link href="http://halyph.com/2014/03/review-making-java-groovy.html"/>
    <updated>2014-03-17T23:27:00+02:00</updated>
    <id>http://halyph.com/2014/03/review-making-java-groovy</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/posts/book_making_java_groovy.jpg"></p>

<p>I can say that this book is special. It’s not a Groovy “cookbook”.
You won’t find tons of tricky recipes around Groovy. You won’t learn
black art of Groovy meta programming. Strange, doesn’t it. :-) Then why
you should read it. Or who should read this book?</p>

<p>The answer is very simple - Every Java programmer who wants to be productive in daily work must read this book. The author <a href="http://www.amazon.com/Ken-Kousen/e/B003NUYREE/ref=ntt_athr_dp_pel_1">Ken Kousen</a> did really great job showing different aspects of Groovy as a language, tool and ecosystem. The reader will understand that there are tons of different appliances of Groovy:</p>

<ul>
<li>Groovy scripting (@Grab)</li>
<li>Gradle, Maven/Ant automation</li>
<li>Groovy as prototyping language: REST, DB, etc.</li>
<li>Web micro-frameworks</li>
<li>Testing: Spock, mocks</li>
<li>Java/Groovy integration</li>
<li>JSON/XML manipulation</li>
</ul>


<p>The most important thing is to understand that Groovy should <strong>NOT</strong> be
used only with Grails. Java programmers must re-discover Groovy as super
pragmatic language. Everything which is written in Java can be written
in Groovy. Save your time and automate with Groovy.</p>

<h2>References:</h2>

<ul>
<li> <a href="http://www.manning.com/kousen/">Making Java Groovy, by Ken Kousen</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Learning New Programming Languages]]></title>
    <link href="http://halyph.com/2014/01/about-learning-new-programming-languages.html"/>
    <updated>2014-01-26T13:25:00+02:00</updated>
    <id>http://halyph.com/2014/01/about-learning-new-programming-languages</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://halyph.com/images/posts/progLanguages_small.gif"></p>

<p>This post is very subjective and reflect the my current point of view.</p>

<p>There are tons of different programming
languages. Few of them you are using daily, few of them from time to
time. And huge amount are touched “accidentally” (via playing and
writing “big” hello world).</p>

<p>Now the question is: Should we spend our
time playing with every hipster/hype language? Maybe it’s better to
invest own time in something really important. In something which can
improve our productivity and range of task which can be solved by our
“major” language(s).</p>

<p>In general to “learn” a new language is
not a big deal. But, nowadays we can’t use language itself in
isolation. “Learn a new language” means not only language, but also
its <strong>related areas</strong>:</p>

<ul>
<li>ecosystem (libraries, frameworks,
IDE, tools)</li>
<li>problems which can be solved with
this language (some languages are well suited for the particular set
of problems: Erlang, Prolog, SQL, etc.)</li>
<li>community</li>
<li>best practices and
idiomatic code</li>
<li>etc.</li>
</ul>


<p>Now, if you calculate and recall your
experience You will notice that language <strong>related areas</strong> take huge
amount of time to master.</p>

<p>Here is some general sample: Imagine
that language X is your major tool for making money. Now, you’ve
switched, temporary, to language Y, for reasonable amount of time
(several months). Then you switched back to language X and stick there
for long-long period of time. You will notice how you are loosing those
minimal knowledge (required to accomplish the tasks) gained for language
Y. You can recollect the syntax, but related areas of language Y
have been evolved and updated. Even more, some related areas are
obsolete, etc. And now it will be much hard to get the same knowledge in
language Y quickly. You must be adequate to understand this.</p>

<p><strong>So, what does it mean from me:</strong></p>

<ul>
<li>Select minimal required set of
programming languages which makes you as productive as possible.
Master these languages</li>
<li>It’s a good idea to spend
time playing with other languages. But it’s bad idea to switch from
one to another language regularly. You are losing focus.</li>
<li>Master ecosystem</li>
<li>Be active in language
community</li>
</ul>


<p>I don’t want to say that learning new
languages is a bad idea. No. I don’t think so. But the reality has some
influence on us. It might happen that “new” language and related areas
are cool, you are happy using all these stuff working on pet-projects.
But you have some objective constrains and can’t use it at your work:
e.g. a) there are no projects where you can use this language or b) you
can’t change the company because of geographical constrains. Keeping all
these in mind you should spend your time effectively and learn
really valuable stuff. <br/>
Try to avoid hipster <a href="http://en.wikipedia.org/wiki/Bandwagon_effect">bandwagon effect</a>.</p>
]]></content>
  </entry>
  
</feed>
